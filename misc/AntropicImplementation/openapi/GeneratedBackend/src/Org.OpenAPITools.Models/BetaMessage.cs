/*
 * Anthropic API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class BetaMessage 
    {
        /// <summary>
        /// Unique object identifier.  The format and length of IDs may change over time.
        /// </summary>
        /// <value>Unique object identifier.  The format and length of IDs may change over time.</value>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }


        /// <summary>
        /// Object type.  For Messages, this is always `\"message\"`.
        /// </summary>
        /// <value>Object type.  For Messages, this is always `\"message\"`.</value>
        
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum MessageEnum for message
            /// </summary>
            [EnumMember(Value = "message")]
            MessageEnum = 1
        }

        /// <summary>
        /// Object type.  For Messages, this is always &#x60;\&quot;message\&quot;&#x60;.
        /// </summary>
        /// <value>Object type.  For Messages, this is always &#x60;\&quot;message\&quot;&#x60;.</value>
        [Required]
        [DataMember(Name="type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; } = TypeEnum.MessageEnum;


        /// <summary>
        /// Conversational role of the generated message.  This will always be `\"assistant\"`.
        /// </summary>
        /// <value>Conversational role of the generated message.  This will always be `\"assistant\"`.</value>
        
        public enum RoleEnum
        {
            
            /// <summary>
            /// Enum AssistantEnum for assistant
            /// </summary>
            [EnumMember(Value = "assistant")]
            AssistantEnum = 1
        }

        /// <summary>
        /// Conversational role of the generated message.  This will always be &#x60;\&quot;assistant\&quot;&#x60;.
        /// </summary>
        /// <value>Conversational role of the generated message.  This will always be &#x60;\&quot;assistant\&quot;&#x60;.</value>
        [Required]
        [DataMember(Name="role", EmitDefaultValue=true)]
        public RoleEnum Role { get; set; } = RoleEnum.AssistantEnum;

        /// <summary>
        /// Content generated by the model.  This is an array of content blocks, each of which has a &#x60;type&#x60; that determines its shape.  Example:  &#x60;&#x60;&#x60;json [{\&quot;type\&quot;: \&quot;text\&quot;, \&quot;text\&quot;: \&quot;Hi, I&#39;m Claude.\&quot;}] &#x60;&#x60;&#x60;  If the request input &#x60;messages&#x60; ended with an &#x60;assistant&#x60; turn, then the response &#x60;content&#x60; will continue directly from that last turn. You can use this to constrain the model&#39;s output.  For example, if the input &#x60;messages&#x60; were: &#x60;&#x60;&#x60;json [   {\&quot;role\&quot;: \&quot;user\&quot;, \&quot;content\&quot;: \&quot;What&#39;s the Greek name for Sun? (A) Sol (B) Helios (C) Sun\&quot;},   {\&quot;role\&quot;: \&quot;assistant\&quot;, \&quot;content\&quot;: \&quot;The best answer is (\&quot;} ] &#x60;&#x60;&#x60;  Then the response &#x60;content&#x60; might be:  &#x60;&#x60;&#x60;json [{\&quot;type\&quot;: \&quot;text\&quot;, \&quot;text\&quot;: \&quot;B)\&quot;}] &#x60;&#x60;&#x60;
        /// </summary>
        /// <value>Content generated by the model.  This is an array of content blocks, each of which has a &#x60;type&#x60; that determines its shape.  Example:  &#x60;&#x60;&#x60;json [{\&quot;type\&quot;: \&quot;text\&quot;, \&quot;text\&quot;: \&quot;Hi, I&#39;m Claude.\&quot;}] &#x60;&#x60;&#x60;  If the request input &#x60;messages&#x60; ended with an &#x60;assistant&#x60; turn, then the response &#x60;content&#x60; will continue directly from that last turn. You can use this to constrain the model&#39;s output.  For example, if the input &#x60;messages&#x60; were: &#x60;&#x60;&#x60;json [   {\&quot;role\&quot;: \&quot;user\&quot;, \&quot;content\&quot;: \&quot;What&#39;s the Greek name for Sun? (A) Sol (B) Helios (C) Sun\&quot;},   {\&quot;role\&quot;: \&quot;assistant\&quot;, \&quot;content\&quot;: \&quot;The best answer is (\&quot;} ] &#x60;&#x60;&#x60;  Then the response &#x60;content&#x60; might be:  &#x60;&#x60;&#x60;json [{\&quot;type\&quot;: \&quot;text\&quot;, \&quot;text\&quot;: \&quot;B)\&quot;}] &#x60;&#x60;&#x60;</value>
        [Required]
        [DataMember(Name="content", EmitDefaultValue=false)]
        public List<BetaContentBlock> Content { get; set; }

        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [Required]
        [DataMember(Name="model", EmitDefaultValue=false)]
        public Model Model { get; set; }

        /// <summary>
        /// Gets or Sets StopReason
        /// </summary>
        [Required]
        [DataMember(Name="stop_reason", EmitDefaultValue=true)]
        public string? StopReason { get; set; }

        /// <summary>
        /// Gets or Sets StopSequence
        /// </summary>
        [Required]
        [DataMember(Name="stop_sequence", EmitDefaultValue=true)]
        public string? StopSequence { get; set; }

        /// <summary>
        /// Billing and rate-limit usage.  Anthropic&#39;s API bills and rate-limits by token counts, as tokens represent the underlying cost to our systems.  Under the hood, the API transforms requests into a format suitable for the model. The model&#39;s output then goes through a parsing stage before becoming an API response. As a result, the token counts in &#x60;usage&#x60; will not match one-to-one with the exact visible content of an API request or response.  For example, &#x60;output_tokens&#x60; will be non-zero, even for an empty string response from Claude.
        /// </summary>
        /// <value>Billing and rate-limit usage.  Anthropic&#39;s API bills and rate-limits by token counts, as tokens represent the underlying cost to our systems.  Under the hood, the API transforms requests into a format suitable for the model. The model&#39;s output then goes through a parsing stage before becoming an API response. As a result, the token counts in &#x60;usage&#x60; will not match one-to-one with the exact visible content of an API request or response.  For example, &#x60;output_tokens&#x60; will be non-zero, even for an empty string response from Claude.</value>
        [Required]
        [DataMember(Name="usage", EmitDefaultValue=false)]
        public BetaUsage Usage { get; set; }

    }
}
