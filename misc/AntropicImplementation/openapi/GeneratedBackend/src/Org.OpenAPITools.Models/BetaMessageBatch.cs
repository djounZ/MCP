/*
 * Anthropic API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class BetaMessageBatch 
    {
        /// <summary>
        /// Unique object identifier.  The format and length of IDs may change over time.
        /// </summary>
        /// <value>Unique object identifier.  The format and length of IDs may change over time.</value>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }


        /// <summary>
        /// Object type.  For Message Batches, this is always `\"message_batch\"`.
        /// </summary>
        /// <value>Object type.  For Message Batches, this is always `\"message_batch\"`.</value>
        
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum MessageBatchEnum for message_batch
            /// </summary>
            [EnumMember(Value = "message_batch")]
            MessageBatchEnum = 1
        }

        /// <summary>
        /// Object type.  For Message Batches, this is always &#x60;\&quot;message_batch\&quot;&#x60;.
        /// </summary>
        /// <value>Object type.  For Message Batches, this is always &#x60;\&quot;message_batch\&quot;&#x60;.</value>
        [Required]
        [DataMember(Name="type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; } = TypeEnum.MessageBatchEnum;


        /// <summary>
        /// Processing status of the Message Batch.
        /// </summary>
        /// <value>Processing status of the Message Batch.</value>
        
        public enum ProcessingStatusEnum
        {
            
            /// <summary>
            /// Enum InProgressEnum for in_progress
            /// </summary>
            [EnumMember(Value = "in_progress")]
            InProgressEnum = 1,
            
            /// <summary>
            /// Enum CancelingEnum for canceling
            /// </summary>
            [EnumMember(Value = "canceling")]
            CancelingEnum = 2,
            
            /// <summary>
            /// Enum EndedEnum for ended
            /// </summary>
            [EnumMember(Value = "ended")]
            EndedEnum = 3
        }

        /// <summary>
        /// Processing status of the Message Batch.
        /// </summary>
        /// <value>Processing status of the Message Batch.</value>
        [Required]
        [DataMember(Name="processing_status", EmitDefaultValue=true)]
        public ProcessingStatusEnum ProcessingStatus { get; set; }

        /// <summary>
        /// Tallies requests within the Message Batch, categorized by their status.  Requests start as &#x60;processing&#x60; and move to one of the other statuses only once processing of the entire batch ends. The sum of all values always matches the total number of requests in the batch.
        /// </summary>
        /// <value>Tallies requests within the Message Batch, categorized by their status.  Requests start as &#x60;processing&#x60; and move to one of the other statuses only once processing of the entire batch ends. The sum of all values always matches the total number of requests in the batch.</value>
        [Required]
        [DataMember(Name="request_counts", EmitDefaultValue=false)]
        public BetaRequestCounts RequestCounts { get; set; }

        /// <summary>
        /// Gets or Sets EndedAt
        /// </summary>
        [Required]
        [DataMember(Name="ended_at", EmitDefaultValue=true)]
        public DateTimeOffset? EndedAt { get; set; }

        /// <summary>
        /// RFC 3339 datetime string representing the time at which the Message Batch was created.
        /// </summary>
        /// <value>RFC 3339 datetime string representing the time at which the Message Batch was created.</value>
        [Required]
        [DataMember(Name="created_at", EmitDefaultValue=true)]
        public DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// RFC 3339 datetime string representing the time at which the Message Batch will expire and end processing, which is 24 hours after creation.
        /// </summary>
        /// <value>RFC 3339 datetime string representing the time at which the Message Batch will expire and end processing, which is 24 hours after creation.</value>
        [Required]
        [DataMember(Name="expires_at", EmitDefaultValue=true)]
        public DateTimeOffset ExpiresAt { get; set; }

        /// <summary>
        /// Gets or Sets ArchivedAt
        /// </summary>
        [Required]
        [DataMember(Name="archived_at", EmitDefaultValue=true)]
        public DateTimeOffset? ArchivedAt { get; set; }

        /// <summary>
        /// Gets or Sets CancelInitiatedAt
        /// </summary>
        [Required]
        [DataMember(Name="cancel_initiated_at", EmitDefaultValue=true)]
        public DateTimeOffset? CancelInitiatedAt { get; set; }

        /// <summary>
        /// Gets or Sets ResultsUrl
        /// </summary>
        [Required]
        [DataMember(Name="results_url", EmitDefaultValue=true)]
        public string? ResultsUrl { get; set; }

    }
}
