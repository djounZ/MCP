/*
 * Anthropic API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Net;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using System.Text.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class MessageBatchesApiController : ControllerBase
    { 
        /// <summary>
        /// Cancel a Message Batch
        /// </summary>
        /// <remarks>Batches may be canceled any time before processing ends. Once cancellation is initiated, the batch enters a &#x60;canceling&#x60; state, at which time the system may complete any in-progress, non-interruptible requests before finalizing cancellation.  The number of canceled requests is specified in &#x60;request_counts&#x60;. To determine which requests were canceled, check the individual results within the batch. Note that cancellation may not result in any canceled requests if they were non-interruptible.</remarks>
        /// <param name="messageBatchId">ID of the Message Batch.</param>
        /// <param name="anthropicBeta">Optional header to specify the beta version(s) you want to use.  To use multiple betas, use a comma separated list like &#x60;beta1,beta2&#x60; or specify the header multiple times for each beta.</param>
        /// <param name="anthropicVersion">The version of the Anthropic API you want to use.  Read more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).</param>
        /// <response code="200">Successful Response</response>
        /// <response code="4400">Error response.  See our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details.</response>
        [HttpPost]
        [Route("/v1/messages/batches/{message_batch_id}/cancel")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(BetaMessageBatch))]
        [ProducesResponseType(statusCode: 4400, type: typeof(BetaErrorResponse))]
        public virtual IActionResult BetaMessageBatchesCancel([FromRoute (Name = "message_batch_id")][Required]string messageBatchId, [FromHeader (Name = "anthropic-beta")]string? anthropicBeta, [FromHeader (Name = "anthropic-version")]string? anthropicVersion)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            //TODO: Uncomment the next line to return response 4400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(4400, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"cancel_initiated_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"request_counts\" : \"\",\r\n  \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"archived_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"processing_status\" : \"in_progress\",\r\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"id\" : \"id\",\r\n  \"results_url\" : \"results_url\",\r\n  \"type\" : \"message_batch\",\r\n  \"ended_at\" : \"2000-01-23T04:56:07.000+00:00\"\r\n}";
            exampleJson = "{\r\n  \"type\" : \"error\",\r\n  \"error\" : {\r\n    \"type\" : \"invalid_request_error\",\r\n    \"message\" : \"Invalid request\"\r\n  }\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<BetaMessageBatch>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Cancel a Message Batch
        /// </summary>
        /// <remarks>Batches may be canceled any time before processing ends. Once cancellation is initiated, the batch enters a &#x60;canceling&#x60; state, at which time the system may complete any in-progress, non-interruptible requests before finalizing cancellation.  The number of canceled requests is specified in &#x60;request_counts&#x60;. To determine which requests were canceled, check the individual results within the batch. Note that cancellation may not result in any canceled requests if they were non-interruptible.</remarks>
        /// <param name="messageBatchId">ID of the Message Batch.</param>
        /// <param name="anthropicBeta">Optional header to specify the beta version(s) you want to use.  To use multiple betas, use a comma separated list like &#x60;beta1,beta2&#x60; or specify the header multiple times for each beta.</param>
        /// <param name="anthropicVersion">The version of the Anthropic API you want to use.  Read more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).</param>
        /// <response code="200">Successful Response</response>
        /// <response code="4400">Error response.  See our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details.</response>
        [HttpPost]
        [Route("/v1/messages/batches/{message_batch_id}/cancel/beta=true")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(BetaMessageBatch))]
        [ProducesResponseType(statusCode: 400, type: typeof(BetaErrorResponse))]
        public virtual IActionResult BetaMessageBatchesCancelBeta([FromRoute (Name = "message_batch_id")][Required]string messageBatchId, [FromHeader (Name = "anthropic-beta")]string? anthropicBeta, [FromHeader (Name = "anthropic-version")]string? anthropicVersion)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            //TODO: Uncomment the next line to return response 4400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(4400, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"cancel_initiated_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"request_counts\" : \"\",\r\n  \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"archived_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"processing_status\" : \"in_progress\",\r\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"id\" : \"id\",\r\n  \"results_url\" : \"results_url\",\r\n  \"type\" : \"message_batch\",\r\n  \"ended_at\" : \"2000-01-23T04:56:07.000+00:00\"\r\n}";
            exampleJson = "{\r\n  \"type\" : \"error\",\r\n  \"error\" : {\r\n    \"type\" : \"invalid_request_error\",\r\n    \"message\" : \"Invalid request\"\r\n  }\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<BetaMessageBatch>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List Message Batches
        /// </summary>
        /// <remarks>List all Message Batches within a Workspace. Most recently created batches are returned first.</remarks>
        /// <param name="beforeId">ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately before this object.</param>
        /// <param name="afterId">ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately after this object.</param>
        /// <param name="limit">Number of items to return per page.  Defaults to &#x60;20&#x60;. Ranges from &#x60;1&#x60; to &#x60;100&#x60;.</param>
        /// <param name="anthropicBeta">Optional header to specify the beta version(s) you want to use.  To use multiple betas, use a comma separated list like &#x60;beta1,beta2&#x60; or specify the header multiple times for each beta.</param>
        /// <param name="anthropicVersion">The version of the Anthropic API you want to use.  Read more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).</param>
        /// <param name="xApiKey">Your unique API key for authentication.   This key is required in the header of all API requests, to authenticate your account and access Anthropic&#39;s services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.</param>
        /// <response code="200">Successful Response</response>
        /// <response code="4400">Error response.  See our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details.</response>
        [HttpGet]
        [Route("/v1/messages/batches")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(BetaListResponseMessageBatch))]
        [ProducesResponseType(statusCode: 4400, type: typeof(BetaErrorResponse))]
        public virtual IActionResult BetaMessageBatchesList([FromQuery (Name = "before_id")]string? beforeId, [FromQuery (Name = "after_id")]string? afterId, [FromQuery (Name = "limit")][Range(1, 100)]int? limit, [FromHeader (Name = "anthropic-beta")]string? anthropicBeta, [FromHeader (Name = "anthropic-version")]string? anthropicVersion, [FromHeader (Name = "x-api-key")]string? xApiKey)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            //TODO: Uncomment the next line to return response 4400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(4400, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"first_id\" : \"first_id\",\r\n  \"data\" : [ {\r\n    \"cancel_initiated_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"request_counts\" : \"\",\r\n    \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"archived_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"processing_status\" : \"in_progress\",\r\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"id\" : \"id\",\r\n    \"results_url\" : \"results_url\",\r\n    \"type\" : \"message_batch\",\r\n    \"ended_at\" : \"2000-01-23T04:56:07.000+00:00\"\r\n  }, {\r\n    \"cancel_initiated_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"request_counts\" : \"\",\r\n    \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"archived_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"processing_status\" : \"in_progress\",\r\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"id\" : \"id\",\r\n    \"results_url\" : \"results_url\",\r\n    \"type\" : \"message_batch\",\r\n    \"ended_at\" : \"2000-01-23T04:56:07.000+00:00\"\r\n  } ],\r\n  \"last_id\" : \"last_id\",\r\n  \"has_more\" : true\r\n}";
            exampleJson = "{\r\n  \"type\" : \"error\",\r\n  \"error\" : {\r\n    \"type\" : \"invalid_request_error\",\r\n    \"message\" : \"Invalid request\"\r\n  }\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<BetaListResponseMessageBatch>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List Message Batches
        /// </summary>
        /// <remarks>List all Message Batches within a Workspace. Most recently created batches are returned first.</remarks>
        /// <param name="beforeId">ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately before this object.</param>
        /// <param name="afterId">ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately after this object.</param>
        /// <param name="limit">Number of items to return per page.  Defaults to &#x60;20&#x60;. Ranges from &#x60;1&#x60; to &#x60;100&#x60;.</param>
        /// <param name="anthropicBeta">Optional header to specify the beta version(s) you want to use.  To use multiple betas, use a comma separated list like &#x60;beta1,beta2&#x60; or specify the header multiple times for each beta.</param>
        /// <param name="anthropicVersion">The version of the Anthropic API you want to use.  Read more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).</param>
        /// <param name="xApiKey">Your unique API key for authentication.   This key is required in the header of all API requests, to authenticate your account and access Anthropic&#39;s services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.</param>
        /// <response code="200">Successful Response</response>
        /// <response code="4400">Error response.  See our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details.</response>
        [HttpGet]
        [Route("/v1/messages/batches/beta=true")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(BetaListResponseMessageBatch))]
        [ProducesResponseType(statusCode: 4400, type: typeof(BetaErrorResponse))]
        public virtual IActionResult BetaMessageBatchesListBeta([FromQuery (Name = "before_id")]string? beforeId, [FromQuery (Name = "after_id")]string? afterId, [FromQuery (Name = "limit")][Range(1, 100)]int? limit, [FromHeader (Name = "anthropic-beta")]string? anthropicBeta, [FromHeader (Name = "anthropic-version")]string? anthropicVersion, [FromHeader (Name = "x-api-key")]string? xApiKey)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            //TODO: Uncomment the next line to return response 4400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(4400, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"first_id\" : \"first_id\",\r\n  \"data\" : [ {\r\n    \"cancel_initiated_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"request_counts\" : \"\",\r\n    \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"archived_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"processing_status\" : \"in_progress\",\r\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"id\" : \"id\",\r\n    \"results_url\" : \"results_url\",\r\n    \"type\" : \"message_batch\",\r\n    \"ended_at\" : \"2000-01-23T04:56:07.000+00:00\"\r\n  }, {\r\n    \"cancel_initiated_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"request_counts\" : \"\",\r\n    \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"archived_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"processing_status\" : \"in_progress\",\r\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"id\" : \"id\",\r\n    \"results_url\" : \"results_url\",\r\n    \"type\" : \"message_batch\",\r\n    \"ended_at\" : \"2000-01-23T04:56:07.000+00:00\"\r\n  } ],\r\n  \"last_id\" : \"last_id\",\r\n  \"has_more\" : true\r\n}";
            exampleJson = "{\r\n  \"type\" : \"error\",\r\n  \"error\" : {\r\n    \"type\" : \"invalid_request_error\",\r\n    \"message\" : \"Invalid request\"\r\n  }\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<BetaListResponseMessageBatch>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create a Message Batch
        /// </summary>
        /// <remarks>Send a batch of Message creation requests.  The Message Batches API can be used to process multiple Messages API requests at once. Once a Message Batch is created, it begins processing immediately. Batches can take up to 24 hours to complete.</remarks>
        /// <param name="betaCreateMessageBatchParams"></param>
        /// <param name="anthropicBeta">Optional header to specify the beta version(s) you want to use.  To use multiple betas, use a comma separated list like &#x60;beta1,beta2&#x60; or specify the header multiple times for each beta.</param>
        /// <param name="anthropicVersion">The version of the Anthropic API you want to use.  Read more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).</param>
        /// <response code="200">Successful Response</response>
        /// <response code="4400">Error response.  See our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details.</response>
        [HttpPost]
        [Route("/v1/messages/batches")]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(BetaMessageBatch))]
        [ProducesResponseType(statusCode: 4400, type: typeof(BetaErrorResponse))]
        public virtual IActionResult BetaMessageBatchesPost([FromBody]BetaCreateMessageBatchParams betaCreateMessageBatchParams, [FromHeader (Name = "anthropic-beta")]string? anthropicBeta, [FromHeader (Name = "anthropic-version")]string? anthropicVersion)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            //TODO: Uncomment the next line to return response 4400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(4400, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"cancel_initiated_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"request_counts\" : \"\",\r\n  \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"archived_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"processing_status\" : \"in_progress\",\r\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"id\" : \"id\",\r\n  \"results_url\" : \"results_url\",\r\n  \"type\" : \"message_batch\",\r\n  \"ended_at\" : \"2000-01-23T04:56:07.000+00:00\"\r\n}";
            exampleJson = "{\r\n  \"type\" : \"error\",\r\n  \"error\" : {\r\n    \"type\" : \"invalid_request_error\",\r\n    \"message\" : \"Invalid request\"\r\n  }\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<BetaMessageBatch>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create a Message Batch
        /// </summary>
        /// <remarks>Send a batch of Message creation requests.  The Message Batches API can be used to process multiple Messages API requests at once. Once a Message Batch is created, it begins processing immediately. Batches can take up to 24 hours to complete.</remarks>
        /// <param name="betaCreateMessageBatchParams"></param>
        /// <param name="anthropicBeta">Optional header to specify the beta version(s) you want to use.  To use multiple betas, use a comma separated list like &#x60;beta1,beta2&#x60; or specify the header multiple times for each beta.</param>
        /// <param name="anthropicVersion">The version of the Anthropic API you want to use.  Read more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).</param>
        /// <response code="200">Successful Response</response>
        /// <response code="4400">Error response.  See our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details.</response>
        [HttpPost]
        [Route("/v1/messages/batches/beta=true")]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(BetaMessageBatch))]
        [ProducesResponseType(statusCode: 4400, type: typeof(BetaErrorResponse))]
        public virtual IActionResult BetaMessageBatchesPostBeta([FromBody]BetaCreateMessageBatchParams betaCreateMessageBatchParams, [FromHeader (Name = "anthropic-beta")]string? anthropicBeta, [FromHeader (Name = "anthropic-version")]string? anthropicVersion)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            //TODO: Uncomment the next line to return response 4400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(4400, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"cancel_initiated_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"request_counts\" : \"\",\r\n  \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"archived_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"processing_status\" : \"in_progress\",\r\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"id\" : \"id\",\r\n  \"results_url\" : \"results_url\",\r\n  \"type\" : \"message_batch\",\r\n  \"ended_at\" : \"2000-01-23T04:56:07.000+00:00\"\r\n}";
            exampleJson = "{\r\n  \"type\" : \"error\",\r\n  \"error\" : {\r\n    \"type\" : \"invalid_request_error\",\r\n    \"message\" : \"Invalid request\"\r\n  }\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<BetaMessageBatch>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieve Message Batch results
        /// </summary>
        /// <remarks>Streams the results of a Message Batch as a &#x60;.jsonl&#x60; file.  Each line in the file is a JSON object containing the result of a single request in the Message Batch. Results are not guaranteed to be in the same order as requests. Use the &#x60;custom_id&#x60; field to match results to requests.</remarks>
        /// <param name="messageBatchId">ID of the Message Batch.</param>
        /// <param name="anthropicBeta">Optional header to specify the beta version(s) you want to use.  To use multiple betas, use a comma separated list like &#x60;beta1,beta2&#x60; or specify the header multiple times for each beta.</param>
        /// <param name="anthropicVersion">The version of the Anthropic API you want to use.  Read more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).</param>
        /// <param name="xApiKey">Your unique API key for authentication.   This key is required in the header of all API requests, to authenticate your account and access Anthropic&#39;s services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.</param>
        /// <response code="200">Successful Response</response>
        /// <response code="4400">Error response.  See our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details.</response>
        [HttpGet]
        [Route("/v1/messages/batches/{message_batch_id}/results")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(System.IO.Stream))]
        [ProducesResponseType(statusCode: 4400, type: typeof(BetaErrorResponse))]
        public virtual IActionResult BetaMessageBatchesResults([FromRoute (Name = "message_batch_id")][Required]string messageBatchId, [FromHeader (Name = "anthropic-beta")]string? anthropicBeta, [FromHeader (Name = "anthropic-version")]string? anthropicVersion, [FromHeader (Name = "x-api-key")]string? xApiKey)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            //TODO: Uncomment the next line to return response 4400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(4400, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"type\" : \"error\",\r\n  \"error\" : {\r\n    \"type\" : \"invalid_request_error\",\r\n    \"message\" : \"Invalid request\"\r\n  }\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<System.IO.Stream>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieve Message Batch results
        /// </summary>
        /// <remarks>Streams the results of a Message Batch as a &#x60;.jsonl&#x60; file.  Each line in the file is a JSON object containing the result of a single request in the Message Batch. Results are not guaranteed to be in the same order as requests. Use the &#x60;custom_id&#x60; field to match results to requests.</remarks>
        /// <param name="messageBatchId">ID of the Message Batch.</param>
        /// <param name="anthropicBeta">Optional header to specify the beta version(s) you want to use.  To use multiple betas, use a comma separated list like &#x60;beta1,beta2&#x60; or specify the header multiple times for each beta.</param>
        /// <param name="anthropicVersion">The version of the Anthropic API you want to use.  Read more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).</param>
        /// <param name="xApiKey">Your unique API key for authentication.   This key is required in the header of all API requests, to authenticate your account and access Anthropic&#39;s services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.</param>
        /// <response code="200">Successful Response</response>
        /// <response code="4400">Error response.  See our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details.</response>
        [HttpGet]
        [Route("/v1/messages/batches/{message_batch_id}/results/beta=true")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(System.IO.Stream))]
        [ProducesResponseType(statusCode: 4400, type: typeof(BetaErrorResponse))]
        public virtual IActionResult BetaMessageBatchesResultsBeta([FromRoute (Name = "message_batch_id")][Required]string messageBatchId, [FromHeader (Name = "anthropic-beta")]string? anthropicBeta, [FromHeader (Name = "anthropic-version")]string? anthropicVersion, [FromHeader (Name = "x-api-key")]string? xApiKey)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            //TODO: Uncomment the next line to return response 4400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(4400, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"type\" : \"error\",\r\n  \"error\" : {\r\n    \"type\" : \"invalid_request_error\",\r\n    \"message\" : \"Invalid request\"\r\n  }\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<System.IO.Stream>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieve a Message Batch
        /// </summary>
        /// <remarks>This endpoint is idempotent and can be used to poll for Message Batch completion. To access the results of a Message Batch, make a request to the &#x60;results_url&#x60; field in the response.</remarks>
        /// <param name="messageBatchId">ID of the Message Batch.</param>
        /// <param name="anthropicBeta">Optional header to specify the beta version(s) you want to use.  To use multiple betas, use a comma separated list like &#x60;beta1,beta2&#x60; or specify the header multiple times for each beta.</param>
        /// <param name="anthropicVersion">The version of the Anthropic API you want to use.  Read more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).</param>
        /// <param name="xApiKey">Your unique API key for authentication.   This key is required in the header of all API requests, to authenticate your account and access Anthropic&#39;s services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.</param>
        /// <response code="200">Successful Response</response>
        /// <response code="4400">Error response.  See our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details.</response>
        [HttpGet]
        [Route("/v1/messages/batches/{message_batch_id}")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(BetaMessageBatch))]
        [ProducesResponseType(statusCode: 4400, type: typeof(BetaErrorResponse))]
        public virtual IActionResult BetaMessageBatchesRetrieve([FromRoute (Name = "message_batch_id")][Required]string messageBatchId, [FromHeader (Name = "anthropic-beta")]string? anthropicBeta, [FromHeader (Name = "anthropic-version")]string? anthropicVersion, [FromHeader (Name = "x-api-key")]string? xApiKey)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            //TODO: Uncomment the next line to return response 4400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(4400, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"cancel_initiated_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"request_counts\" : \"\",\r\n  \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"archived_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"processing_status\" : \"in_progress\",\r\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"id\" : \"id\",\r\n  \"results_url\" : \"results_url\",\r\n  \"type\" : \"message_batch\",\r\n  \"ended_at\" : \"2000-01-23T04:56:07.000+00:00\"\r\n}";
            exampleJson = "{\r\n  \"type\" : \"error\",\r\n  \"error\" : {\r\n    \"type\" : \"invalid_request_error\",\r\n    \"message\" : \"Invalid request\"\r\n  }\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<BetaMessageBatch>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieve a Message Batch
        /// </summary>
        /// <remarks>This endpoint is idempotent and can be used to poll for Message Batch completion. To access the results of a Message Batch, make a request to the &#x60;results_url&#x60; field in the response.</remarks>
        /// <param name="messageBatchId">ID of the Message Batch.</param>
        /// <param name="anthropicBeta">Optional header to specify the beta version(s) you want to use.  To use multiple betas, use a comma separated list like &#x60;beta1,beta2&#x60; or specify the header multiple times for each beta.</param>
        /// <param name="anthropicVersion">The version of the Anthropic API you want to use.  Read more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).</param>
        /// <param name="xApiKey">Your unique API key for authentication.   This key is required in the header of all API requests, to authenticate your account and access Anthropic&#39;s services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.</param>
        /// <response code="200">Successful Response</response>
        /// <response code="4400">Error response.  See our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details.</response>
        [HttpGet]
        [Route("/v1/messages/batches/{message_batch_id}/beta=true")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(BetaMessageBatch))]
        [ProducesResponseType(statusCode: 4400, type: typeof(BetaErrorResponse))]
        public virtual IActionResult BetaMessageBatchesRetrieveBeta([FromRoute (Name = "message_batch_id")][Required]string messageBatchId, [FromHeader (Name = "anthropic-beta")]string? anthropicBeta, [FromHeader (Name = "anthropic-version")]string? anthropicVersion, [FromHeader (Name = "x-api-key")]string? xApiKey)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            //TODO: Uncomment the next line to return response 4400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(4400, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"cancel_initiated_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"request_counts\" : \"\",\r\n  \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"archived_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"processing_status\" : \"in_progress\",\r\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"id\" : \"id\",\r\n  \"results_url\" : \"results_url\",\r\n  \"type\" : \"message_batch\",\r\n  \"ended_at\" : \"2000-01-23T04:56:07.000+00:00\"\r\n}";
            exampleJson = "{\r\n  \"type\" : \"error\",\r\n  \"error\" : {\r\n    \"type\" : \"invalid_request_error\",\r\n    \"message\" : \"Invalid request\"\r\n  }\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<BetaMessageBatch>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
