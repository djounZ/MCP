/*
 * Anthropic API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using System.Text.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class MessagesApiController : ControllerBase
    { 
        /// <summary>
        /// Count tokens in a Message
        /// </summary>
        /// <remarks>Count the number of tokens in a Message.  The Token Count API can be used to count the number of tokens in a Message, including tools, images, and documents, without creating it.</remarks>
        /// <param name="betaCountMessageTokensParams"></param>
        /// <param name="anthropicBeta">Optional header to specify the beta version(s) you want to use.  To use multiple betas, use a comma separated list like &#x60;beta1,beta2&#x60; or specify the header multiple times for each beta.</param>
        /// <param name="anthropicVersion">The version of the Anthropic API you want to use.  Read more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).</param>
        /// <response code="200">Successful Response</response>
        /// <response code="400">Error response.  See our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details.</response>
        [HttpPost]
        [Route("/v1/messages/count_tokens")]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(BetaCountMessageTokensResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(BetaErrorResponse))]
        public virtual IActionResult BetaMessagesCountTokensPost([FromBody]BetaCountMessageTokensParams betaCountMessageTokensParams, [FromHeader (Name = "anthropic-beta")]string? anthropicBeta, [FromHeader (Name = "anthropic-version")]string? anthropicVersion)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"input_tokens\" : 0\r\n}";
            exampleJson = "{\r\n  \"type\" : \"error\",\r\n  \"error\" : {\r\n    \"type\" : \"invalid_request_error\",\r\n    \"message\" : \"Invalid request\"\r\n  }\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<BetaCountMessageTokensResponse>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Count tokens in a Message
        /// </summary>
        /// <remarks>Count the number of tokens in a Message.  The Token Count API can be used to count the number of tokens in a Message, including tools, images, and documents, without creating it.</remarks>
        /// <param name="betaCountMessageTokensParams"></param>
        /// <param name="anthropicBeta">Optional header to specify the beta version(s) you want to use.  To use multiple betas, use a comma separated list like &#x60;beta1,beta2&#x60; or specify the header multiple times for each beta.</param>
        /// <param name="anthropicVersion">The version of the Anthropic API you want to use.  Read more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).</param>
        /// <response code="200">Successful Response</response>
        /// <response code="400">Error response.  See our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details.</response>
        [HttpPost]
        [Route("/v1/messages/count_tokens/beta=true")]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(BetaCountMessageTokensResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(BetaErrorResponse))]
        public virtual IActionResult BetaMessagesCountTokensPostBeta([FromBody]BetaCountMessageTokensParams betaCountMessageTokensParams, [FromHeader (Name = "anthropic-beta")]string? anthropicBeta, [FromHeader (Name = "anthropic-version")]string? anthropicVersion)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"input_tokens\" : 0\r\n}";
            exampleJson = "{\r\n  \"type\" : \"error\",\r\n  \"error\" : {\r\n    \"type\" : \"invalid_request_error\",\r\n    \"message\" : \"Invalid request\"\r\n  }\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<BetaCountMessageTokensResponse>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create a Message
        /// </summary>
        /// <remarks>Send a structured list of input messages with text and/or image content, and the model will generate the next message in the conversation.  The Messages API can be used for either single queries or stateless multi-turn conversations.</remarks>
        /// <param name="betaCreateMessageParams"></param>
        /// <param name="anthropicBeta">Optional header to specify the beta version(s) you want to use.  To use multiple betas, use a comma separated list like &#x60;beta1,beta2&#x60; or specify the header multiple times for each beta.</param>
        /// <param name="anthropicVersion">The version of the Anthropic API you want to use.  Read more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).</param>
        /// <response code="200">Message object.</response>
        /// <response code="400">Error response.  See our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details.</response>
        [HttpPost]
        [Route("/v1/messages/beta=true")]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(BetaMessage))]
        [ProducesResponseType(statusCode: 400, type: typeof(BetaErrorResponse))]
        public virtual IActionResult BetaMessagesPostBeta([FromBody]BetaCreateMessageParams betaCreateMessageParams, [FromHeader (Name = "anthropic-beta")]string? anthropicBeta, [FromHeader (Name = "anthropic-version")]string? anthropicVersion)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"role\" : \"assistant\",\r\n  \"stop_sequence\" : \"stop_sequence\",\r\n  \"usage\" : \"\",\r\n  \"stop_reason\" : \"end_turn\",\r\n  \"model\" : \"Model\",\r\n  \"id\" : \"id\",\r\n  \"type\" : \"message\",\r\n  \"content\" : [ {\r\n    \"text\" : \"text\",\r\n    \"type\" : \"text\"\r\n  }, {\r\n    \"text\" : \"text\",\r\n    \"type\" : \"text\"\r\n  } ]\r\n}";
            exampleJson = "{\r\n  \"type\" : \"error\",\r\n  \"error\" : {\r\n    \"type\" : \"invalid_request_error\",\r\n    \"message\" : \"Invalid request\"\r\n  }\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<BetaMessage>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create a Message
        /// </summary>
        /// <remarks>Send a structured list of input messages with text and/or image content, and the model will generate the next message in the conversation.  The Messages API can be used for either single queries or stateless multi-turn conversations.</remarks>
        /// <param name="createMessageParams"></param>
        /// <param name="anthropicVersion">The version of the Anthropic API you want to use.  Read more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).</param>
        /// <response code="200">Message object.</response>
        /// <response code="400">Error response.  See our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details.</response>
        [HttpPost]
        [Route("/v1/messages")]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Message))]
        [ProducesResponseType(statusCode: 400, type: typeof(ErrorResponse))]
        public virtual IActionResult MessagesPost([FromBody]CreateMessageParams createMessageParams, [FromHeader (Name = "anthropic-version")]string? anthropicVersion)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"role\" : \"assistant\",\r\n  \"stop_sequence\" : \"stop_sequence\",\r\n  \"usage\" : \"\",\r\n  \"stop_reason\" : \"end_turn\",\r\n  \"model\" : \"Model\",\r\n  \"id\" : \"id\",\r\n  \"type\" : \"message\",\r\n  \"content\" : [ {\r\n    \"text\" : \"text\",\r\n    \"type\" : \"text\"\r\n  }, {\r\n    \"text\" : \"text\",\r\n    \"type\" : \"text\"\r\n  } ]\r\n}";
            exampleJson = "{\r\n  \"type\" : \"error\",\r\n  \"error\" : {\r\n    \"type\" : \"invalid_request_error\",\r\n    \"message\" : \"Invalid request\"\r\n  }\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<Message>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create a Message
        /// </summary>
        /// <remarks>Send a structured list of input messages with text and/or image content, and the model will generate the next message in the conversation.  The Messages API can be used for either single queries or stateless multi-turn conversations.</remarks>
        /// <param name="promptCachingBetaCreateMessageParams"></param>
        /// <param name="anthropicBeta">Optional header to specify the beta version(s) you want to use.  To use multiple betas, use a comma separated list like &#x60;beta1,beta2&#x60; or specify the header multiple times for each beta.</param>
        /// <param name="anthropicVersion">The version of the Anthropic API you want to use.  Read more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).</param>
        /// <response code="200">Message object.</response>
        /// <response code="400">Error response.  See our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details.</response>
        [HttpPost]
        [Route("/v1/messages/beta=prompt_caching")]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(PromptCachingBetaMessage))]
        [ProducesResponseType(statusCode: 400, type: typeof(ErrorResponse))]
        public virtual IActionResult PromptCachingBetaMessagesPost([FromBody]PromptCachingBetaCreateMessageParams promptCachingBetaCreateMessageParams, [FromHeader (Name = "anthropic-beta")]string? anthropicBeta, [FromHeader (Name = "anthropic-version")]string? anthropicVersion)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"role\" : \"assistant\",\r\n  \"stop_sequence\" : \"stop_sequence\",\r\n  \"usage\" : \"\",\r\n  \"stop_reason\" : \"end_turn\",\r\n  \"model\" : \"Model\",\r\n  \"id\" : \"id\",\r\n  \"type\" : \"message\",\r\n  \"content\" : [ {\r\n    \"text\" : \"text\",\r\n    \"type\" : \"text\"\r\n  }, {\r\n    \"text\" : \"text\",\r\n    \"type\" : \"text\"\r\n  } ]\r\n}";
            exampleJson = "{\r\n  \"type\" : \"error\",\r\n  \"error\" : {\r\n    \"type\" : \"invalid_request_error\",\r\n    \"message\" : \"Invalid request\"\r\n  }\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<PromptCachingBetaMessage>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
