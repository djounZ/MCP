/*
 * Mistral AI API
 *
 * Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using System.Text.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class BetaConversationsApiController : ControllerBase
    { 
        /// <summary>
        /// Append new entries to an existing conversation.
        /// </summary>
        /// <remarks>Run completion on the history of the conversation and the user entries. Return the new created entries.</remarks>
        /// <param name="conversationId">ID of the conversation to which we append entries.</param>
        /// <param name="conversationAppendRequest"></param>
        /// <response code="200">Successful Response</response>
        /// <response code="422">Validation Error</response>
        [HttpPost]
        [Route("/v1/conversations/{conversation_id}")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ConversationResponse))]
        [ProducesResponseType(statusCode: 422, type: typeof(HTTPValidationError))]
        public virtual IActionResult AgentsApiV1ConversationsAppend([FromRoute (Name = "conversation_id")][Required]string conversationId, [FromBody]ConversationAppendRequest conversationAppendRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"outputs\" : [ {\r\n    \"completed_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"role\" : \"assistant\",\r\n    \"agent_id\" : \"agent_id\",\r\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"model\" : \"model\",\r\n    \"id\" : \"id\",\r\n    \"type\" : \"message.output\",\r\n    \"content\" : \"Content_1\",\r\n    \"object\" : \"entry\"\r\n  }, {\r\n    \"completed_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"role\" : \"assistant\",\r\n    \"agent_id\" : \"agent_id\",\r\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"model\" : \"model\",\r\n    \"id\" : \"id\",\r\n    \"type\" : \"message.output\",\r\n    \"content\" : \"Content_1\",\r\n    \"object\" : \"entry\"\r\n  } ],\r\n  \"conversation_id\" : \"conversation_id\",\r\n  \"usage\" : {\r\n    \"completion_tokens\" : 6,\r\n    \"connectors\" : {\r\n      \"key\" : 5\r\n    },\r\n    \"prompt_tokens\" : 0,\r\n    \"total_tokens\" : 1,\r\n    \"connector_tokens\" : 5\r\n  },\r\n  \"object\" : \"conversation.response\"\r\n}";
            exampleJson = "{\r\n  \"detail\" : [ {\r\n    \"msg\" : \"msg\",\r\n    \"loc\" : [ \"ValidationError_loc_inner\", \"ValidationError_loc_inner\" ],\r\n    \"type\" : \"type\"\r\n  }, {\r\n    \"msg\" : \"msg\",\r\n    \"loc\" : [ \"ValidationError_loc_inner\", \"ValidationError_loc_inner\" ],\r\n    \"type\" : \"type\"\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<ConversationResponse>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Append new entries to an existing conversation.
        /// </summary>
        /// <remarks>Run completion on the history of the conversation and the user entries. Return the new created entries.</remarks>
        /// <param name="conversationId">ID of the conversation to which we append entries.</param>
        /// <param name="conversationAppendStreamRequest"></param>
        /// <response code="200">Successful Response</response>
        /// <response code="422">Validation Error</response>
        [HttpPost]
        [Route("/v1/conversations/{conversation_id}#stream")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ConversationEvents))]
        [ProducesResponseType(statusCode: 422, type: typeof(HTTPValidationError))]
        public virtual IActionResult AgentsApiV1ConversationsAppendStream([FromRoute (Name = "conversation_id")][Required]string conversationId, [FromBody]ConversationAppendStreamRequest conversationAppendStreamRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default);
            string exampleJson = null;
            exampleJson = "Custom MIME type example not yet supported: text/event-stream";
            exampleJson = "{\r\n  \"detail\" : [ {\r\n    \"msg\" : \"msg\",\r\n    \"loc\" : [ \"ValidationError_loc_inner\", \"ValidationError_loc_inner\" ],\r\n    \"type\" : \"type\"\r\n  }, {\r\n    \"msg\" : \"msg\",\r\n    \"loc\" : [ \"ValidationError_loc_inner\", \"ValidationError_loc_inner\" ],\r\n    \"type\" : \"type\"\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<ConversationEvents>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieve a conversation information.
        /// </summary>
        /// <remarks>Given a conversation_id retrieve a conversation entity with its attributes.</remarks>
        /// <param name="conversationId">ID of the conversation from which we are fetching metadata.</param>
        /// <response code="200">Successful Response</response>
        /// <response code="422">Validation Error</response>
        [HttpGet]
        [Route("/v1/conversations/{conversation_id}")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ResponseV1ConversationsGet))]
        [ProducesResponseType(statusCode: 422, type: typeof(HTTPValidationError))]
        public virtual IActionResult AgentsApiV1ConversationsGet([FromRoute (Name = "conversation_id")][Required]string conversationId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"instructions\" : \"instructions\",\r\n  \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"name\" : \"name\",\r\n  \"description\" : \"description\",\r\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"completion_args\" : {\r\n    \"top_p\" : 0.5962133916683182,\r\n    \"random_seed\" : 0,\r\n    \"frequency_penalty\" : 0.4109824732281613,\r\n    \"response_format\" : {\r\n      \"json_schema\" : {\r\n        \"schema\" : {\r\n          \"key\" : \"\"\r\n        },\r\n        \"name\" : \"name\",\r\n        \"description\" : \"Description\",\r\n        \"strict\" : false\r\n      },\r\n      \"type\" : \"text\"\r\n    },\r\n    \"stop\" : \"CompletionArgsStop\",\r\n    \"max_tokens\" : 0,\r\n    \"presence_penalty\" : -1.6796687238155954,\r\n    \"temperature\" : 0.14658129805029452,\r\n    \"prediction\" : {\r\n      \"type\" : \"content\",\r\n      \"content\" : \"\"\r\n    },\r\n    \"tool_choice\" : \"auto\"\r\n  },\r\n  \"model\" : \"model\",\r\n  \"id\" : \"id\",\r\n  \"tools\" : [ {\r\n    \"function\" : {\r\n      \"name\" : \"name\",\r\n      \"description\" : \"\",\r\n      \"strict\" : false,\r\n      \"parameters\" : {\r\n        \"key\" : \"\"\r\n      }\r\n    },\r\n    \"type\" : \"function\"\r\n  }, {\r\n    \"function\" : {\r\n      \"name\" : \"name\",\r\n      \"description\" : \"\",\r\n      \"strict\" : false,\r\n      \"parameters\" : {\r\n        \"key\" : \"\"\r\n      }\r\n    },\r\n    \"type\" : \"function\"\r\n  } ],\r\n  \"object\" : \"conversation\"\r\n}";
            exampleJson = "{\r\n  \"detail\" : [ {\r\n    \"msg\" : \"msg\",\r\n    \"loc\" : [ \"ValidationError_loc_inner\", \"ValidationError_loc_inner\" ],\r\n    \"type\" : \"type\"\r\n  }, {\r\n    \"msg\" : \"msg\",\r\n    \"loc\" : [ \"ValidationError_loc_inner\", \"ValidationError_loc_inner\" ],\r\n    \"type\" : \"type\"\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<ResponseV1ConversationsGet>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieve all entries in a conversation.
        /// </summary>
        /// <remarks>Given a conversation_id retrieve all the entries belonging to that conversation. The entries are sorted in the order they were appended, those can be messages, connectors or function_call.</remarks>
        /// <param name="conversationId">ID of the conversation from which we are fetching entries.</param>
        /// <response code="200">Successful Response</response>
        /// <response code="422">Validation Error</response>
        [HttpGet]
        [Route("/v1/conversations/{conversation_id}/history")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ConversationHistory))]
        [ProducesResponseType(statusCode: 422, type: typeof(HTTPValidationError))]
        public virtual IActionResult AgentsApiV1ConversationsHistory([FromRoute (Name = "conversation_id")][Required]string conversationId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"entries\" : [ {\r\n    \"completed_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"role\" : \"assistant\",\r\n    \"prefix\" : false,\r\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"id\" : \"id\",\r\n    \"type\" : \"message.input\",\r\n    \"content\" : \"Content\",\r\n    \"object\" : \"entry\"\r\n  }, {\r\n    \"completed_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"role\" : \"assistant\",\r\n    \"prefix\" : false,\r\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"id\" : \"id\",\r\n    \"type\" : \"message.input\",\r\n    \"content\" : \"Content\",\r\n    \"object\" : \"entry\"\r\n  } ],\r\n  \"conversation_id\" : \"conversation_id\",\r\n  \"object\" : \"conversation.history\"\r\n}";
            exampleJson = "{\r\n  \"detail\" : [ {\r\n    \"msg\" : \"msg\",\r\n    \"loc\" : [ \"ValidationError_loc_inner\", \"ValidationError_loc_inner\" ],\r\n    \"type\" : \"type\"\r\n  }, {\r\n    \"msg\" : \"msg\",\r\n    \"loc\" : [ \"ValidationError_loc_inner\", \"ValidationError_loc_inner\" ],\r\n    \"type\" : \"type\"\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<ConversationHistory>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List all created conversations.
        /// </summary>
        /// <remarks>Retrieve a list of conversation entities sorted by creation time.</remarks>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <response code="200">Successful Response</response>
        /// <response code="422">Validation Error</response>
        [HttpGet]
        [Route("/v1/conversations")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<AgentsApiV1ConversationsList200ResponseInner>))]
        [ProducesResponseType(statusCode: 422, type: typeof(HTTPValidationError))]
        public virtual IActionResult AgentsApiV1ConversationsList([FromQuery (Name = "page")]int? page, [FromQuery (Name = "page_size")]int? pageSize)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default);
            string exampleJson = null;
            exampleJson = "[ {\r\n  \"instructions\" : \"instructions\",\r\n  \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"name\" : \"name\",\r\n  \"description\" : \"description\",\r\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"completion_args\" : {\r\n    \"top_p\" : 0.5962133916683182,\r\n    \"random_seed\" : 0,\r\n    \"frequency_penalty\" : 0.4109824732281613,\r\n    \"response_format\" : {\r\n      \"json_schema\" : {\r\n        \"schema\" : {\r\n          \"key\" : \"\"\r\n        },\r\n        \"name\" : \"name\",\r\n        \"description\" : \"Description\",\r\n        \"strict\" : false\r\n      },\r\n      \"type\" : \"text\"\r\n    },\r\n    \"stop\" : \"CompletionArgsStop\",\r\n    \"max_tokens\" : 0,\r\n    \"presence_penalty\" : -1.6796687238155954,\r\n    \"temperature\" : 0.14658129805029452,\r\n    \"prediction\" : {\r\n      \"type\" : \"content\",\r\n      \"content\" : \"\"\r\n    },\r\n    \"tool_choice\" : \"auto\"\r\n  },\r\n  \"model\" : \"model\",\r\n  \"id\" : \"id\",\r\n  \"tools\" : [ {\r\n    \"function\" : {\r\n      \"name\" : \"name\",\r\n      \"description\" : \"\",\r\n      \"strict\" : false,\r\n      \"parameters\" : {\r\n        \"key\" : \"\"\r\n      }\r\n    },\r\n    \"type\" : \"function\"\r\n  }, {\r\n    \"function\" : {\r\n      \"name\" : \"name\",\r\n      \"description\" : \"\",\r\n      \"strict\" : false,\r\n      \"parameters\" : {\r\n        \"key\" : \"\"\r\n      }\r\n    },\r\n    \"type\" : \"function\"\r\n  } ],\r\n  \"object\" : \"conversation\"\r\n}, {\r\n  \"instructions\" : \"instructions\",\r\n  \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"name\" : \"name\",\r\n  \"description\" : \"description\",\r\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"completion_args\" : {\r\n    \"top_p\" : 0.5962133916683182,\r\n    \"random_seed\" : 0,\r\n    \"frequency_penalty\" : 0.4109824732281613,\r\n    \"response_format\" : {\r\n      \"json_schema\" : {\r\n        \"schema\" : {\r\n          \"key\" : \"\"\r\n        },\r\n        \"name\" : \"name\",\r\n        \"description\" : \"Description\",\r\n        \"strict\" : false\r\n      },\r\n      \"type\" : \"text\"\r\n    },\r\n    \"stop\" : \"CompletionArgsStop\",\r\n    \"max_tokens\" : 0,\r\n    \"presence_penalty\" : -1.6796687238155954,\r\n    \"temperature\" : 0.14658129805029452,\r\n    \"prediction\" : {\r\n      \"type\" : \"content\",\r\n      \"content\" : \"\"\r\n    },\r\n    \"tool_choice\" : \"auto\"\r\n  },\r\n  \"model\" : \"model\",\r\n  \"id\" : \"id\",\r\n  \"tools\" : [ {\r\n    \"function\" : {\r\n      \"name\" : \"name\",\r\n      \"description\" : \"\",\r\n      \"strict\" : false,\r\n      \"parameters\" : {\r\n        \"key\" : \"\"\r\n      }\r\n    },\r\n    \"type\" : \"function\"\r\n  }, {\r\n    \"function\" : {\r\n      \"name\" : \"name\",\r\n      \"description\" : \"\",\r\n      \"strict\" : false,\r\n      \"parameters\" : {\r\n        \"key\" : \"\"\r\n      }\r\n    },\r\n    \"type\" : \"function\"\r\n  } ],\r\n  \"object\" : \"conversation\"\r\n} ]";
            exampleJson = "{\r\n  \"detail\" : [ {\r\n    \"msg\" : \"msg\",\r\n    \"loc\" : [ \"ValidationError_loc_inner\", \"ValidationError_loc_inner\" ],\r\n    \"type\" : \"type\"\r\n  }, {\r\n    \"msg\" : \"msg\",\r\n    \"loc\" : [ \"ValidationError_loc_inner\", \"ValidationError_loc_inner\" ],\r\n    \"type\" : \"type\"\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<List<AgentsApiV1ConversationsList200ResponseInner>>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieve all messages in a conversation.
        /// </summary>
        /// <remarks>Given a conversation_id retrieve all the messages belonging to that conversation. This is similar to retrieving all entries except we filter the messages only.</remarks>
        /// <param name="conversationId">ID of the conversation from which we are fetching messages.</param>
        /// <response code="200">Successful Response</response>
        /// <response code="422">Validation Error</response>
        [HttpGet]
        [Route("/v1/conversations/{conversation_id}/messages")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ConversationMessages))]
        [ProducesResponseType(statusCode: 422, type: typeof(HTTPValidationError))]
        public virtual IActionResult AgentsApiV1ConversationsMessages([FromRoute (Name = "conversation_id")][Required]string conversationId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"conversation_id\" : \"conversation_id\",\r\n  \"messages\" : [ {\r\n    \"completed_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"role\" : \"assistant\",\r\n    \"prefix\" : false,\r\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"id\" : \"id\",\r\n    \"type\" : \"message.input\",\r\n    \"content\" : \"Content\",\r\n    \"object\" : \"entry\"\r\n  }, {\r\n    \"completed_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"role\" : \"assistant\",\r\n    \"prefix\" : false,\r\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"id\" : \"id\",\r\n    \"type\" : \"message.input\",\r\n    \"content\" : \"Content\",\r\n    \"object\" : \"entry\"\r\n  } ],\r\n  \"object\" : \"conversation.messages\"\r\n}";
            exampleJson = "{\r\n  \"detail\" : [ {\r\n    \"msg\" : \"msg\",\r\n    \"loc\" : [ \"ValidationError_loc_inner\", \"ValidationError_loc_inner\" ],\r\n    \"type\" : \"type\"\r\n  }, {\r\n    \"msg\" : \"msg\",\r\n    \"loc\" : [ \"ValidationError_loc_inner\", \"ValidationError_loc_inner\" ],\r\n    \"type\" : \"type\"\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<ConversationMessages>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Restart a conversation starting from a given entry.
        /// </summary>
        /// <remarks>Given a conversation_id and an id, recreate a conversation from this point and run completion. A new conversation is returned with the new entries returned.</remarks>
        /// <param name="conversationId">ID of the original conversation which is being restarted.</param>
        /// <param name="conversationRestartRequest"></param>
        /// <response code="200">Successful Response</response>
        /// <response code="422">Validation Error</response>
        [HttpPost]
        [Route("/v1/conversations/{conversation_id}/restart")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ConversationResponse))]
        [ProducesResponseType(statusCode: 422, type: typeof(HTTPValidationError))]
        public virtual IActionResult AgentsApiV1ConversationsRestart([FromRoute (Name = "conversation_id")][Required]string conversationId, [FromBody]ConversationRestartRequest conversationRestartRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"outputs\" : [ {\r\n    \"completed_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"role\" : \"assistant\",\r\n    \"agent_id\" : \"agent_id\",\r\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"model\" : \"model\",\r\n    \"id\" : \"id\",\r\n    \"type\" : \"message.output\",\r\n    \"content\" : \"Content_1\",\r\n    \"object\" : \"entry\"\r\n  }, {\r\n    \"completed_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"role\" : \"assistant\",\r\n    \"agent_id\" : \"agent_id\",\r\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"model\" : \"model\",\r\n    \"id\" : \"id\",\r\n    \"type\" : \"message.output\",\r\n    \"content\" : \"Content_1\",\r\n    \"object\" : \"entry\"\r\n  } ],\r\n  \"conversation_id\" : \"conversation_id\",\r\n  \"usage\" : {\r\n    \"completion_tokens\" : 6,\r\n    \"connectors\" : {\r\n      \"key\" : 5\r\n    },\r\n    \"prompt_tokens\" : 0,\r\n    \"total_tokens\" : 1,\r\n    \"connector_tokens\" : 5\r\n  },\r\n  \"object\" : \"conversation.response\"\r\n}";
            exampleJson = "{\r\n  \"detail\" : [ {\r\n    \"msg\" : \"msg\",\r\n    \"loc\" : [ \"ValidationError_loc_inner\", \"ValidationError_loc_inner\" ],\r\n    \"type\" : \"type\"\r\n  }, {\r\n    \"msg\" : \"msg\",\r\n    \"loc\" : [ \"ValidationError_loc_inner\", \"ValidationError_loc_inner\" ],\r\n    \"type\" : \"type\"\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<ConversationResponse>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Restart a conversation starting from a given entry.
        /// </summary>
        /// <remarks>Given a conversation_id and an id, recreate a conversation from this point and run completion. A new conversation is returned with the new entries returned.</remarks>
        /// <param name="conversationId">ID of the original conversation which is being restarted.</param>
        /// <param name="conversationRestartStreamRequest"></param>
        /// <response code="200">Successful Response</response>
        /// <response code="422">Validation Error</response>
        [HttpPost]
        [Route("/v1/conversations/{conversation_id}/restart#stream")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ConversationEvents))]
        [ProducesResponseType(statusCode: 422, type: typeof(HTTPValidationError))]
        public virtual IActionResult AgentsApiV1ConversationsRestartStream([FromRoute (Name = "conversation_id")][Required]string conversationId, [FromBody]ConversationRestartStreamRequest conversationRestartStreamRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default);
            string exampleJson = null;
            exampleJson = "Custom MIME type example not yet supported: text/event-stream";
            exampleJson = "{\r\n  \"detail\" : [ {\r\n    \"msg\" : \"msg\",\r\n    \"loc\" : [ \"ValidationError_loc_inner\", \"ValidationError_loc_inner\" ],\r\n    \"type\" : \"type\"\r\n  }, {\r\n    \"msg\" : \"msg\",\r\n    \"loc\" : [ \"ValidationError_loc_inner\", \"ValidationError_loc_inner\" ],\r\n    \"type\" : \"type\"\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<ConversationEvents>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create a conversation and append entries to it.
        /// </summary>
        /// <remarks>Create a new conversation, using a base model or an agent and append entries. Completion and tool executions are run and the response is appended to the conversation.Use the returned conversation_id to continue the conversation.</remarks>
        /// <param name="conversationRequest"></param>
        /// <response code="200">Successful Response</response>
        /// <response code="422">Validation Error</response>
        [HttpPost]
        [Route("/v1/conversations")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ConversationResponse))]
        [ProducesResponseType(statusCode: 422, type: typeof(HTTPValidationError))]
        public virtual IActionResult AgentsApiV1ConversationsStart([FromBody]ConversationRequest conversationRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"outputs\" : [ {\r\n    \"completed_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"role\" : \"assistant\",\r\n    \"agent_id\" : \"agent_id\",\r\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"model\" : \"model\",\r\n    \"id\" : \"id\",\r\n    \"type\" : \"message.output\",\r\n    \"content\" : \"Content_1\",\r\n    \"object\" : \"entry\"\r\n  }, {\r\n    \"completed_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"role\" : \"assistant\",\r\n    \"agent_id\" : \"agent_id\",\r\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"model\" : \"model\",\r\n    \"id\" : \"id\",\r\n    \"type\" : \"message.output\",\r\n    \"content\" : \"Content_1\",\r\n    \"object\" : \"entry\"\r\n  } ],\r\n  \"conversation_id\" : \"conversation_id\",\r\n  \"usage\" : {\r\n    \"completion_tokens\" : 6,\r\n    \"connectors\" : {\r\n      \"key\" : 5\r\n    },\r\n    \"prompt_tokens\" : 0,\r\n    \"total_tokens\" : 1,\r\n    \"connector_tokens\" : 5\r\n  },\r\n  \"object\" : \"conversation.response\"\r\n}";
            exampleJson = "{\r\n  \"detail\" : [ {\r\n    \"msg\" : \"msg\",\r\n    \"loc\" : [ \"ValidationError_loc_inner\", \"ValidationError_loc_inner\" ],\r\n    \"type\" : \"type\"\r\n  }, {\r\n    \"msg\" : \"msg\",\r\n    \"loc\" : [ \"ValidationError_loc_inner\", \"ValidationError_loc_inner\" ],\r\n    \"type\" : \"type\"\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<ConversationResponse>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create a conversation and append entries to it.
        /// </summary>
        /// <remarks>Create a new conversation, using a base model or an agent and append entries. Completion and tool executions are run and the response is appended to the conversation.Use the returned conversation_id to continue the conversation.</remarks>
        /// <param name="conversationStreamRequest"></param>
        /// <response code="200">Successful Response</response>
        /// <response code="422">Validation Error</response>
        [HttpPost]
        [Route("/v1/conversations#stream")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ConversationEvents))]
        [ProducesResponseType(statusCode: 422, type: typeof(HTTPValidationError))]
        public virtual IActionResult AgentsApiV1ConversationsStartStream([FromBody]ConversationStreamRequest conversationStreamRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default);
            string exampleJson = null;
            exampleJson = "Custom MIME type example not yet supported: text/event-stream";
            exampleJson = "{\r\n  \"detail\" : [ {\r\n    \"msg\" : \"msg\",\r\n    \"loc\" : [ \"ValidationError_loc_inner\", \"ValidationError_loc_inner\" ],\r\n    \"type\" : \"type\"\r\n  }, {\r\n    \"msg\" : \"msg\",\r\n    \"loc\" : [ \"ValidationError_loc_inner\", \"ValidationError_loc_inner\" ],\r\n    \"type\" : \"type\"\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<ConversationEvents>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
