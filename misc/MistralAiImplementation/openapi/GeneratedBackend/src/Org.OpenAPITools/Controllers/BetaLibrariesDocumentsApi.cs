/*
 * Mistral AI API
 *
 * Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using System.Text.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class BetaLibrariesDocumentsApiController : ControllerBase
    { 
        /// <summary>
        /// Delete a document.
        /// </summary>
        /// <remarks>Given a library and a document in that library, delete that document. The document will be deleted from the library and the search index.</remarks>
        /// <param name="libraryId"></param>
        /// <param name="documentId"></param>
        /// <response code="204">Successful Response</response>
        /// <response code="422">Validation Error</response>
        [HttpDelete]
        [Route("/v1/libraries/{library_id}/documents/{document_id}")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 422, type: typeof(HTTPValidationError))]
        public virtual IActionResult LibrariesDocumentsDeleteV1([FromRoute (Name = "library_id")][Required]Guid libraryId, [FromRoute (Name = "document_id")][Required]Guid documentId)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Retrieve the signed URL of text extracted from a given document.
        /// </summary>
        /// <remarks>Given a library and a document in that library, retrieve the signed URL of text extracted. For documents that are sent to the OCR this returns the result of the OCR queries.</remarks>
        /// <param name="libraryId"></param>
        /// <param name="documentId"></param>
        /// <response code="200">Successful Response</response>
        /// <response code="422">Validation Error</response>
        [HttpGet]
        [Route("/v1/libraries/{library_id}/documents/{document_id}/extracted-text-signed-url")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(string))]
        [ProducesResponseType(statusCode: 422, type: typeof(HTTPValidationError))]
        public virtual IActionResult LibrariesDocumentsGetExtractedTextSignedUrlV1([FromRoute (Name = "library_id")][Required]Guid libraryId, [FromRoute (Name = "document_id")][Required]Guid documentId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"detail\" : [ {\r\n    \"msg\" : \"msg\",\r\n    \"loc\" : [ \"ValidationError_loc_inner\", \"ValidationError_loc_inner\" ],\r\n    \"type\" : \"type\"\r\n  }, {\r\n    \"msg\" : \"msg\",\r\n    \"loc\" : [ \"ValidationError_loc_inner\", \"ValidationError_loc_inner\" ],\r\n    \"type\" : \"type\"\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<string>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieve the signed URL of a specific document.
        /// </summary>
        /// <remarks>Given a library and a document in that library, retrieve the signed URL of a specific document.The url will expire after 30 minutes and can be accessed by anyone with the link.</remarks>
        /// <param name="libraryId"></param>
        /// <param name="documentId"></param>
        /// <response code="200">Successful Response</response>
        /// <response code="422">Validation Error</response>
        [HttpGet]
        [Route("/v1/libraries/{library_id}/documents/{document_id}/signed-url")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(string))]
        [ProducesResponseType(statusCode: 422, type: typeof(HTTPValidationError))]
        public virtual IActionResult LibrariesDocumentsGetSignedUrlV1([FromRoute (Name = "library_id")][Required]Guid libraryId, [FromRoute (Name = "document_id")][Required]Guid documentId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"detail\" : [ {\r\n    \"msg\" : \"msg\",\r\n    \"loc\" : [ \"ValidationError_loc_inner\", \"ValidationError_loc_inner\" ],\r\n    \"type\" : \"type\"\r\n  }, {\r\n    \"msg\" : \"msg\",\r\n    \"loc\" : [ \"ValidationError_loc_inner\", \"ValidationError_loc_inner\" ],\r\n    \"type\" : \"type\"\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<string>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieve the processing status of a specific document.
        /// </summary>
        /// <remarks>Given a library and a document in that library, retrieve the processing status of that document.</remarks>
        /// <param name="libraryId"></param>
        /// <param name="documentId"></param>
        /// <response code="200">Successful Response</response>
        /// <response code="422">Validation Error</response>
        [HttpGet]
        [Route("/v1/libraries/{library_id}/documents/{document_id}/status")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ProcessingStatusOut))]
        [ProducesResponseType(statusCode: 422, type: typeof(HTTPValidationError))]
        public virtual IActionResult LibrariesDocumentsGetStatusV1([FromRoute (Name = "library_id")][Required]Guid libraryId, [FromRoute (Name = "document_id")][Required]Guid documentId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"processing_status\" : \"processing_status\",\r\n  \"document_id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\"\r\n}";
            exampleJson = "{\r\n  \"detail\" : [ {\r\n    \"msg\" : \"msg\",\r\n    \"loc\" : [ \"ValidationError_loc_inner\", \"ValidationError_loc_inner\" ],\r\n    \"type\" : \"type\"\r\n  }, {\r\n    \"msg\" : \"msg\",\r\n    \"loc\" : [ \"ValidationError_loc_inner\", \"ValidationError_loc_inner\" ],\r\n    \"type\" : \"type\"\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<ProcessingStatusOut>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieve the text content of a specific document.
        /// </summary>
        /// <remarks>Given a library and a document in that library, you can retrieve the text content of that document if it exists. For documents like pdf, docx and pptx the text content results from our processing using Mistral OCR.</remarks>
        /// <param name="libraryId"></param>
        /// <param name="documentId"></param>
        /// <response code="200">Successful Response</response>
        /// <response code="422">Validation Error</response>
        [HttpGet]
        [Route("/v1/libraries/{library_id}/documents/{document_id}/text_content")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(DocumentTextContent))]
        [ProducesResponseType(statusCode: 422, type: typeof(HTTPValidationError))]
        public virtual IActionResult LibrariesDocumentsGetTextContentV1([FromRoute (Name = "library_id")][Required]Guid libraryId, [FromRoute (Name = "document_id")][Required]Guid documentId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"text\" : \"text\"\r\n}";
            exampleJson = "{\r\n  \"detail\" : [ {\r\n    \"msg\" : \"msg\",\r\n    \"loc\" : [ \"ValidationError_loc_inner\", \"ValidationError_loc_inner\" ],\r\n    \"type\" : \"type\"\r\n  }, {\r\n    \"msg\" : \"msg\",\r\n    \"loc\" : [ \"ValidationError_loc_inner\", \"ValidationError_loc_inner\" ],\r\n    \"type\" : \"type\"\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<DocumentTextContent>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieve the metadata of a specific document.
        /// </summary>
        /// <remarks>Given a library and a document in this library, you can retrieve the metadata of that document.</remarks>
        /// <param name="libraryId"></param>
        /// <param name="documentId"></param>
        /// <response code="200">Successful Response</response>
        /// <response code="422">Validation Error</response>
        [HttpGet]
        [Route("/v1/libraries/{library_id}/documents/{document_id}")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(DocumentOut))]
        [ProducesResponseType(statusCode: 422, type: typeof(HTTPValidationError))]
        public virtual IActionResult LibrariesDocumentsGetV1([FromRoute (Name = "library_id")][Required]Guid libraryId, [FromRoute (Name = "document_id")][Required]Guid documentId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"summary\" : \"summary\",\r\n  \"uploaded_by_type\" : \"uploaded_by_type\",\r\n  \"extension\" : \"extension\",\r\n  \"number_of_pages\" : 2,\r\n  \"tokens_processing_total\" : 3,\r\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"library_id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n  \"size\" : 5,\r\n  \"mime_type\" : \"mime_type\",\r\n  \"tokens_processing_summary\" : 9,\r\n  \"last_processed_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"tokens_processing_main_content\" : 7,\r\n  \"name\" : \"name\",\r\n  \"processing_status\" : \"processing_status\",\r\n  \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n  \"hash\" : \"hash\",\r\n  \"uploaded_by_id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\"\r\n}";
            exampleJson = "{\r\n  \"detail\" : [ {\r\n    \"msg\" : \"msg\",\r\n    \"loc\" : [ \"ValidationError_loc_inner\", \"ValidationError_loc_inner\" ],\r\n    \"type\" : \"type\"\r\n  }, {\r\n    \"msg\" : \"msg\",\r\n    \"loc\" : [ \"ValidationError_loc_inner\", \"ValidationError_loc_inner\" ],\r\n    \"type\" : \"type\"\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<DocumentOut>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List document in a given library.
        /// </summary>
        /// <remarks>Given a library, lists the document that have been uploaded to that library.</remarks>
        /// <param name="libraryId"></param>
        /// <param name="search"></param>
        /// <param name="pageSize"></param>
        /// <param name="page"></param>
        /// <param name="sortBy"></param>
        /// <param name="sortOrder"></param>
        /// <response code="200">Successful Response</response>
        /// <response code="422">Validation Error</response>
        [HttpGet]
        [Route("/v1/libraries/{library_id}/documents")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ListDocumentOut))]
        [ProducesResponseType(statusCode: 422, type: typeof(HTTPValidationError))]
        public virtual IActionResult LibrariesDocumentsListV1([FromRoute (Name = "library_id")][Required]Guid libraryId, [FromQuery (Name = "search")]string? search, [FromQuery (Name = "page_size")]int? pageSize, [FromQuery (Name = "page")]int? page, [FromQuery (Name = "sort_by")]string? sortBy, [FromQuery (Name = "sort_order")]string? sortOrder)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"pagination\" : {\r\n    \"total_pages\" : 6,\r\n    \"has_more\" : true,\r\n    \"total_items\" : 0,\r\n    \"current_page\" : 1,\r\n    \"page_size\" : 5\r\n  },\r\n  \"data\" : [ {\r\n    \"summary\" : \"summary\",\r\n    \"uploaded_by_type\" : \"uploaded_by_type\",\r\n    \"extension\" : \"extension\",\r\n    \"number_of_pages\" : 2,\r\n    \"tokens_processing_total\" : 3,\r\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"library_id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n    \"size\" : 5,\r\n    \"mime_type\" : \"mime_type\",\r\n    \"tokens_processing_summary\" : 9,\r\n    \"last_processed_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"tokens_processing_main_content\" : 7,\r\n    \"name\" : \"name\",\r\n    \"processing_status\" : \"processing_status\",\r\n    \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n    \"hash\" : \"hash\",\r\n    \"uploaded_by_id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\"\r\n  }, {\r\n    \"summary\" : \"summary\",\r\n    \"uploaded_by_type\" : \"uploaded_by_type\",\r\n    \"extension\" : \"extension\",\r\n    \"number_of_pages\" : 2,\r\n    \"tokens_processing_total\" : 3,\r\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"library_id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n    \"size\" : 5,\r\n    \"mime_type\" : \"mime_type\",\r\n    \"tokens_processing_summary\" : 9,\r\n    \"last_processed_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"tokens_processing_main_content\" : 7,\r\n    \"name\" : \"name\",\r\n    \"processing_status\" : \"processing_status\",\r\n    \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n    \"hash\" : \"hash\",\r\n    \"uploaded_by_id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\"\r\n  } ]\r\n}";
            exampleJson = "{\r\n  \"detail\" : [ {\r\n    \"msg\" : \"msg\",\r\n    \"loc\" : [ \"ValidationError_loc_inner\", \"ValidationError_loc_inner\" ],\r\n    \"type\" : \"type\"\r\n  }, {\r\n    \"msg\" : \"msg\",\r\n    \"loc\" : [ \"ValidationError_loc_inner\", \"ValidationError_loc_inner\" ],\r\n    \"type\" : \"type\"\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<ListDocumentOut>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Reprocess a document.
        /// </summary>
        /// <remarks>Given a library and a document in that library, reprocess that document, it will be billed again.</remarks>
        /// <param name="libraryId"></param>
        /// <param name="documentId"></param>
        /// <response code="204">Successful Response</response>
        /// <response code="422">Validation Error</response>
        [HttpPost]
        [Route("/v1/libraries/{library_id}/documents/{document_id}/reprocess")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 422, type: typeof(HTTPValidationError))]
        public virtual IActionResult LibrariesDocumentsReprocessV1([FromRoute (Name = "library_id")][Required]Guid libraryId, [FromRoute (Name = "document_id")][Required]Guid documentId)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Update the metadata of a specific document.
        /// </summary>
        /// <remarks>Given a library and a document in that library, update the name of that document.</remarks>
        /// <param name="libraryId"></param>
        /// <param name="documentId"></param>
        /// <param name="documentUpdateIn"></param>
        /// <response code="200">Successful Response</response>
        /// <response code="422">Validation Error</response>
        [HttpPut]
        [Route("/v1/libraries/{library_id}/documents/{document_id}")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(DocumentOut))]
        [ProducesResponseType(statusCode: 422, type: typeof(HTTPValidationError))]
        public virtual IActionResult LibrariesDocumentsUpdateV1([FromRoute (Name = "library_id")][Required]Guid libraryId, [FromRoute (Name = "document_id")][Required]Guid documentId, [FromBody]DocumentUpdateIn documentUpdateIn)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"summary\" : \"summary\",\r\n  \"uploaded_by_type\" : \"uploaded_by_type\",\r\n  \"extension\" : \"extension\",\r\n  \"number_of_pages\" : 2,\r\n  \"tokens_processing_total\" : 3,\r\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"library_id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n  \"size\" : 5,\r\n  \"mime_type\" : \"mime_type\",\r\n  \"tokens_processing_summary\" : 9,\r\n  \"last_processed_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"tokens_processing_main_content\" : 7,\r\n  \"name\" : \"name\",\r\n  \"processing_status\" : \"processing_status\",\r\n  \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n  \"hash\" : \"hash\",\r\n  \"uploaded_by_id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\"\r\n}";
            exampleJson = "{\r\n  \"detail\" : [ {\r\n    \"msg\" : \"msg\",\r\n    \"loc\" : [ \"ValidationError_loc_inner\", \"ValidationError_loc_inner\" ],\r\n    \"type\" : \"type\"\r\n  }, {\r\n    \"msg\" : \"msg\",\r\n    \"loc\" : [ \"ValidationError_loc_inner\", \"ValidationError_loc_inner\" ],\r\n    \"type\" : \"type\"\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<DocumentOut>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Upload a new document.
        /// </summary>
        /// <remarks>Given a library, upload a new document to that library. It is queued for processing, it status will change it has been processed. The processing has to be completed in order be discoverable for the library search</remarks>
        /// <param name="libraryId"></param>
        /// <param name="file">The File object (not file name) to be uploaded.  To upload a file and specify a custom file name you should format your request as such:  &#x60;&#x60;&#x60;bash  file&#x3D;@path/to/your/file.jsonl;filename&#x3D;custom_name.jsonl  &#x60;&#x60;&#x60;  Otherwise, you can just keep the original file name:  &#x60;&#x60;&#x60;bash  file&#x3D;@path/to/your/file.jsonl  &#x60;&#x60;&#x60;</param>
        /// <response code="200">A document with the same hash was found in this library. Returns the existing document.</response>
        /// <response code="201">Upload successful, returns the created document information&#39;s.</response>
        /// <response code="422">Validation Error</response>
        [HttpPost]
        [Route("/v1/libraries/{library_id}/documents")]
        [Authorize]
        [Consumes("multipart/form-data")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(DocumentOut))]
        [ProducesResponseType(statusCode: 201, type: typeof(DocumentOut))]
        [ProducesResponseType(statusCode: 422, type: typeof(HTTPValidationError))]
        public virtual IActionResult LibrariesDocumentsUploadV1([FromRoute (Name = "library_id")][Required]Guid libraryId, [Required()]IFormFile file)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default);
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"summary\" : \"summary\",\r\n  \"uploaded_by_type\" : \"uploaded_by_type\",\r\n  \"extension\" : \"extension\",\r\n  \"number_of_pages\" : 2,\r\n  \"tokens_processing_total\" : 3,\r\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"library_id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n  \"size\" : 5,\r\n  \"mime_type\" : \"mime_type\",\r\n  \"tokens_processing_summary\" : 9,\r\n  \"last_processed_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"tokens_processing_main_content\" : 7,\r\n  \"name\" : \"name\",\r\n  \"processing_status\" : \"processing_status\",\r\n  \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n  \"hash\" : \"hash\",\r\n  \"uploaded_by_id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\"\r\n}";
            exampleJson = "{\r\n  \"summary\" : \"summary\",\r\n  \"uploaded_by_type\" : \"uploaded_by_type\",\r\n  \"extension\" : \"extension\",\r\n  \"number_of_pages\" : 2,\r\n  \"tokens_processing_total\" : 3,\r\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"library_id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n  \"size\" : 5,\r\n  \"mime_type\" : \"mime_type\",\r\n  \"tokens_processing_summary\" : 9,\r\n  \"last_processed_at\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"tokens_processing_main_content\" : 7,\r\n  \"name\" : \"name\",\r\n  \"processing_status\" : \"processing_status\",\r\n  \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n  \"hash\" : \"hash\",\r\n  \"uploaded_by_id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\"\r\n}";
            exampleJson = "{\r\n  \"detail\" : [ {\r\n    \"msg\" : \"msg\",\r\n    \"loc\" : [ \"ValidationError_loc_inner\", \"ValidationError_loc_inner\" ],\r\n    \"type\" : \"type\"\r\n  }, {\r\n    \"msg\" : \"msg\",\r\n    \"loc\" : [ \"ValidationError_loc_inner\", \"ValidationError_loc_inner\" ],\r\n    \"type\" : \"type\"\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<DocumentOut>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
