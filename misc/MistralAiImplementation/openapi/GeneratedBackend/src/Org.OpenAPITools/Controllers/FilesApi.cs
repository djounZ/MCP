/*
 * Mistral AI API
 *
 * Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using System.Text.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class FilesApiController : ControllerBase
    { 
        /// <summary>
        /// Delete File
        /// </summary>
        /// <remarks>Delete a file.</remarks>
        /// <param name="fileId"></param>
        /// <response code="200">OK</response>
        [HttpDelete]
        [Route("/v1/files/{file_id}")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(DeleteFileOut))]
        public virtual IActionResult FilesApiRoutesDeleteFile([FromRoute (Name = "file_id")][Required]Guid fileId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"deleted\" : true,\r\n  \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n  \"object\" : \"object\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<DeleteFileOut>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Download File
        /// </summary>
        /// <remarks>Download a file</remarks>
        /// <param name="fileId"></param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/files/{file_id}/content")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(System.IO.Stream))]
        public virtual IActionResult FilesApiRoutesDownloadFile([FromRoute (Name = "file_id")][Required]Guid fileId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<System.IO.Stream>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Signed Url
        /// </summary>
        /// <param name="fileId"></param>
        /// <param name="expiry">Number of hours before the url becomes invalid. Defaults to 24h</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/files/{file_id}/url")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(FileSignedURL))]
        public virtual IActionResult FilesApiRoutesGetSignedUrl([FromRoute (Name = "file_id")][Required]Guid fileId, [FromQuery (Name = "expiry")]int? expiry)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"url\" : \"url\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<FileSignedURL>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List Files
        /// </summary>
        /// <remarks>Returns a list of files that belong to the user&#39;s organization.</remarks>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="sampleType"></param>
        /// <param name="source"></param>
        /// <param name="search"></param>
        /// <param name="purpose"></param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/files")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ListFilesOut))]
        public virtual IActionResult FilesApiRoutesListFiles([FromQuery (Name = "page")]int? page, [FromQuery (Name = "page_size")]int? pageSize, [FromQuery (Name = "sample_type")]List<SampleType>? sampleType, [FromQuery (Name = "source")]List<Source>? source, [FromQuery (Name = "search")]string? search, [FromQuery (Name = "purpose")]FilePurpose? purpose)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"total\" : 5,\r\n  \"data\" : [ {\r\n    \"filename\" : \"filename\",\r\n    \"purpose\" : \"fine-tune\",\r\n    \"bytes\" : 0,\r\n    \"created_at\" : 6,\r\n    \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n    \"source\" : \"upload\",\r\n    \"sample_type\" : \"pretrain\",\r\n    \"num_lines\" : 1,\r\n    \"object\" : \"object\"\r\n  }, {\r\n    \"filename\" : \"filename\",\r\n    \"purpose\" : \"fine-tune\",\r\n    \"bytes\" : 0,\r\n    \"created_at\" : 6,\r\n    \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n    \"source\" : \"upload\",\r\n    \"sample_type\" : \"pretrain\",\r\n    \"num_lines\" : 1,\r\n    \"object\" : \"object\"\r\n  } ],\r\n  \"object\" : \"object\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<ListFilesOut>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieve File
        /// </summary>
        /// <remarks>Returns information about a specific file.</remarks>
        /// <param name="fileId"></param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/files/{file_id}")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(RetrieveFileOut))]
        public virtual IActionResult FilesApiRoutesRetrieveFile([FromRoute (Name = "file_id")][Required]Guid fileId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"filename\" : \"filename\",\r\n  \"deleted\" : true,\r\n  \"purpose\" : \"fine-tune\",\r\n  \"bytes\" : 0,\r\n  \"created_at\" : 6,\r\n  \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n  \"source\" : \"upload\",\r\n  \"sample_type\" : \"pretrain\",\r\n  \"num_lines\" : 1,\r\n  \"object\" : \"object\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<RetrieveFileOut>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Upload File
        /// </summary>
        /// <remarks>Upload a file that can be used across various endpoints.  The size of individual files can be a maximum of 512 MB. The Fine-tuning API only supports .jsonl files.  Please contact us if you need to increase these storage limits.</remarks>
        /// <param name="file">The File object (not file name) to be uploaded.  To upload a file and specify a custom file name you should format your request as such:  &#x60;&#x60;&#x60;bash  file&#x3D;@path/to/your/file.jsonl;filename&#x3D;custom_name.jsonl  &#x60;&#x60;&#x60;  Otherwise, you can just keep the original file name:  &#x60;&#x60;&#x60;bash  file&#x3D;@path/to/your/file.jsonl  &#x60;&#x60;&#x60;</param>
        /// <param name="purpose"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/files")]
        [Authorize]
        [Consumes("multipart/form-data")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(UploadFileOut))]
        public virtual IActionResult FilesApiRoutesUploadFile([Required()]IFormFile file, [FromForm (Name = "purpose")]FilePurpose? purpose)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"filename\" : \"filename\",\r\n  \"purpose\" : \"fine-tune\",\r\n  \"bytes\" : 0,\r\n  \"created_at\" : 6,\r\n  \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n  \"source\" : \"upload\",\r\n  \"sample_type\" : \"pretrain\",\r\n  \"num_lines\" : 1,\r\n  \"object\" : \"object\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<UploadFileOut>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
