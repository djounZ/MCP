/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using JsonSubTypes;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Represents an event emitted when streaming a Run.  Each event in a server-sent events stream has an &#x60;event&#x60; and &#x60;data&#x60; property:  &#x60;&#x60;&#x60; event: thread.created data: {\&quot;id\&quot;: \&quot;thread_123\&quot;, \&quot;object\&quot;: \&quot;thread\&quot;, ...} &#x60;&#x60;&#x60;  We emit events whenever a new object is created, transitions to a new state, or is being streamed in parts (deltas). For example, we emit &#x60;thread.run.created&#x60; when a new run is created, &#x60;thread.run.completed&#x60; when a run completes, and so on. When an Assistant chooses to create a message during a run, we emit a &#x60;thread.message.created event&#x60;, a &#x60;thread.message.in_progress&#x60; event, many &#x60;thread.message.delta&#x60; events, and finally a &#x60;thread.message.completed&#x60; event.  We may add additional events over time, so we recommend handling unknown events gracefully in your code. See the [Assistants API quickstart](https://platform.openai.com/docs/assistants/overview) to learn how to integrate the Assistants API with streaming. 
    /// </summary>
    [DataContract]
    public partial class AssistantStreamEvent 
    {
        /// <summary>
        /// Whether to enable input audio transcription.
        /// </summary>
        /// <value>Whether to enable input audio transcription.</value>
        [DataMember(Name="enabled", EmitDefaultValue=true)]
        public bool? Enabled { get; set; }


        /// <summary>
        /// Gets or Sets Event
        /// </summary>
        
        public enum EventEnum
        {
            
            /// <summary>
            /// Enum ErrorEnum for error
            /// </summary>
            [EnumMember(Value = "error")]
            ErrorEnum = 1
        }

        /// <summary>
        /// Gets or Sets Event
        /// </summary>
        [Required]
        [DataMember(Name="event", EmitDefaultValue=true)]
        public EventEnum Event { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [Required]
        [DataMember(Name="data", EmitDefaultValue=false)]
        public Error Data { get; set; }

    }
}
