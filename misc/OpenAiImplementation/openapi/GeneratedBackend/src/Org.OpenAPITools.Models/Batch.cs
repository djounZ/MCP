/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Batch 
    {
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }


        /// <summary>
        /// The object type, which is always `batch`.
        /// </summary>
        /// <value>The object type, which is always `batch`.</value>
        
        public enum ObjectEnum
        {
            
            /// <summary>
            /// Enum BatchEnum for batch
            /// </summary>
            [EnumMember(Value = "batch")]
            BatchEnum = 1
        }

        /// <summary>
        /// The object type, which is always &#x60;batch&#x60;.
        /// </summary>
        /// <value>The object type, which is always &#x60;batch&#x60;.</value>
        [Required]
        [DataMember(Name="object", EmitDefaultValue=true)]
        public ObjectEnum Object { get; set; }

        /// <summary>
        /// The OpenAI API endpoint used by the batch.
        /// </summary>
        /// <value>The OpenAI API endpoint used by the batch.</value>
        [Required]
        [DataMember(Name="endpoint", EmitDefaultValue=false)]
        public string Endpoint { get; set; }

        /// <summary>
        /// Gets or Sets Errors
        /// </summary>
        [DataMember(Name="errors", EmitDefaultValue=false)]
        public BatchErrors? Errors { get; set; }

        /// <summary>
        /// The ID of the input file for the batch.
        /// </summary>
        /// <value>The ID of the input file for the batch.</value>
        [Required]
        [DataMember(Name="input_file_id", EmitDefaultValue=false)]
        public string InputFileId { get; set; }

        /// <summary>
        /// The time frame within which the batch should be processed.
        /// </summary>
        /// <value>The time frame within which the batch should be processed.</value>
        [Required]
        [DataMember(Name="completion_window", EmitDefaultValue=false)]
        public string CompletionWindow { get; set; }


        /// <summary>
        /// The current status of the batch.
        /// </summary>
        /// <value>The current status of the batch.</value>
        
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum ValidatingEnum for validating
            /// </summary>
            [EnumMember(Value = "validating")]
            ValidatingEnum = 1,
            
            /// <summary>
            /// Enum FailedEnum for failed
            /// </summary>
            [EnumMember(Value = "failed")]
            FailedEnum = 2,
            
            /// <summary>
            /// Enum InProgressEnum for in_progress
            /// </summary>
            [EnumMember(Value = "in_progress")]
            InProgressEnum = 3,
            
            /// <summary>
            /// Enum FinalizingEnum for finalizing
            /// </summary>
            [EnumMember(Value = "finalizing")]
            FinalizingEnum = 4,
            
            /// <summary>
            /// Enum CompletedEnum for completed
            /// </summary>
            [EnumMember(Value = "completed")]
            CompletedEnum = 5,
            
            /// <summary>
            /// Enum ExpiredEnum for expired
            /// </summary>
            [EnumMember(Value = "expired")]
            ExpiredEnum = 6,
            
            /// <summary>
            /// Enum CancellingEnum for cancelling
            /// </summary>
            [EnumMember(Value = "cancelling")]
            CancellingEnum = 7,
            
            /// <summary>
            /// Enum CancelledEnum for cancelled
            /// </summary>
            [EnumMember(Value = "cancelled")]
            CancelledEnum = 8
        }

        /// <summary>
        /// The current status of the batch.
        /// </summary>
        /// <value>The current status of the batch.</value>
        [Required]
        [DataMember(Name="status", EmitDefaultValue=true)]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// The ID of the file containing the outputs of successfully executed requests.
        /// </summary>
        /// <value>The ID of the file containing the outputs of successfully executed requests.</value>
        [DataMember(Name="output_file_id", EmitDefaultValue=false)]
        public string? OutputFileId { get; set; }

        /// <summary>
        /// The ID of the file containing the outputs of requests with errors.
        /// </summary>
        /// <value>The ID of the file containing the outputs of requests with errors.</value>
        [DataMember(Name="error_file_id", EmitDefaultValue=false)]
        public string? ErrorFileId { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the batch was created.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the batch was created.</value>
        [Required]
        [DataMember(Name="created_at", EmitDefaultValue=true)]
        public int CreatedAt { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the batch started processing.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the batch started processing.</value>
        [DataMember(Name="in_progress_at", EmitDefaultValue=true)]
        public int? InProgressAt { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the batch will expire.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the batch will expire.</value>
        [DataMember(Name="expires_at", EmitDefaultValue=true)]
        public int? ExpiresAt { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the batch started finalizing.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the batch started finalizing.</value>
        [DataMember(Name="finalizing_at", EmitDefaultValue=true)]
        public int? FinalizingAt { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the batch was completed.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the batch was completed.</value>
        [DataMember(Name="completed_at", EmitDefaultValue=true)]
        public int? CompletedAt { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the batch failed.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the batch failed.</value>
        [DataMember(Name="failed_at", EmitDefaultValue=true)]
        public int? FailedAt { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the batch expired.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the batch expired.</value>
        [DataMember(Name="expired_at", EmitDefaultValue=true)]
        public int? ExpiredAt { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the batch started cancelling.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the batch started cancelling.</value>
        [DataMember(Name="cancelling_at", EmitDefaultValue=true)]
        public int? CancellingAt { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the batch was cancelled.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the batch was cancelled.</value>
        [DataMember(Name="cancelled_at", EmitDefaultValue=true)]
        public int? CancelledAt { get; set; }

        /// <summary>
        /// Gets or Sets RequestCounts
        /// </summary>
        [DataMember(Name="request_counts", EmitDefaultValue=false)]
        public BatchRequestCounts? RequestCounts { get; set; }

        /// <summary>
        /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.   Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters. 
        /// </summary>
        /// <value>Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.   Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters. </value>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Dictionary<string, string> Metadata { get; set; }

    }
}
