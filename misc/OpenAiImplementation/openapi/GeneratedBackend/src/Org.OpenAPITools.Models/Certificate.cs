/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Represents an individual &#x60;certificate&#x60; uploaded to the organization.
    /// </summary>
    [DataContract]
    public partial class Certificate 
    {

        /// <summary>
        /// The object type.  - If creating, updating, or getting a specific certificate, the object type is `certificate`. - If listing, activating, or deactivating certificates for the organization, the object type is `organization.certificate`. - If listing, activating, or deactivating certificates for a project, the object type is `organization.project.certificate`. 
        /// </summary>
        /// <value>The object type.  - If creating, updating, or getting a specific certificate, the object type is `certificate`. - If listing, activating, or deactivating certificates for the organization, the object type is `organization.certificate`. - If listing, activating, or deactivating certificates for a project, the object type is `organization.project.certificate`. </value>
        
        public enum ObjectEnum
        {
            
            /// <summary>
            /// Enum CertificateEnum for certificate
            /// </summary>
            [EnumMember(Value = "certificate")]
            CertificateEnum = 1,
            
            /// <summary>
            /// Enum OrganizationCertificateEnum for organization.certificate
            /// </summary>
            [EnumMember(Value = "organization.certificate")]
            OrganizationCertificateEnum = 2,
            
            /// <summary>
            /// Enum OrganizationProjectCertificateEnum for organization.project.certificate
            /// </summary>
            [EnumMember(Value = "organization.project.certificate")]
            OrganizationProjectCertificateEnum = 3
        }

        /// <summary>
        /// The object type.  - If creating, updating, or getting a specific certificate, the object type is &#x60;certificate&#x60;. - If listing, activating, or deactivating certificates for the organization, the object type is &#x60;organization.certificate&#x60;. - If listing, activating, or deactivating certificates for a project, the object type is &#x60;organization.project.certificate&#x60;. 
        /// </summary>
        /// <value>The object type.  - If creating, updating, or getting a specific certificate, the object type is &#x60;certificate&#x60;. - If listing, activating, or deactivating certificates for the organization, the object type is &#x60;organization.certificate&#x60;. - If listing, activating, or deactivating certificates for a project, the object type is &#x60;organization.project.certificate&#x60;. </value>
        [Required]
        [DataMember(Name="object", EmitDefaultValue=true)]
        public ObjectEnum Object { get; set; }

        /// <summary>
        /// The identifier, which can be referenced in API endpoints
        /// </summary>
        /// <value>The identifier, which can be referenced in API endpoints</value>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the certificate.
        /// </summary>
        /// <value>The name of the certificate.</value>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) of when the certificate was uploaded.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) of when the certificate was uploaded.</value>
        [Required]
        [DataMember(Name="created_at", EmitDefaultValue=true)]
        public int CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets CertificateDetails
        /// </summary>
        [Required]
        [DataMember(Name="certificate_details", EmitDefaultValue=false)]
        public CertificateCertificateDetails CertificateDetails { get; set; }

        /// <summary>
        /// Whether the certificate is currently active at the specified scope. Not returned when getting details for a specific certificate.
        /// </summary>
        /// <value>Whether the certificate is currently active at the specified scope. Not returned when getting details for a specific certificate.</value>
        [DataMember(Name="active", EmitDefaultValue=true)]
        public bool? Active { get; set; }

    }
}
