/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using JsonSubTypes;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComputerAction 
    {

        /// <summary>
        /// Specifies the event type. For a click action, this property is  always set to `click`. 
        /// </summary>
        /// <value>Specifies the event type. For a click action, this property is  always set to `click`. </value>
        
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum ClickEnum for click
            /// </summary>
            [EnumMember(Value = "click")]
            ClickEnum = 1,
            
            /// <summary>
            /// Enum DoubleClickEnum for double_click
            /// </summary>
            [EnumMember(Value = "double_click")]
            DoubleClickEnum = 2,
            
            /// <summary>
            /// Enum DragEnum for drag
            /// </summary>
            [EnumMember(Value = "drag")]
            DragEnum = 3,
            
            /// <summary>
            /// Enum KeypressEnum for keypress
            /// </summary>
            [EnumMember(Value = "keypress")]
            KeypressEnum = 4,
            
            /// <summary>
            /// Enum MoveEnum for move
            /// </summary>
            [EnumMember(Value = "move")]
            MoveEnum = 5,
            
            /// <summary>
            /// Enum ScreenshotEnum for screenshot
            /// </summary>
            [EnumMember(Value = "screenshot")]
            ScreenshotEnum = 6,
            
            /// <summary>
            /// Enum ScrollEnum for scroll
            /// </summary>
            [EnumMember(Value = "scroll")]
            ScrollEnum = 7,
            
            /// <summary>
            /// Enum TypeEnum for type
            /// </summary>
            [EnumMember(Value = "type")]
            TypeEnum = 8,
            
            /// <summary>
            /// Enum WaitEnum for wait
            /// </summary>
            [EnumMember(Value = "wait")]
            WaitEnum = 9
        }

        /// <summary>
        /// Specifies the event type. For a click action, this property is  always set to &#x60;click&#x60;. 
        /// </summary>
        /// <value>Specifies the event type. For a click action, this property is  always set to &#x60;click&#x60;. </value>
        [Required]
        [DataMember(Name="type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; } = TypeEnum.ClickEnum;


        /// <summary>
        /// Indicates which mouse button was pressed during the click. One of `left`, `right`, `wheel`, `back`, or `forward`. 
        /// </summary>
        /// <value>Indicates which mouse button was pressed during the click. One of `left`, `right`, `wheel`, `back`, or `forward`. </value>
        
        public enum ButtonEnum
        {
            
            /// <summary>
            /// Enum LeftEnum for left
            /// </summary>
            [EnumMember(Value = "left")]
            LeftEnum = 1,
            
            /// <summary>
            /// Enum RightEnum for right
            /// </summary>
            [EnumMember(Value = "right")]
            RightEnum = 2,
            
            /// <summary>
            /// Enum WheelEnum for wheel
            /// </summary>
            [EnumMember(Value = "wheel")]
            WheelEnum = 3,
            
            /// <summary>
            /// Enum BackEnum for back
            /// </summary>
            [EnumMember(Value = "back")]
            BackEnum = 4,
            
            /// <summary>
            /// Enum ForwardEnum for forward
            /// </summary>
            [EnumMember(Value = "forward")]
            ForwardEnum = 5
        }

        /// <summary>
        /// Indicates which mouse button was pressed during the click. One of &#x60;left&#x60;, &#x60;right&#x60;, &#x60;wheel&#x60;, &#x60;back&#x60;, or &#x60;forward&#x60;. 
        /// </summary>
        /// <value>Indicates which mouse button was pressed during the click. One of &#x60;left&#x60;, &#x60;right&#x60;, &#x60;wheel&#x60;, &#x60;back&#x60;, or &#x60;forward&#x60;. </value>
        [Required]
        [DataMember(Name="button", EmitDefaultValue=true)]
        public ButtonEnum Button { get; set; }

        /// <summary>
        /// The x-coordinate where the scroll occurred. 
        /// </summary>
        /// <value>The x-coordinate where the scroll occurred. </value>
        [Required]
        [DataMember(Name="x", EmitDefaultValue=true)]
        public int X { get; set; }

        /// <summary>
        /// The y-coordinate where the scroll occurred. 
        /// </summary>
        /// <value>The y-coordinate where the scroll occurred. </value>
        [Required]
        [DataMember(Name="y", EmitDefaultValue=true)]
        public int Y { get; set; }

        /// <summary>
        /// An array of coordinates representing the path of the drag action. Coordinates will appear as an array of objects, eg &#x60;&#x60;&#x60; [   { x: 100, y: 200 },   { x: 200, y: 300 } ] &#x60;&#x60;&#x60; 
        /// </summary>
        /// <value>An array of coordinates representing the path of the drag action. Coordinates will appear as an array of objects, eg &#x60;&#x60;&#x60; [   { x: 100, y: 200 },   { x: 200, y: 300 } ] &#x60;&#x60;&#x60; </value>
        [Required]
        [DataMember(Name="path", EmitDefaultValue=false)]
        public List<Coordinate> Path { get; set; }

        /// <summary>
        /// The combination of keys the model is requesting to be pressed. This is an array of strings, each representing a key. 
        /// </summary>
        /// <value>The combination of keys the model is requesting to be pressed. This is an array of strings, each representing a key. </value>
        [Required]
        [DataMember(Name="keys", EmitDefaultValue=false)]
        public List<string> Keys { get; set; }

        /// <summary>
        /// The horizontal scroll distance. 
        /// </summary>
        /// <value>The horizontal scroll distance. </value>
        [Required]
        [DataMember(Name="scroll_x", EmitDefaultValue=true)]
        public int ScrollX { get; set; }

        /// <summary>
        /// The vertical scroll distance. 
        /// </summary>
        /// <value>The vertical scroll distance. </value>
        [Required]
        [DataMember(Name="scroll_y", EmitDefaultValue=true)]
        public int ScrollY { get; set; }

        /// <summary>
        /// The text to type. 
        /// </summary>
        /// <value>The text to type. </value>
        [Required]
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

    }
}
