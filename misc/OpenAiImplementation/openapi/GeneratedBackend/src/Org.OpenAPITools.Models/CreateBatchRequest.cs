/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CreateBatchRequest 
    {
        /// <summary>
        /// The ID of an uploaded file that contains requests for the new batch.  See [upload file](https://platform.openai.com/docs/api-reference/files/create) for how to upload a file.  Your input file must be formatted as a [JSONL file](https://platform.openai.com/docs/api-reference/batch/request-input), and must be uploaded with the purpose &#x60;batch&#x60;. The file can contain up to 50,000 requests, and can be up to 200 MB in size. 
        /// </summary>
        /// <value>The ID of an uploaded file that contains requests for the new batch.  See [upload file](https://platform.openai.com/docs/api-reference/files/create) for how to upload a file.  Your input file must be formatted as a [JSONL file](https://platform.openai.com/docs/api-reference/batch/request-input), and must be uploaded with the purpose &#x60;batch&#x60;. The file can contain up to 50,000 requests, and can be up to 200 MB in size. </value>
        [Required]
        [DataMember(Name="input_file_id", EmitDefaultValue=false)]
        public string InputFileId { get; set; }


        /// <summary>
        /// The endpoint to be used for all requests in the batch. Currently `/v1/responses`, `/v1/chat/completions`, `/v1/embeddings`, and `/v1/completions` are supported. Note that `/v1/embeddings` batches are also restricted to a maximum of 50,000 embedding inputs across all requests in the batch.
        /// </summary>
        /// <value>The endpoint to be used for all requests in the batch. Currently `/v1/responses`, `/v1/chat/completions`, `/v1/embeddings`, and `/v1/completions` are supported. Note that `/v1/embeddings` batches are also restricted to a maximum of 50,000 embedding inputs across all requests in the batch.</value>
        
        public enum EndpointEnum
        {
            
            /// <summary>
            /// Enum V1ResponsesEnum for /v1/responses
            /// </summary>
            [EnumMember(Value = "/v1/responses")]
            V1ResponsesEnum = 1,
            
            /// <summary>
            /// Enum V1ChatCompletionsEnum for /v1/chat/completions
            /// </summary>
            [EnumMember(Value = "/v1/chat/completions")]
            V1ChatCompletionsEnum = 2,
            
            /// <summary>
            /// Enum V1EmbeddingsEnum for /v1/embeddings
            /// </summary>
            [EnumMember(Value = "/v1/embeddings")]
            V1EmbeddingsEnum = 3,
            
            /// <summary>
            /// Enum V1CompletionsEnum for /v1/completions
            /// </summary>
            [EnumMember(Value = "/v1/completions")]
            V1CompletionsEnum = 4
        }

        /// <summary>
        /// The endpoint to be used for all requests in the batch. Currently &#x60;/v1/responses&#x60;, &#x60;/v1/chat/completions&#x60;, &#x60;/v1/embeddings&#x60;, and &#x60;/v1/completions&#x60; are supported. Note that &#x60;/v1/embeddings&#x60; batches are also restricted to a maximum of 50,000 embedding inputs across all requests in the batch.
        /// </summary>
        /// <value>The endpoint to be used for all requests in the batch. Currently &#x60;/v1/responses&#x60;, &#x60;/v1/chat/completions&#x60;, &#x60;/v1/embeddings&#x60;, and &#x60;/v1/completions&#x60; are supported. Note that &#x60;/v1/embeddings&#x60; batches are also restricted to a maximum of 50,000 embedding inputs across all requests in the batch.</value>
        [Required]
        [DataMember(Name="endpoint", EmitDefaultValue=true)]
        public EndpointEnum Endpoint { get; set; }


        /// <summary>
        /// The time frame within which the batch should be processed. Currently only `24h` is supported.
        /// </summary>
        /// <value>The time frame within which the batch should be processed. Currently only `24h` is supported.</value>
        
        public enum CompletionWindowEnum
        {
            
            /// <summary>
            /// Enum _24hEnum for 24h
            /// </summary>
            [EnumMember(Value = "24h")]
            _24hEnum = 1
        }

        /// <summary>
        /// The time frame within which the batch should be processed. Currently only &#x60;24h&#x60; is supported.
        /// </summary>
        /// <value>The time frame within which the batch should be processed. Currently only &#x60;24h&#x60; is supported.</value>
        [Required]
        [DataMember(Name="completion_window", EmitDefaultValue=true)]
        public CompletionWindowEnum CompletionWindow { get; set; }

        /// <summary>
        /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.   Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters. 
        /// </summary>
        /// <value>Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.   Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters. </value>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Dictionary<string, string> Metadata { get; set; }

    }
}
