/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CreateChatCompletionRequest 
    {
        /// <summary>
        /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.   Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters. 
        /// </summary>
        /// <value>Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.   Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters. </value>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. &#x60;logprobs&#x60; must be set to &#x60;true&#x60; if this parameter is used. 
        /// </summary>
        /// <value>An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. &#x60;logprobs&#x60; must be set to &#x60;true&#x60; if this parameter is used. </value>
        [Range(0, 20)]
        [DataMember(Name="top_logprobs", EmitDefaultValue=true)]
        public int? TopLogprobs { get; set; }

        /// <summary>
        /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or &#x60;top_p&#x60; but not both. 
        /// </summary>
        /// <value>What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or &#x60;top_p&#x60; but not both. </value>
        /* <example>1</example> */
        [Range(0, 2)]
        [DataMember(Name="temperature", EmitDefaultValue=true)]
        public decimal? Temperature { get; set; } = 1M;

        /// <summary>
        /// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or &#x60;temperature&#x60; but not both. 
        /// </summary>
        /// <value>An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or &#x60;temperature&#x60; but not both. </value>
        /* <example>1</example> */
        [Range(0, 1)]
        [DataMember(Name="top_p", EmitDefaultValue=true)]
        public decimal? TopP { get; set; } = 1M;

        /// <summary>
        /// This field is being replaced by &#x60;safety_identifier&#x60; and &#x60;prompt_cache_key&#x60;. Use &#x60;prompt_cache_key&#x60; instead to maintain caching optimizations. A stable identifier for your end-users.  Used to boost cache hit rates by better bucketing similar requests and  to help OpenAI detect and prevent abuse. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#safety-identifiers). 
        /// </summary>
        /// <value>This field is being replaced by &#x60;safety_identifier&#x60; and &#x60;prompt_cache_key&#x60;. Use &#x60;prompt_cache_key&#x60; instead to maintain caching optimizations. A stable identifier for your end-users.  Used to boost cache hit rates by better bucketing similar requests and  to help OpenAI detect and prevent abuse. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#safety-identifiers). </value>
        /* <example>user-1234</example> */
        [DataMember(Name="user", EmitDefaultValue=false)]
        public string? User { get; set; }

        /// <summary>
        /// A stable identifier used to help detect users of your application that may be violating OpenAI&#39;s usage policies.  The IDs should be a string that uniquely identifies each user. We recommend hashing their username or email address, in order to avoid sending us any identifying information. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#safety-identifiers). 
        /// </summary>
        /// <value>A stable identifier used to help detect users of your application that may be violating OpenAI&#39;s usage policies.  The IDs should be a string that uniquely identifies each user. We recommend hashing their username or email address, in order to avoid sending us any identifying information. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#safety-identifiers). </value>
        /* <example>safety-identifier-1234</example> */
        [DataMember(Name="safety_identifier", EmitDefaultValue=false)]
        public string? SafetyIdentifier { get; set; }

        /// <summary>
        /// Used by OpenAI to cache responses for similar requests to optimize your cache hit rates. Replaces the &#x60;user&#x60; field. [Learn more](https://platform.openai.com/docs/guides/prompt-caching). 
        /// </summary>
        /// <value>Used by OpenAI to cache responses for similar requests to optimize your cache hit rates. Replaces the &#x60;user&#x60; field. [Learn more](https://platform.openai.com/docs/guides/prompt-caching). </value>
        /* <example>prompt-cache-key-1234</example> */
        [DataMember(Name="prompt_cache_key", EmitDefaultValue=false)]
        public string? PromptCacheKey { get; set; }

        /// <summary>
        /// Gets or Sets ServiceTier
        /// </summary>
        [DataMember(Name="service_tier", EmitDefaultValue=true)]
        public ServiceTier ServiceTier { get; set; }

        /// <summary>
        /// A list of messages comprising the conversation so far. Depending on the [model](https://platform.openai.com/docs/models) you use, different message types (modalities) are supported, like [text](https://platform.openai.com/docs/guides/text-generation), [images](https://platform.openai.com/docs/guides/vision), and [audio](https://platform.openai.com/docs/guides/audio). 
        /// </summary>
        /// <value>A list of messages comprising the conversation so far. Depending on the [model](https://platform.openai.com/docs/models) you use, different message types (modalities) are supported, like [text](https://platform.openai.com/docs/guides/text-generation), [images](https://platform.openai.com/docs/guides/vision), and [audio](https://platform.openai.com/docs/guides/audio). </value>
        [Required]
        [DataMember(Name="messages", EmitDefaultValue=false)]
        public List<ChatCompletionRequestMessage> Messages { get; set; }

        /// <summary>
        /// Model ID used to generate the response, like &#x60;gpt-4o&#x60; or &#x60;o3&#x60;. OpenAI offers a wide range of models with different capabilities, performance characteristics, and price points. Refer to the [model guide](https://platform.openai.com/docs/models) to browse and compare available models. 
        /// </summary>
        /// <value>Model ID used to generate the response, like &#x60;gpt-4o&#x60; or &#x60;o3&#x60;. OpenAI offers a wide range of models with different capabilities, performance characteristics, and price points. Refer to the [model guide](https://platform.openai.com/docs/models) to browse and compare available models. </value>
        [Required]
        [DataMember(Name="model", EmitDefaultValue=false)]
        public ModelIdsShared Model { get; set; }


        /// <summary>
        /// Gets or Sets Modalities
        /// </summary>
        
        public enum ModalitiesEnum
        {
            
            /// <summary>
            /// Enum TextEnum for text
            /// </summary>
            [EnumMember(Value = "text")]
            TextEnum = 1,
            
            /// <summary>
            /// Enum AudioEnum for audio
            /// </summary>
            [EnumMember(Value = "audio")]
            AudioEnum = 2
        }

        /// <summary>
        /// Output types that you would like the model to generate. Most models are capable of generating text, which is the default:  &#x60;[\&quot;text\&quot;]&#x60;  The &#x60;gpt-4o-audio-preview&#x60; model can also be used to  [generate audio](https://platform.openai.com/docs/guides/audio). To request that this model generate  both text and audio responses, you can use:  &#x60;[\&quot;text\&quot;, \&quot;audio\&quot;]&#x60; 
        /// </summary>
        /// <value>Output types that you would like the model to generate. Most models are capable of generating text, which is the default:  &#x60;[\&quot;text\&quot;]&#x60;  The &#x60;gpt-4o-audio-preview&#x60; model can also be used to  [generate audio](https://platform.openai.com/docs/guides/audio). To request that this model generate  both text and audio responses, you can use:  &#x60;[\&quot;text\&quot;, \&quot;audio\&quot;]&#x60; </value>
        [DataMember(Name="modalities", EmitDefaultValue=false)]
        public List<CreateChatCompletionRequest.ModalitiesEnum> Modalities { get; set; }

        /// <summary>
        /// Gets or Sets ReasoningEffort
        /// </summary>
        [DataMember(Name="reasoning_effort", EmitDefaultValue=true)]
        public ReasoningEffort ReasoningEffort { get; set; }

        /// <summary>
        /// An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and [reasoning tokens](https://platform.openai.com/docs/guides/reasoning). 
        /// </summary>
        /// <value>An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and [reasoning tokens](https://platform.openai.com/docs/guides/reasoning). </value>
        [DataMember(Name="max_completion_tokens", EmitDefaultValue=true)]
        public int? MaxCompletionTokens { get; set; }

        /// <summary>
        /// Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model&#39;s likelihood to repeat the same line verbatim. 
        /// </summary>
        /// <value>Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model&#39;s likelihood to repeat the same line verbatim. </value>
        [Range(-2, 2)]
        [DataMember(Name="frequency_penalty", EmitDefaultValue=true)]
        public decimal? FrequencyPenalty { get; set; } = 0M;

        /// <summary>
        /// Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model&#39;s likelihood to talk about new topics. 
        /// </summary>
        /// <value>Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model&#39;s likelihood to talk about new topics. </value>
        [Range(-2, 2)]
        [DataMember(Name="presence_penalty", EmitDefaultValue=true)]
        public decimal? PresencePenalty { get; set; } = 0M;

        /// <summary>
        /// Gets or Sets WebSearchOptions
        /// </summary>
        [DataMember(Name="web_search_options", EmitDefaultValue=false)]
        public WebSearch? WebSearchOptions { get; set; }

        /// <summary>
        /// Gets or Sets ResponseFormat
        /// </summary>
        [DataMember(Name="response_format", EmitDefaultValue=false)]
        public CreateChatCompletionRequestAllOfResponseFormat? ResponseFormat { get; set; }

        /// <summary>
        /// Gets or Sets Audio
        /// </summary>
        [DataMember(Name="audio", EmitDefaultValue=false)]
        public CreateChatCompletionRequestAllOfAudio? Audio { get; set; }

        /// <summary>
        /// Whether or not to store the output of this chat completion request for use in our [model distillation](https://platform.openai.com/docs/guides/distillation) or [evals](https://platform.openai.com/docs/guides/evals) products.  Supports text and image inputs. Note: image inputs over 10MB will be dropped. 
        /// </summary>
        /// <value>Whether or not to store the output of this chat completion request for use in our [model distillation](https://platform.openai.com/docs/guides/distillation) or [evals](https://platform.openai.com/docs/guides/evals) products.  Supports text and image inputs. Note: image inputs over 10MB will be dropped. </value>
        [DataMember(Name="store", EmitDefaultValue=true)]
        public bool? Store { get; set; } = false;

        /// <summary>
        /// If set to true, the model response data will be streamed to the client as it is generated using [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format). See the [Streaming section below](https://platform.openai.com/docs/api-reference/chat/streaming) for more information, along with the [streaming responses](https://platform.openai.com/docs/guides/streaming-responses) guide for more information on how to handle the streaming events. 
        /// </summary>
        /// <value>If set to true, the model response data will be streamed to the client as it is generated using [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format). See the [Streaming section below](https://platform.openai.com/docs/api-reference/chat/streaming) for more information, along with the [streaming responses](https://platform.openai.com/docs/guides/streaming-responses) guide for more information on how to handle the streaming events. </value>
        [DataMember(Name="stream", EmitDefaultValue=true)]
        public bool? Stream { get; set; } = false;

        /// <summary>
        /// Gets or Sets Stop
        /// </summary>
        [DataMember(Name="stop", EmitDefaultValue=false)]
        public StopConfiguration? Stop { get; set; }

        /// <summary>
        /// Modify the likelihood of specified tokens appearing in the completion.  Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token. 
        /// </summary>
        /// <value>Modify the likelihood of specified tokens appearing in the completion.  Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token. </value>
        [DataMember(Name="logit_bias", EmitDefaultValue=false)]
        public Dictionary<string, int> LogitBias { get; set; }

        /// <summary>
        /// Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the &#x60;content&#x60; of &#x60;message&#x60;. 
        /// </summary>
        /// <value>Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the &#x60;content&#x60; of &#x60;message&#x60;. </value>
        [DataMember(Name="logprobs", EmitDefaultValue=true)]
        public bool? Logprobs { get; set; } = false;

        /// <summary>
        /// The maximum number of [tokens](/tokenizer) that can be generated in the chat completion. This value can be used to control [costs](https://openai.com/api/pricing/) for text generated via API.  This value is now deprecated in favor of &#x60;max_completion_tokens&#x60;, and is not compatible with [o-series models](https://platform.openai.com/docs/guides/reasoning). 
        /// </summary>
        /// <value>The maximum number of [tokens](/tokenizer) that can be generated in the chat completion. This value can be used to control [costs](https://openai.com/api/pricing/) for text generated via API.  This value is now deprecated in favor of &#x60;max_completion_tokens&#x60;, and is not compatible with [o-series models](https://platform.openai.com/docs/guides/reasoning). </value>
        [DataMember(Name="max_tokens", EmitDefaultValue=true)]
        public int? MaxTokens { get; set; }

        /// <summary>
        /// How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep &#x60;n&#x60; as &#x60;1&#x60; to minimize costs.
        /// </summary>
        /// <value>How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep &#x60;n&#x60; as &#x60;1&#x60; to minimize costs.</value>
        /* <example>1</example> */
        [Range(1, 128)]
        [DataMember(Name="n", EmitDefaultValue=true)]
        public int? N { get; set; } = 1;

        /// <summary>
        /// Gets or Sets Prediction
        /// </summary>
        [DataMember(Name="prediction", EmitDefaultValue=false)]
        public PredictionContent? Prediction { get; set; }

        /// <summary>
        /// This feature is in Beta. If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same &#x60;seed&#x60; and parameters should return the same result. Determinism is not guaranteed, and you should refer to the &#x60;system_fingerprint&#x60; response parameter to monitor changes in the backend. 
        /// </summary>
        /// <value>This feature is in Beta. If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same &#x60;seed&#x60; and parameters should return the same result. Determinism is not guaranteed, and you should refer to the &#x60;system_fingerprint&#x60; response parameter to monitor changes in the backend. </value>
        [Range(9223372036854775616, -9223372036854775616)]
        [DataMember(Name="seed", EmitDefaultValue=true)]
        public long? Seed { get; set; }

        /// <summary>
        /// Gets or Sets StreamOptions
        /// </summary>
        [DataMember(Name="stream_options", EmitDefaultValue=false)]
        public ChatCompletionStreamOptions? StreamOptions { get; set; }

        /// <summary>
        /// A list of tools the model may call. You can provide either [custom tools](https://platform.openai.com/docs/guides/function-calling#custom-tools) or [function tools](https://platform.openai.com/docs/guides/function-calling). 
        /// </summary>
        /// <value>A list of tools the model may call. You can provide either [custom tools](https://platform.openai.com/docs/guides/function-calling#custom-tools) or [function tools](https://platform.openai.com/docs/guides/function-calling). </value>
        [DataMember(Name="tools", EmitDefaultValue=false)]
        public List<CreateChatCompletionRequestAllOfTools> Tools { get; set; }

        /// <summary>
        /// Gets or Sets ToolChoice
        /// </summary>
        [DataMember(Name="tool_choice", EmitDefaultValue=false)]
        public ChatCompletionToolChoiceOption? ToolChoice { get; set; }

        /// <summary>
        /// Whether to enable [parallel function calling](https://platform.openai.com/docs/guides/function-calling#configuring-parallel-function-calling) during tool use.
        /// </summary>
        /// <value>Whether to enable [parallel function calling](https://platform.openai.com/docs/guides/function-calling#configuring-parallel-function-calling) during tool use.</value>
        [DataMember(Name="parallel_tool_calls", EmitDefaultValue=true)]
        public bool? ParallelToolCalls { get; set; } = true;

        /// <summary>
        /// Gets or Sets FunctionCall
        /// </summary>
        [DataMember(Name="function_call", EmitDefaultValue=false)]
        public CreateChatCompletionRequestAllOfFunctionCall? FunctionCall { get; set; }

        /// <summary>
        /// Deprecated in favor of &#x60;tools&#x60;.  A list of functions the model may generate JSON inputs for. 
        /// </summary>
        /// <value>Deprecated in favor of &#x60;tools&#x60;.  A list of functions the model may generate JSON inputs for. </value>
        [DataMember(Name="functions", EmitDefaultValue=false)]
        public List<ChatCompletionFunctions> Functions { get; set; }

        /// <summary>
        /// Gets or Sets Verbosity
        /// </summary>
        [DataMember(Name="verbosity", EmitDefaultValue=true)]
        public Verbosity Verbosity { get; set; }

    }
}
