/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CreateImageRequest 
    {
        /// <summary>
        /// A text description of the desired image(s). The maximum length is 32000 characters for &#x60;gpt-image-1&#x60;, 1000 characters for &#x60;dall-e-2&#x60; and 4000 characters for &#x60;dall-e-3&#x60;.
        /// </summary>
        /// <value>A text description of the desired image(s). The maximum length is 32000 characters for &#x60;gpt-image-1&#x60;, 1000 characters for &#x60;dall-e-2&#x60; and 4000 characters for &#x60;dall-e-3&#x60;.</value>
        /* <example>A cute baby sea otter</example> */
        [Required]
        [DataMember(Name="prompt", EmitDefaultValue=false)]
        public string Prompt { get; set; }

        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [DataMember(Name="model", EmitDefaultValue=false)]
        public CreateImageRequestModel? Model { get; set; }

        /// <summary>
        /// The number of images to generate. Must be between 1 and 10. For &#x60;dall-e-3&#x60;, only &#x60;n&#x3D;1&#x60; is supported.
        /// </summary>
        /// <value>The number of images to generate. Must be between 1 and 10. For &#x60;dall-e-3&#x60;, only &#x60;n&#x3D;1&#x60; is supported.</value>
        /* <example>1</example> */
        [Range(1, 10)]
        [DataMember(Name="n", EmitDefaultValue=true)]
        public int? N { get; set; } = 1;


        /// <summary>
        /// The quality of the image that will be generated.   - `auto` (default value) will automatically select the best quality for the given model. - `high`, `medium` and `low` are supported for `gpt-image-1`. - `hd` and `standard` are supported for `dall-e-3`. - `standard` is the only option for `dall-e-2`. 
        /// </summary>
        /// <value>The quality of the image that will be generated.   - `auto` (default value) will automatically select the best quality for the given model. - `high`, `medium` and `low` are supported for `gpt-image-1`. - `hd` and `standard` are supported for `dall-e-3`. - `standard` is the only option for `dall-e-2`. </value>
        
        public enum QualityEnum
        {
            
            /// <summary>
            /// Enum StandardEnum for standard
            /// </summary>
            [EnumMember(Value = "standard")]
            StandardEnum = 1,
            
            /// <summary>
            /// Enum HdEnum for hd
            /// </summary>
            [EnumMember(Value = "hd")]
            HdEnum = 2,
            
            /// <summary>
            /// Enum LowEnum for low
            /// </summary>
            [EnumMember(Value = "low")]
            LowEnum = 3,
            
            /// <summary>
            /// Enum MediumEnum for medium
            /// </summary>
            [EnumMember(Value = "medium")]
            MediumEnum = 4,
            
            /// <summary>
            /// Enum HighEnum for high
            /// </summary>
            [EnumMember(Value = "high")]
            HighEnum = 5,
            
            /// <summary>
            /// Enum AutoEnum for auto
            /// </summary>
            [EnumMember(Value = "auto")]
            AutoEnum = 6
        }

        /// <summary>
        /// The quality of the image that will be generated.   - &#x60;auto&#x60; (default value) will automatically select the best quality for the given model. - &#x60;high&#x60;, &#x60;medium&#x60; and &#x60;low&#x60; are supported for &#x60;gpt-image-1&#x60;. - &#x60;hd&#x60; and &#x60;standard&#x60; are supported for &#x60;dall-e-3&#x60;. - &#x60;standard&#x60; is the only option for &#x60;dall-e-2&#x60;. 
        /// </summary>
        /// <value>The quality of the image that will be generated.   - &#x60;auto&#x60; (default value) will automatically select the best quality for the given model. - &#x60;high&#x60;, &#x60;medium&#x60; and &#x60;low&#x60; are supported for &#x60;gpt-image-1&#x60;. - &#x60;hd&#x60; and &#x60;standard&#x60; are supported for &#x60;dall-e-3&#x60;. - &#x60;standard&#x60; is the only option for &#x60;dall-e-2&#x60;. </value>
        /* <example>medium</example> */
        [DataMember(Name="quality", EmitDefaultValue=true)]
        public QualityEnum Quality { get; set; } = QualityEnum.AutoEnum;


        /// <summary>
        /// The format in which generated images with `dall-e-2` and `dall-e-3` are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated. This parameter isn't supported for `gpt-image-1` which will always return base64-encoded images.
        /// </summary>
        /// <value>The format in which generated images with `dall-e-2` and `dall-e-3` are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated. This parameter isn't supported for `gpt-image-1` which will always return base64-encoded images.</value>
        
        public enum ResponseFormatEnum
        {
            
            /// <summary>
            /// Enum UrlEnum for url
            /// </summary>
            [EnumMember(Value = "url")]
            UrlEnum = 1,
            
            /// <summary>
            /// Enum B64JsonEnum for b64_json
            /// </summary>
            [EnumMember(Value = "b64_json")]
            B64JsonEnum = 2
        }

        /// <summary>
        /// The format in which generated images with &#x60;dall-e-2&#x60; and &#x60;dall-e-3&#x60; are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;. URLs are only valid for 60 minutes after the image has been generated. This parameter isn&#39;t supported for &#x60;gpt-image-1&#x60; which will always return base64-encoded images.
        /// </summary>
        /// <value>The format in which generated images with &#x60;dall-e-2&#x60; and &#x60;dall-e-3&#x60; are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;. URLs are only valid for 60 minutes after the image has been generated. This parameter isn&#39;t supported for &#x60;gpt-image-1&#x60; which will always return base64-encoded images.</value>
        /* <example>url</example> */
        [DataMember(Name="response_format", EmitDefaultValue=true)]
        public ResponseFormatEnum ResponseFormat { get; set; } = ResponseFormatEnum.UrlEnum;


        /// <summary>
        /// The format in which the generated images are returned. This parameter is only supported for `gpt-image-1`. Must be one of `png`, `jpeg`, or `webp`.
        /// </summary>
        /// <value>The format in which the generated images are returned. This parameter is only supported for `gpt-image-1`. Must be one of `png`, `jpeg`, or `webp`.</value>
        
        public enum OutputFormatEnum
        {
            
            /// <summary>
            /// Enum PngEnum for png
            /// </summary>
            [EnumMember(Value = "png")]
            PngEnum = 1,
            
            /// <summary>
            /// Enum JpegEnum for jpeg
            /// </summary>
            [EnumMember(Value = "jpeg")]
            JpegEnum = 2,
            
            /// <summary>
            /// Enum WebpEnum for webp
            /// </summary>
            [EnumMember(Value = "webp")]
            WebpEnum = 3
        }

        /// <summary>
        /// The format in which the generated images are returned. This parameter is only supported for &#x60;gpt-image-1&#x60;. Must be one of &#x60;png&#x60;, &#x60;jpeg&#x60;, or &#x60;webp&#x60;.
        /// </summary>
        /// <value>The format in which the generated images are returned. This parameter is only supported for &#x60;gpt-image-1&#x60;. Must be one of &#x60;png&#x60;, &#x60;jpeg&#x60;, or &#x60;webp&#x60;.</value>
        /* <example>png</example> */
        [DataMember(Name="output_format", EmitDefaultValue=true)]
        public OutputFormatEnum OutputFormat { get; set; } = OutputFormatEnum.PngEnum;

        /// <summary>
        /// The compression level (0-100%) for the generated images. This parameter is only supported for &#x60;gpt-image-1&#x60; with the &#x60;webp&#x60; or &#x60;jpeg&#x60; output formats, and defaults to 100.
        /// </summary>
        /// <value>The compression level (0-100%) for the generated images. This parameter is only supported for &#x60;gpt-image-1&#x60; with the &#x60;webp&#x60; or &#x60;jpeg&#x60; output formats, and defaults to 100.</value>
        /* <example>100</example> */
        [DataMember(Name="output_compression", EmitDefaultValue=true)]
        public int? OutputCompression { get; set; } = 100;

        /// <summary>
        /// Generate the image in streaming mode. Defaults to &#x60;false&#x60;. See the  [Image generation guide](https://platform.openai.com/docs/guides/image-generation) for more information. This parameter is only supported for &#x60;gpt-image-1&#x60;. 
        /// </summary>
        /// <value>Generate the image in streaming mode. Defaults to &#x60;false&#x60;. See the  [Image generation guide](https://platform.openai.com/docs/guides/image-generation) for more information. This parameter is only supported for &#x60;gpt-image-1&#x60;. </value>
        /* <example>false</example> */
        [DataMember(Name="stream", EmitDefaultValue=true)]
        public bool? Stream { get; set; } = false;

        /// <summary>
        /// The number of partial images to generate. This parameter is used for streaming responses that return partial images. Value must be between 0 and 3. When set to 0, the response will be a single image sent in one streaming event.  Note that the final image may be sent before the full number of partial images  are generated if the full image is generated more quickly. 
        /// </summary>
        /// <value>The number of partial images to generate. This parameter is used for streaming responses that return partial images. Value must be between 0 and 3. When set to 0, the response will be a single image sent in one streaming event.  Note that the final image may be sent before the full number of partial images  are generated if the full image is generated more quickly. </value>
        /* <example>1</example> */
        [Range(0, 3)]
        [DataMember(Name="partial_images", EmitDefaultValue=true)]
        public int? PartialImages { get; set; } = 0;


        /// <summary>
        /// The size of the generated images. Must be one of `1024x1024`, `1536x1024` (landscape), `1024x1536` (portrait), or `auto` (default value) for `gpt-image-1`, one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`, and one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3`.
        /// </summary>
        /// <value>The size of the generated images. Must be one of `1024x1024`, `1536x1024` (landscape), `1024x1536` (portrait), or `auto` (default value) for `gpt-image-1`, one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`, and one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3`.</value>
        
        public enum SizeEnum
        {
            
            /// <summary>
            /// Enum AutoEnum for auto
            /// </summary>
            [EnumMember(Value = "auto")]
            AutoEnum = 1,
            
            /// <summary>
            /// Enum _1024x1024Enum for 1024x1024
            /// </summary>
            [EnumMember(Value = "1024x1024")]
            _1024x1024Enum = 2,
            
            /// <summary>
            /// Enum _1536x1024Enum for 1536x1024
            /// </summary>
            [EnumMember(Value = "1536x1024")]
            _1536x1024Enum = 3,
            
            /// <summary>
            /// Enum _1024x1536Enum for 1024x1536
            /// </summary>
            [EnumMember(Value = "1024x1536")]
            _1024x1536Enum = 4,
            
            /// <summary>
            /// Enum _256x256Enum for 256x256
            /// </summary>
            [EnumMember(Value = "256x256")]
            _256x256Enum = 5,
            
            /// <summary>
            /// Enum _512x512Enum for 512x512
            /// </summary>
            [EnumMember(Value = "512x512")]
            _512x512Enum = 6,
            
            /// <summary>
            /// Enum _1792x1024Enum for 1792x1024
            /// </summary>
            [EnumMember(Value = "1792x1024")]
            _1792x1024Enum = 7,
            
            /// <summary>
            /// Enum _1024x1792Enum for 1024x1792
            /// </summary>
            [EnumMember(Value = "1024x1792")]
            _1024x1792Enum = 8
        }

        /// <summary>
        /// The size of the generated images. Must be one of &#x60;1024x1024&#x60;, &#x60;1536x1024&#x60; (landscape), &#x60;1024x1536&#x60; (portrait), or &#x60;auto&#x60; (default value) for &#x60;gpt-image-1&#x60;, one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60; for &#x60;dall-e-2&#x60;, and one of &#x60;1024x1024&#x60;, &#x60;1792x1024&#x60;, or &#x60;1024x1792&#x60; for &#x60;dall-e-3&#x60;.
        /// </summary>
        /// <value>The size of the generated images. Must be one of &#x60;1024x1024&#x60;, &#x60;1536x1024&#x60; (landscape), &#x60;1024x1536&#x60; (portrait), or &#x60;auto&#x60; (default value) for &#x60;gpt-image-1&#x60;, one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60; for &#x60;dall-e-2&#x60;, and one of &#x60;1024x1024&#x60;, &#x60;1792x1024&#x60;, or &#x60;1024x1792&#x60; for &#x60;dall-e-3&#x60;.</value>
        /* <example>1024x1024</example> */
        [DataMember(Name="size", EmitDefaultValue=true)]
        public SizeEnum Size { get; set; } = SizeEnum.AutoEnum;


        /// <summary>
        /// Control the content-moderation level for images generated by `gpt-image-1`. Must be either `low` for less restrictive filtering or `auto` (default value).
        /// </summary>
        /// <value>Control the content-moderation level for images generated by `gpt-image-1`. Must be either `low` for less restrictive filtering or `auto` (default value).</value>
        
        public enum ModerationEnum
        {
            
            /// <summary>
            /// Enum LowEnum for low
            /// </summary>
            [EnumMember(Value = "low")]
            LowEnum = 1,
            
            /// <summary>
            /// Enum AutoEnum for auto
            /// </summary>
            [EnumMember(Value = "auto")]
            AutoEnum = 2
        }

        /// <summary>
        /// Control the content-moderation level for images generated by &#x60;gpt-image-1&#x60;. Must be either &#x60;low&#x60; for less restrictive filtering or &#x60;auto&#x60; (default value).
        /// </summary>
        /// <value>Control the content-moderation level for images generated by &#x60;gpt-image-1&#x60;. Must be either &#x60;low&#x60; for less restrictive filtering or &#x60;auto&#x60; (default value).</value>
        /* <example>low</example> */
        [DataMember(Name="moderation", EmitDefaultValue=true)]
        public ModerationEnum Moderation { get; set; } = ModerationEnum.AutoEnum;


        /// <summary>
        /// Allows to set transparency for the background of the generated image(s).  This parameter is only supported for `gpt-image-1`. Must be one of  `transparent`, `opaque` or `auto` (default value). When `auto` is used, the  model will automatically determine the best background for the image.  If `transparent`, the output format needs to support transparency, so it  should be set to either `png` (default value) or `webp`. 
        /// </summary>
        /// <value>Allows to set transparency for the background of the generated image(s).  This parameter is only supported for `gpt-image-1`. Must be one of  `transparent`, `opaque` or `auto` (default value). When `auto` is used, the  model will automatically determine the best background for the image.  If `transparent`, the output format needs to support transparency, so it  should be set to either `png` (default value) or `webp`. </value>
        
        public enum BackgroundEnum
        {
            
            /// <summary>
            /// Enum TransparentEnum for transparent
            /// </summary>
            [EnumMember(Value = "transparent")]
            TransparentEnum = 1,
            
            /// <summary>
            /// Enum OpaqueEnum for opaque
            /// </summary>
            [EnumMember(Value = "opaque")]
            OpaqueEnum = 2,
            
            /// <summary>
            /// Enum AutoEnum for auto
            /// </summary>
            [EnumMember(Value = "auto")]
            AutoEnum = 3
        }

        /// <summary>
        /// Allows to set transparency for the background of the generated image(s).  This parameter is only supported for &#x60;gpt-image-1&#x60;. Must be one of  &#x60;transparent&#x60;, &#x60;opaque&#x60; or &#x60;auto&#x60; (default value). When &#x60;auto&#x60; is used, the  model will automatically determine the best background for the image.  If &#x60;transparent&#x60;, the output format needs to support transparency, so it  should be set to either &#x60;png&#x60; (default value) or &#x60;webp&#x60;. 
        /// </summary>
        /// <value>Allows to set transparency for the background of the generated image(s).  This parameter is only supported for &#x60;gpt-image-1&#x60;. Must be one of  &#x60;transparent&#x60;, &#x60;opaque&#x60; or &#x60;auto&#x60; (default value). When &#x60;auto&#x60; is used, the  model will automatically determine the best background for the image.  If &#x60;transparent&#x60;, the output format needs to support transparency, so it  should be set to either &#x60;png&#x60; (default value) or &#x60;webp&#x60;. </value>
        /* <example>transparent</example> */
        [DataMember(Name="background", EmitDefaultValue=true)]
        public BackgroundEnum Background { get; set; } = BackgroundEnum.AutoEnum;


        /// <summary>
        /// The style of the generated images. This parameter is only supported for `dall-e-3`. Must be one of `vivid` or `natural`. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images.
        /// </summary>
        /// <value>The style of the generated images. This parameter is only supported for `dall-e-3`. Must be one of `vivid` or `natural`. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images.</value>
        
        public enum StyleEnum
        {
            
            /// <summary>
            /// Enum VividEnum for vivid
            /// </summary>
            [EnumMember(Value = "vivid")]
            VividEnum = 1,
            
            /// <summary>
            /// Enum NaturalEnum for natural
            /// </summary>
            [EnumMember(Value = "natural")]
            NaturalEnum = 2
        }

        /// <summary>
        /// The style of the generated images. This parameter is only supported for &#x60;dall-e-3&#x60;. Must be one of &#x60;vivid&#x60; or &#x60;natural&#x60;. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images.
        /// </summary>
        /// <value>The style of the generated images. This parameter is only supported for &#x60;dall-e-3&#x60;. Must be one of &#x60;vivid&#x60; or &#x60;natural&#x60;. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images.</value>
        /* <example>vivid</example> */
        [DataMember(Name="style", EmitDefaultValue=true)]
        public StyleEnum Style { get; set; } = StyleEnum.VividEnum;

        /// <summary>
        /// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#end-user-ids). 
        /// </summary>
        /// <value>A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#end-user-ids). </value>
        /* <example>user-1234</example> */
        [DataMember(Name="user", EmitDefaultValue=false)]
        public string? User { get; set; }

    }
}
