/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// A custom tool that processes input using a specified format. Learn more about [custom tools](https://platform.openai.com/docs/guides/function-calling#custom-tools). 
    /// </summary>
    [DataContract]
    public partial class CustomTool 
    {

        /// <summary>
        /// The type of the custom tool. Always `custom`.
        /// </summary>
        /// <value>The type of the custom tool. Always `custom`.</value>
        
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum CustomEnum for custom
            /// </summary>
            [EnumMember(Value = "custom")]
            CustomEnum = 1
        }

        /// <summary>
        /// The type of the custom tool. Always &#x60;custom&#x60;.
        /// </summary>
        /// <value>The type of the custom tool. Always &#x60;custom&#x60;.</value>
        [Required]
        [DataMember(Name="type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// The name of the custom tool, used to identify it in tool calls.
        /// </summary>
        /// <value>The name of the custom tool, used to identify it in tool calls.</value>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Optional description of the custom tool, used to provide more context. 
        /// </summary>
        /// <value>Optional description of the custom tool, used to provide more context. </value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string? Description { get; set; }

        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [DataMember(Name="format", EmitDefaultValue=false)]
        public CustomToolFormat? Format { get; set; }

    }
}
