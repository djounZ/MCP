/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using JsonSubTypes;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// The input format for the custom tool. Default is unconstrained text. 
    /// </summary>
    [DataContract]
    public partial class CustomToolFormat 
    {

        /// <summary>
        /// Unconstrained text format. Always `text`.
        /// </summary>
        /// <value>Unconstrained text format. Always `text`.</value>
        
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum TextEnum for text
            /// </summary>
            [EnumMember(Value = "text")]
            TextEnum = 1,
            
            /// <summary>
            /// Enum GrammarEnum for grammar
            /// </summary>
            [EnumMember(Value = "grammar")]
            GrammarEnum = 2
        }

        /// <summary>
        /// Unconstrained text format. Always &#x60;text&#x60;.
        /// </summary>
        /// <value>Unconstrained text format. Always &#x60;text&#x60;.</value>
        [Required]
        [DataMember(Name="type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// The grammar definition.
        /// </summary>
        /// <value>The grammar definition.</value>
        [Required]
        [DataMember(Name="definition", EmitDefaultValue=false)]
        public string Definition { get; set; }


        /// <summary>
        /// The syntax of the grammar definition. One of `lark` or `regex`.
        /// </summary>
        /// <value>The syntax of the grammar definition. One of `lark` or `regex`.</value>
        
        public enum SyntaxEnum
        {
            
            /// <summary>
            /// Enum LarkEnum for lark
            /// </summary>
            [EnumMember(Value = "lark")]
            LarkEnum = 1,
            
            /// <summary>
            /// Enum RegexEnum for regex
            /// </summary>
            [EnumMember(Value = "regex")]
            RegexEnum = 2
        }

        /// <summary>
        /// The syntax of the grammar definition. One of &#x60;lark&#x60; or &#x60;regex&#x60;.
        /// </summary>
        /// <value>The syntax of the grammar definition. One of &#x60;lark&#x60; or &#x60;regex&#x60;.</value>
        [Required]
        [DataMember(Name="syntax", EmitDefaultValue=true)]
        public SyntaxEnum Syntax { get; set; }

    }
}
