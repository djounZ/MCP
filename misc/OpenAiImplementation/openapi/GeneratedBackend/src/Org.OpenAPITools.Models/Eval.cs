/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// An Eval object with a data source config and testing criteria. An Eval represents a task to be done for your LLM integration. Like:  - Improve the quality of my chatbot  - See how well my chatbot handles customer support  - Check if o4-mini is better at my usecase than gpt-4o 
    /// </summary>
    [DataContract]
    public partial class Eval 
    {

        /// <summary>
        /// The object type.
        /// </summary>
        /// <value>The object type.</value>
        
        public enum ObjectEnum
        {
            
            /// <summary>
            /// Enum EvalEnum for eval
            /// </summary>
            [EnumMember(Value = "eval")]
            EvalEnum = 1
        }

        /// <summary>
        /// The object type.
        /// </summary>
        /// <value>The object type.</value>
        [Required]
        [DataMember(Name="object", EmitDefaultValue=true)]
        public ObjectEnum Object { get; set; } = ObjectEnum.EvalEnum;

        /// <summary>
        /// Unique identifier for the evaluation.
        /// </summary>
        /// <value>Unique identifier for the evaluation.</value>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the evaluation.
        /// </summary>
        /// <value>The name of the evaluation.</value>
        /* <example>Chatbot effectiveness Evaluation</example> */
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets DataSourceConfig
        /// </summary>
        [Required]
        [DataMember(Name="data_source_config", EmitDefaultValue=false)]
        public EvalDataSourceConfig DataSourceConfig { get; set; }

        /// <summary>
        /// A list of testing criteria.
        /// </summary>
        /// <value>A list of testing criteria.</value>
        [Required]
        [DataMember(Name="testing_criteria", EmitDefaultValue=false)]
        public List<EvalTestingCriteriaInner> TestingCriteria { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the eval was created.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the eval was created.</value>
        [Required]
        [DataMember(Name="created_at", EmitDefaultValue=true)]
        public int CreatedAt { get; set; }

        /// <summary>
        /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.   Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters. 
        /// </summary>
        /// <value>Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.   Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters. </value>
        [Required]
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Dictionary<string, string> Metadata { get; set; }

    }
}
