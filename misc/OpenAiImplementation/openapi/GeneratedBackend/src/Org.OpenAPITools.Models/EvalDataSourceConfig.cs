/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using JsonSubTypes;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Configuration of data sources used in runs of the evaluation.
    /// </summary>
    [DataContract]
    public partial class EvalDataSourceConfig 
    {

        /// <summary>
        /// The type of data source. Always `custom`.
        /// </summary>
        /// <value>The type of data source. Always `custom`.</value>
        
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum CustomEnum for custom
            /// </summary>
            [EnumMember(Value = "custom")]
            CustomEnum = 1,
            
            /// <summary>
            /// Enum LogsEnum for logs
            /// </summary>
            [EnumMember(Value = "logs")]
            LogsEnum = 2,
            
            /// <summary>
            /// Enum StoredCompletionsEnum for stored_completions
            /// </summary>
            [EnumMember(Value = "stored_completions")]
            StoredCompletionsEnum = 3
        }

        /// <summary>
        /// The type of data source. Always &#x60;custom&#x60;.
        /// </summary>
        /// <value>The type of data source. Always &#x60;custom&#x60;.</value>
        [Required]
        [DataMember(Name="type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; } = TypeEnum.CustomEnum;

        /// <summary>
        /// The json schema for the run data source items. Learn how to build JSON schemas [here](https://json-schema.org/). 
        /// </summary>
        /// <value>The json schema for the run data source items. Learn how to build JSON schemas [here](https://json-schema.org/). </value>
        [Required]
        [DataMember(Name="schema", EmitDefaultValue=false)]
        public Dictionary<string, Object> Schema { get; set; }

        /// <summary>
        /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.   Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters. 
        /// </summary>
        /// <value>Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.   Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters. </value>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Dictionary<string, string> Metadata { get; set; }

    }
}
