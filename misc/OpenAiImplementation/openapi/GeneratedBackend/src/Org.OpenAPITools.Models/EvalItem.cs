/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// A message input to the model with a role indicating instruction following hierarchy. Instructions given with the &#x60;developer&#x60; or &#x60;system&#x60; role take precedence over instructions given with the &#x60;user&#x60; role. Messages with the &#x60;assistant&#x60; role are presumed to have been generated by the model in previous interactions. 
    /// </summary>
    [DataContract]
    public partial class EvalItem 
    {

        /// <summary>
        /// The role of the message input. One of `user`, `assistant`, `system`, or `developer`. 
        /// </summary>
        /// <value>The role of the message input. One of `user`, `assistant`, `system`, or `developer`. </value>
        
        public enum RoleEnum
        {
            
            /// <summary>
            /// Enum UserEnum for user
            /// </summary>
            [EnumMember(Value = "user")]
            UserEnum = 1,
            
            /// <summary>
            /// Enum AssistantEnum for assistant
            /// </summary>
            [EnumMember(Value = "assistant")]
            AssistantEnum = 2,
            
            /// <summary>
            /// Enum SystemEnum for system
            /// </summary>
            [EnumMember(Value = "system")]
            SystemEnum = 3,
            
            /// <summary>
            /// Enum DeveloperEnum for developer
            /// </summary>
            [EnumMember(Value = "developer")]
            DeveloperEnum = 4
        }

        /// <summary>
        /// The role of the message input. One of &#x60;user&#x60;, &#x60;assistant&#x60;, &#x60;system&#x60;, or &#x60;developer&#x60;. 
        /// </summary>
        /// <value>The role of the message input. One of &#x60;user&#x60;, &#x60;assistant&#x60;, &#x60;system&#x60;, or &#x60;developer&#x60;. </value>
        [Required]
        [DataMember(Name="role", EmitDefaultValue=true)]
        public RoleEnum Role { get; set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [Required]
        [DataMember(Name="content", EmitDefaultValue=false)]
        public EvalItemContent Content { get; set; }


        /// <summary>
        /// The type of the message input. Always `message`. 
        /// </summary>
        /// <value>The type of the message input. Always `message`. </value>
        
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum MessageEnum for message
            /// </summary>
            [EnumMember(Value = "message")]
            MessageEnum = 1
        }

        /// <summary>
        /// The type of the message input. Always &#x60;message&#x60;. 
        /// </summary>
        /// <value>The type of the message input. Always &#x60;message&#x60;. </value>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; }

    }
}
