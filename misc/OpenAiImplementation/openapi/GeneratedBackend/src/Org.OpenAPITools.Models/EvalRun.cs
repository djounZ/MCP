/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// A schema representing an evaluation run. 
    /// </summary>
    [DataContract]
    public partial class EvalRun 
    {

        /// <summary>
        /// The type of the object. Always \"eval.run\".
        /// </summary>
        /// <value>The type of the object. Always \"eval.run\".</value>
        
        public enum ObjectEnum
        {
            
            /// <summary>
            /// Enum EvalRunEnum for eval.run
            /// </summary>
            [EnumMember(Value = "eval.run")]
            EvalRunEnum = 1
        }

        /// <summary>
        /// The type of the object. Always \&quot;eval.run\&quot;.
        /// </summary>
        /// <value>The type of the object. Always \&quot;eval.run\&quot;.</value>
        [Required]
        [DataMember(Name="object", EmitDefaultValue=true)]
        public ObjectEnum Object { get; set; } = ObjectEnum.EvalRunEnum;

        /// <summary>
        /// Unique identifier for the evaluation run.
        /// </summary>
        /// <value>Unique identifier for the evaluation run.</value>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The identifier of the associated evaluation.
        /// </summary>
        /// <value>The identifier of the associated evaluation.</value>
        [Required]
        [DataMember(Name="eval_id", EmitDefaultValue=false)]
        public string EvalId { get; set; }

        /// <summary>
        /// The status of the evaluation run.
        /// </summary>
        /// <value>The status of the evaluation run.</value>
        [Required]
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// The model that is evaluated, if applicable.
        /// </summary>
        /// <value>The model that is evaluated, if applicable.</value>
        [Required]
        [DataMember(Name="model", EmitDefaultValue=false)]
        public string Model { get; set; }

        /// <summary>
        /// The name of the evaluation run.
        /// </summary>
        /// <value>The name of the evaluation run.</value>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Unix timestamp (in seconds) when the evaluation run was created.
        /// </summary>
        /// <value>Unix timestamp (in seconds) when the evaluation run was created.</value>
        [Required]
        [DataMember(Name="created_at", EmitDefaultValue=true)]
        public int CreatedAt { get; set; }

        /// <summary>
        /// The URL to the rendered evaluation run report on the UI dashboard.
        /// </summary>
        /// <value>The URL to the rendered evaluation run report on the UI dashboard.</value>
        [Required]
        [DataMember(Name="report_url", EmitDefaultValue=false)]
        public string ReportUrl { get; set; }

        /// <summary>
        /// Gets or Sets ResultCounts
        /// </summary>
        [Required]
        [DataMember(Name="result_counts", EmitDefaultValue=false)]
        public EvalRunResultCounts ResultCounts { get; set; }

        /// <summary>
        /// Usage statistics for each model during the evaluation run.
        /// </summary>
        /// <value>Usage statistics for each model during the evaluation run.</value>
        [Required]
        [DataMember(Name="per_model_usage", EmitDefaultValue=false)]
        public List<EvalRunPerModelUsageInner> PerModelUsage { get; set; }

        /// <summary>
        /// Results per testing criteria applied during the evaluation run.
        /// </summary>
        /// <value>Results per testing criteria applied during the evaluation run.</value>
        [Required]
        [DataMember(Name="per_testing_criteria_results", EmitDefaultValue=false)]
        public List<EvalRunPerTestingCriteriaResultsInner> PerTestingCriteriaResults { get; set; }

        /// <summary>
        /// Gets or Sets DataSource
        /// </summary>
        [Required]
        [DataMember(Name="data_source", EmitDefaultValue=false)]
        public EvalRunDataSource DataSource { get; set; }

        /// <summary>
        /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.   Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters. 
        /// </summary>
        /// <value>Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.   Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters. </value>
        [Required]
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [Required]
        [DataMember(Name="error", EmitDefaultValue=false)]
        public EvalApiError Error { get; set; }

    }
}
