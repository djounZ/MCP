/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Filters 
    {

        /// <summary>
        /// Specifies the comparison operator: `eq`, `ne`, `gt`, `gte`, `lt`, `lte`. - `eq`: equals - `ne`: not equal - `gt`: greater than - `gte`: greater than or equal - `lt`: less than - `lte`: less than or equal 
        /// </summary>
        /// <value>Specifies the comparison operator: `eq`, `ne`, `gt`, `gte`, `lt`, `lte`. - `eq`: equals - `ne`: not equal - `gt`: greater than - `gte`: greater than or equal - `lt`: less than - `lte`: less than or equal </value>
        
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum EqEnum for eq
            /// </summary>
            [EnumMember(Value = "eq")]
            EqEnum = 1,
            
            /// <summary>
            /// Enum NeEnum for ne
            /// </summary>
            [EnumMember(Value = "ne")]
            NeEnum = 2,
            
            /// <summary>
            /// Enum GtEnum for gt
            /// </summary>
            [EnumMember(Value = "gt")]
            GtEnum = 3,
            
            /// <summary>
            /// Enum GteEnum for gte
            /// </summary>
            [EnumMember(Value = "gte")]
            GteEnum = 4,
            
            /// <summary>
            /// Enum LtEnum for lt
            /// </summary>
            [EnumMember(Value = "lt")]
            LtEnum = 5,
            
            /// <summary>
            /// Enum LteEnum for lte
            /// </summary>
            [EnumMember(Value = "lte")]
            LteEnum = 6,
            
            /// <summary>
            /// Enum AndEnum for and
            /// </summary>
            [EnumMember(Value = "and")]
            AndEnum = 7,
            
            /// <summary>
            /// Enum OrEnum for or
            /// </summary>
            [EnumMember(Value = "or")]
            OrEnum = 8
        }

        /// <summary>
        /// Specifies the comparison operator: &#x60;eq&#x60;, &#x60;ne&#x60;, &#x60;gt&#x60;, &#x60;gte&#x60;, &#x60;lt&#x60;, &#x60;lte&#x60;. - &#x60;eq&#x60;: equals - &#x60;ne&#x60;: not equal - &#x60;gt&#x60;: greater than - &#x60;gte&#x60;: greater than or equal - &#x60;lt&#x60;: less than - &#x60;lte&#x60;: less than or equal 
        /// </summary>
        /// <value>Specifies the comparison operator: &#x60;eq&#x60;, &#x60;ne&#x60;, &#x60;gt&#x60;, &#x60;gte&#x60;, &#x60;lt&#x60;, &#x60;lte&#x60;. - &#x60;eq&#x60;: equals - &#x60;ne&#x60;: not equal - &#x60;gt&#x60;: greater than - &#x60;gte&#x60;: greater than or equal - &#x60;lt&#x60;: less than - &#x60;lte&#x60;: less than or equal </value>
        [Required]
        [DataMember(Name="type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; } = TypeEnum.EqEnum;

        /// <summary>
        /// The key to compare against the value.
        /// </summary>
        /// <value>The key to compare against the value.</value>
        [Required]
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [Required]
        [DataMember(Name="value", EmitDefaultValue=false)]
        public ComparisonFilterValue Value { get; set; }

        /// <summary>
        /// Array of filters to combine. Items can be &#x60;ComparisonFilter&#x60; or &#x60;CompoundFilter&#x60;.
        /// </summary>
        /// <value>Array of filters to combine. Items can be &#x60;ComparisonFilter&#x60; or &#x60;CompoundFilter&#x60;.</value>
        [Required]
        [DataMember(Name="filters", EmitDefaultValue=false)]
        public List<ComparisonFilter> VarFilters { get; set; }

    }
}
