/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Emitted when a partial image is available during image editing streaming. 
    /// </summary>
    [DataContract]
    public partial class ImageEditPartialImageEvent 
    {

        /// <summary>
        /// The type of the event. Always `image_edit.partial_image`. 
        /// </summary>
        /// <value>The type of the event. Always `image_edit.partial_image`. </value>
        
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum ImageEditPartialImageEnum for image_edit.partial_image
            /// </summary>
            [EnumMember(Value = "image_edit.partial_image")]
            ImageEditPartialImageEnum = 1
        }

        /// <summary>
        /// The type of the event. Always &#x60;image_edit.partial_image&#x60;. 
        /// </summary>
        /// <value>The type of the event. Always &#x60;image_edit.partial_image&#x60;. </value>
        [Required]
        [DataMember(Name="type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Base64-encoded partial image data, suitable for rendering as an image. 
        /// </summary>
        /// <value>Base64-encoded partial image data, suitable for rendering as an image. </value>
        [Required]
        [DataMember(Name="b64_json", EmitDefaultValue=false)]
        public string B64Json { get; set; }

        /// <summary>
        /// The Unix timestamp when the event was created. 
        /// </summary>
        /// <value>The Unix timestamp when the event was created. </value>
        [Required]
        [DataMember(Name="created_at", EmitDefaultValue=true)]
        public int CreatedAt { get; set; }


        /// <summary>
        /// The size of the requested edited image. 
        /// </summary>
        /// <value>The size of the requested edited image. </value>
        
        public enum SizeEnum
        {
            
            /// <summary>
            /// Enum _1024x1024Enum for 1024x1024
            /// </summary>
            [EnumMember(Value = "1024x1024")]
            _1024x1024Enum = 1,
            
            /// <summary>
            /// Enum _1024x1536Enum for 1024x1536
            /// </summary>
            [EnumMember(Value = "1024x1536")]
            _1024x1536Enum = 2,
            
            /// <summary>
            /// Enum _1536x1024Enum for 1536x1024
            /// </summary>
            [EnumMember(Value = "1536x1024")]
            _1536x1024Enum = 3,
            
            /// <summary>
            /// Enum AutoEnum for auto
            /// </summary>
            [EnumMember(Value = "auto")]
            AutoEnum = 4
        }

        /// <summary>
        /// The size of the requested edited image. 
        /// </summary>
        /// <value>The size of the requested edited image. </value>
        [Required]
        [DataMember(Name="size", EmitDefaultValue=true)]
        public SizeEnum Size { get; set; }


        /// <summary>
        /// The quality setting for the requested edited image. 
        /// </summary>
        /// <value>The quality setting for the requested edited image. </value>
        
        public enum QualityEnum
        {
            
            /// <summary>
            /// Enum LowEnum for low
            /// </summary>
            [EnumMember(Value = "low")]
            LowEnum = 1,
            
            /// <summary>
            /// Enum MediumEnum for medium
            /// </summary>
            [EnumMember(Value = "medium")]
            MediumEnum = 2,
            
            /// <summary>
            /// Enum HighEnum for high
            /// </summary>
            [EnumMember(Value = "high")]
            HighEnum = 3,
            
            /// <summary>
            /// Enum AutoEnum for auto
            /// </summary>
            [EnumMember(Value = "auto")]
            AutoEnum = 4
        }

        /// <summary>
        /// The quality setting for the requested edited image. 
        /// </summary>
        /// <value>The quality setting for the requested edited image. </value>
        [Required]
        [DataMember(Name="quality", EmitDefaultValue=true)]
        public QualityEnum Quality { get; set; }


        /// <summary>
        /// The background setting for the requested edited image. 
        /// </summary>
        /// <value>The background setting for the requested edited image. </value>
        
        public enum BackgroundEnum
        {
            
            /// <summary>
            /// Enum TransparentEnum for transparent
            /// </summary>
            [EnumMember(Value = "transparent")]
            TransparentEnum = 1,
            
            /// <summary>
            /// Enum OpaqueEnum for opaque
            /// </summary>
            [EnumMember(Value = "opaque")]
            OpaqueEnum = 2,
            
            /// <summary>
            /// Enum AutoEnum for auto
            /// </summary>
            [EnumMember(Value = "auto")]
            AutoEnum = 3
        }

        /// <summary>
        /// The background setting for the requested edited image. 
        /// </summary>
        /// <value>The background setting for the requested edited image. </value>
        [Required]
        [DataMember(Name="background", EmitDefaultValue=true)]
        public BackgroundEnum Background { get; set; }


        /// <summary>
        /// The output format for the requested edited image. 
        /// </summary>
        /// <value>The output format for the requested edited image. </value>
        
        public enum OutputFormatEnum
        {
            
            /// <summary>
            /// Enum PngEnum for png
            /// </summary>
            [EnumMember(Value = "png")]
            PngEnum = 1,
            
            /// <summary>
            /// Enum WebpEnum for webp
            /// </summary>
            [EnumMember(Value = "webp")]
            WebpEnum = 2,
            
            /// <summary>
            /// Enum JpegEnum for jpeg
            /// </summary>
            [EnumMember(Value = "jpeg")]
            JpegEnum = 3
        }

        /// <summary>
        /// The output format for the requested edited image. 
        /// </summary>
        /// <value>The output format for the requested edited image. </value>
        [Required]
        [DataMember(Name="output_format", EmitDefaultValue=true)]
        public OutputFormatEnum OutputFormat { get; set; }

        /// <summary>
        /// 0-based index for the partial image (streaming). 
        /// </summary>
        /// <value>0-based index for the partial image (streaming). </value>
        [Required]
        [DataMember(Name="partial_image_index", EmitDefaultValue=true)]
        public int PartialImageIndex { get; set; }

    }
}
