/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// A tool that generates images using a model like &#x60;gpt-image-1&#x60;. 
    /// </summary>
    [DataContract]
    public partial class ImageGenTool 
    {

        /// <summary>
        /// The type of the image generation tool. Always `image_generation`. 
        /// </summary>
        /// <value>The type of the image generation tool. Always `image_generation`. </value>
        
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum ImageGenerationEnum for image_generation
            /// </summary>
            [EnumMember(Value = "image_generation")]
            ImageGenerationEnum = 1
        }

        /// <summary>
        /// The type of the image generation tool. Always &#x60;image_generation&#x60;. 
        /// </summary>
        /// <value>The type of the image generation tool. Always &#x60;image_generation&#x60;. </value>
        [Required]
        [DataMember(Name="type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; }


        /// <summary>
        /// The image generation model to use. Default: `gpt-image-1`. 
        /// </summary>
        /// <value>The image generation model to use. Default: `gpt-image-1`. </value>
        
        public enum ModelEnum
        {
            
            /// <summary>
            /// Enum GptImage1Enum for gpt-image-1
            /// </summary>
            [EnumMember(Value = "gpt-image-1")]
            GptImage1Enum = 1
        }

        /// <summary>
        /// The image generation model to use. Default: &#x60;gpt-image-1&#x60;. 
        /// </summary>
        /// <value>The image generation model to use. Default: &#x60;gpt-image-1&#x60;. </value>
        [DataMember(Name="model", EmitDefaultValue=true)]
        public ModelEnum Model { get; set; } = ModelEnum.GptImage1Enum;


        /// <summary>
        /// The quality of the generated image. One of `low`, `medium`, `high`,  or `auto`. Default: `auto`. 
        /// </summary>
        /// <value>The quality of the generated image. One of `low`, `medium`, `high`,  or `auto`. Default: `auto`. </value>
        
        public enum QualityEnum
        {
            
            /// <summary>
            /// Enum LowEnum for low
            /// </summary>
            [EnumMember(Value = "low")]
            LowEnum = 1,
            
            /// <summary>
            /// Enum MediumEnum for medium
            /// </summary>
            [EnumMember(Value = "medium")]
            MediumEnum = 2,
            
            /// <summary>
            /// Enum HighEnum for high
            /// </summary>
            [EnumMember(Value = "high")]
            HighEnum = 3,
            
            /// <summary>
            /// Enum AutoEnum for auto
            /// </summary>
            [EnumMember(Value = "auto")]
            AutoEnum = 4
        }

        /// <summary>
        /// The quality of the generated image. One of &#x60;low&#x60;, &#x60;medium&#x60;, &#x60;high&#x60;,  or &#x60;auto&#x60;. Default: &#x60;auto&#x60;. 
        /// </summary>
        /// <value>The quality of the generated image. One of &#x60;low&#x60;, &#x60;medium&#x60;, &#x60;high&#x60;,  or &#x60;auto&#x60;. Default: &#x60;auto&#x60;. </value>
        [DataMember(Name="quality", EmitDefaultValue=true)]
        public QualityEnum Quality { get; set; } = QualityEnum.AutoEnum;


        /// <summary>
        /// The size of the generated image. One of `1024x1024`, `1024x1536`,  `1536x1024`, or `auto`. Default: `auto`. 
        /// </summary>
        /// <value>The size of the generated image. One of `1024x1024`, `1024x1536`,  `1536x1024`, or `auto`. Default: `auto`. </value>
        
        public enum SizeEnum
        {
            
            /// <summary>
            /// Enum _1024x1024Enum for 1024x1024
            /// </summary>
            [EnumMember(Value = "1024x1024")]
            _1024x1024Enum = 1,
            
            /// <summary>
            /// Enum _1024x1536Enum for 1024x1536
            /// </summary>
            [EnumMember(Value = "1024x1536")]
            _1024x1536Enum = 2,
            
            /// <summary>
            /// Enum _1536x1024Enum for 1536x1024
            /// </summary>
            [EnumMember(Value = "1536x1024")]
            _1536x1024Enum = 3,
            
            /// <summary>
            /// Enum AutoEnum for auto
            /// </summary>
            [EnumMember(Value = "auto")]
            AutoEnum = 4
        }

        /// <summary>
        /// The size of the generated image. One of &#x60;1024x1024&#x60;, &#x60;1024x1536&#x60;,  &#x60;1536x1024&#x60;, or &#x60;auto&#x60;. Default: &#x60;auto&#x60;. 
        /// </summary>
        /// <value>The size of the generated image. One of &#x60;1024x1024&#x60;, &#x60;1024x1536&#x60;,  &#x60;1536x1024&#x60;, or &#x60;auto&#x60;. Default: &#x60;auto&#x60;. </value>
        [DataMember(Name="size", EmitDefaultValue=true)]
        public SizeEnum Size { get; set; } = SizeEnum.AutoEnum;


        /// <summary>
        /// The output format of the generated image. One of `png`, `webp`, or  `jpeg`. Default: `png`. 
        /// </summary>
        /// <value>The output format of the generated image. One of `png`, `webp`, or  `jpeg`. Default: `png`. </value>
        
        public enum OutputFormatEnum
        {
            
            /// <summary>
            /// Enum PngEnum for png
            /// </summary>
            [EnumMember(Value = "png")]
            PngEnum = 1,
            
            /// <summary>
            /// Enum WebpEnum for webp
            /// </summary>
            [EnumMember(Value = "webp")]
            WebpEnum = 2,
            
            /// <summary>
            /// Enum JpegEnum for jpeg
            /// </summary>
            [EnumMember(Value = "jpeg")]
            JpegEnum = 3
        }

        /// <summary>
        /// The output format of the generated image. One of &#x60;png&#x60;, &#x60;webp&#x60;, or  &#x60;jpeg&#x60;. Default: &#x60;png&#x60;. 
        /// </summary>
        /// <value>The output format of the generated image. One of &#x60;png&#x60;, &#x60;webp&#x60;, or  &#x60;jpeg&#x60;. Default: &#x60;png&#x60;. </value>
        [DataMember(Name="output_format", EmitDefaultValue=true)]
        public OutputFormatEnum OutputFormat { get; set; } = OutputFormatEnum.PngEnum;

        /// <summary>
        /// Compression level for the output image. Default: 100. 
        /// </summary>
        /// <value>Compression level for the output image. Default: 100. </value>
        [Range(0, 100)]
        [DataMember(Name="output_compression", EmitDefaultValue=true)]
        public int? OutputCompression { get; set; } = 100;


        /// <summary>
        /// Moderation level for the generated image. Default: `auto`. 
        /// </summary>
        /// <value>Moderation level for the generated image. Default: `auto`. </value>
        
        public enum ModerationEnum
        {
            
            /// <summary>
            /// Enum AutoEnum for auto
            /// </summary>
            [EnumMember(Value = "auto")]
            AutoEnum = 1,
            
            /// <summary>
            /// Enum LowEnum for low
            /// </summary>
            [EnumMember(Value = "low")]
            LowEnum = 2
        }

        /// <summary>
        /// Moderation level for the generated image. Default: &#x60;auto&#x60;. 
        /// </summary>
        /// <value>Moderation level for the generated image. Default: &#x60;auto&#x60;. </value>
        [DataMember(Name="moderation", EmitDefaultValue=true)]
        public ModerationEnum Moderation { get; set; } = ModerationEnum.AutoEnum;


        /// <summary>
        /// Background type for the generated image. One of `transparent`,  `opaque`, or `auto`. Default: `auto`. 
        /// </summary>
        /// <value>Background type for the generated image. One of `transparent`,  `opaque`, or `auto`. Default: `auto`. </value>
        
        public enum BackgroundEnum
        {
            
            /// <summary>
            /// Enum TransparentEnum for transparent
            /// </summary>
            [EnumMember(Value = "transparent")]
            TransparentEnum = 1,
            
            /// <summary>
            /// Enum OpaqueEnum for opaque
            /// </summary>
            [EnumMember(Value = "opaque")]
            OpaqueEnum = 2,
            
            /// <summary>
            /// Enum AutoEnum for auto
            /// </summary>
            [EnumMember(Value = "auto")]
            AutoEnum = 3
        }

        /// <summary>
        /// Background type for the generated image. One of &#x60;transparent&#x60;,  &#x60;opaque&#x60;, or &#x60;auto&#x60;. Default: &#x60;auto&#x60;. 
        /// </summary>
        /// <value>Background type for the generated image. One of &#x60;transparent&#x60;,  &#x60;opaque&#x60;, or &#x60;auto&#x60;. Default: &#x60;auto&#x60;. </value>
        [DataMember(Name="background", EmitDefaultValue=true)]
        public BackgroundEnum Background { get; set; } = BackgroundEnum.AutoEnum;

        /// <summary>
        /// Gets or Sets InputFidelity
        /// </summary>
        [DataMember(Name="input_fidelity", EmitDefaultValue=true)]
        public ImageInputFidelity InputFidelity { get; set; }

        /// <summary>
        /// Gets or Sets InputImageMask
        /// </summary>
        [DataMember(Name="input_image_mask", EmitDefaultValue=false)]
        public ImageGenToolInputImageMask? InputImageMask { get; set; }

        /// <summary>
        /// Number of partial images to generate in streaming mode, from 0 (default value) to 3. 
        /// </summary>
        /// <value>Number of partial images to generate in streaming mode, from 0 (default value) to 3. </value>
        [Range(0, 3)]
        [DataMember(Name="partial_images", EmitDefaultValue=true)]
        public int? PartialImages { get; set; } = 0;

    }
}
