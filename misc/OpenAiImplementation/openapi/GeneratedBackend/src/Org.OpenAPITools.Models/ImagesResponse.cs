/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// The response from the image generation endpoint.
    /// </summary>
    [DataContract]
    public partial class ImagesResponse 
    {
        /// <summary>
        /// The Unix timestamp (in seconds) of when the image was created.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) of when the image was created.</value>
        [Required]
        [DataMember(Name="created", EmitDefaultValue=true)]
        public int Created { get; set; }

        /// <summary>
        /// The list of generated images.
        /// </summary>
        /// <value>The list of generated images.</value>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public List<Image> Data { get; set; }


        /// <summary>
        /// The background parameter used for the image generation. Either `transparent` or `opaque`.
        /// </summary>
        /// <value>The background parameter used for the image generation. Either `transparent` or `opaque`.</value>
        
        public enum BackgroundEnum
        {
            
            /// <summary>
            /// Enum TransparentEnum for transparent
            /// </summary>
            [EnumMember(Value = "transparent")]
            TransparentEnum = 1,
            
            /// <summary>
            /// Enum OpaqueEnum for opaque
            /// </summary>
            [EnumMember(Value = "opaque")]
            OpaqueEnum = 2
        }

        /// <summary>
        /// The background parameter used for the image generation. Either &#x60;transparent&#x60; or &#x60;opaque&#x60;.
        /// </summary>
        /// <value>The background parameter used for the image generation. Either &#x60;transparent&#x60; or &#x60;opaque&#x60;.</value>
        [DataMember(Name="background", EmitDefaultValue=true)]
        public BackgroundEnum Background { get; set; }


        /// <summary>
        /// The output format of the image generation. Either `png`, `webp`, or `jpeg`.
        /// </summary>
        /// <value>The output format of the image generation. Either `png`, `webp`, or `jpeg`.</value>
        
        public enum OutputFormatEnum
        {
            
            /// <summary>
            /// Enum PngEnum for png
            /// </summary>
            [EnumMember(Value = "png")]
            PngEnum = 1,
            
            /// <summary>
            /// Enum WebpEnum for webp
            /// </summary>
            [EnumMember(Value = "webp")]
            WebpEnum = 2,
            
            /// <summary>
            /// Enum JpegEnum for jpeg
            /// </summary>
            [EnumMember(Value = "jpeg")]
            JpegEnum = 3
        }

        /// <summary>
        /// The output format of the image generation. Either &#x60;png&#x60;, &#x60;webp&#x60;, or &#x60;jpeg&#x60;.
        /// </summary>
        /// <value>The output format of the image generation. Either &#x60;png&#x60;, &#x60;webp&#x60;, or &#x60;jpeg&#x60;.</value>
        [DataMember(Name="output_format", EmitDefaultValue=true)]
        public OutputFormatEnum OutputFormat { get; set; }


        /// <summary>
        /// The size of the image generated. Either `1024x1024`, `1024x1536`, or `1536x1024`.
        /// </summary>
        /// <value>The size of the image generated. Either `1024x1024`, `1024x1536`, or `1536x1024`.</value>
        
        public enum SizeEnum
        {
            
            /// <summary>
            /// Enum _1024x1024Enum for 1024x1024
            /// </summary>
            [EnumMember(Value = "1024x1024")]
            _1024x1024Enum = 1,
            
            /// <summary>
            /// Enum _1024x1536Enum for 1024x1536
            /// </summary>
            [EnumMember(Value = "1024x1536")]
            _1024x1536Enum = 2,
            
            /// <summary>
            /// Enum _1536x1024Enum for 1536x1024
            /// </summary>
            [EnumMember(Value = "1536x1024")]
            _1536x1024Enum = 3
        }

        /// <summary>
        /// The size of the image generated. Either &#x60;1024x1024&#x60;, &#x60;1024x1536&#x60;, or &#x60;1536x1024&#x60;.
        /// </summary>
        /// <value>The size of the image generated. Either &#x60;1024x1024&#x60;, &#x60;1024x1536&#x60;, or &#x60;1536x1024&#x60;.</value>
        [DataMember(Name="size", EmitDefaultValue=true)]
        public SizeEnum Size { get; set; }


        /// <summary>
        /// The quality of the image generated. Either `low`, `medium`, or `high`.
        /// </summary>
        /// <value>The quality of the image generated. Either `low`, `medium`, or `high`.</value>
        
        public enum QualityEnum
        {
            
            /// <summary>
            /// Enum LowEnum for low
            /// </summary>
            [EnumMember(Value = "low")]
            LowEnum = 1,
            
            /// <summary>
            /// Enum MediumEnum for medium
            /// </summary>
            [EnumMember(Value = "medium")]
            MediumEnum = 2,
            
            /// <summary>
            /// Enum HighEnum for high
            /// </summary>
            [EnumMember(Value = "high")]
            HighEnum = 3
        }

        /// <summary>
        /// The quality of the image generated. Either &#x60;low&#x60;, &#x60;medium&#x60;, or &#x60;high&#x60;.
        /// </summary>
        /// <value>The quality of the image generated. Either &#x60;low&#x60;, &#x60;medium&#x60;, or &#x60;high&#x60;.</value>
        [DataMember(Name="quality", EmitDefaultValue=true)]
        public QualityEnum Quality { get; set; }

        /// <summary>
        /// Gets or Sets Usage
        /// </summary>
        [DataMember(Name="usage", EmitDefaultValue=false)]
        public ImageGenUsage? Usage { get; set; }

    }
}
