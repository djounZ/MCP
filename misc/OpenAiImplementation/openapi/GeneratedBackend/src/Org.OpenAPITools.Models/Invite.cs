/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Represents an individual &#x60;invite&#x60; to the organization.
    /// </summary>
    [DataContract]
    public partial class Invite 
    {

        /// <summary>
        /// The object type, which is always `organization.invite`
        /// </summary>
        /// <value>The object type, which is always `organization.invite`</value>
        
        public enum ObjectEnum
        {
            
            /// <summary>
            /// Enum OrganizationInviteEnum for organization.invite
            /// </summary>
            [EnumMember(Value = "organization.invite")]
            OrganizationInviteEnum = 1
        }

        /// <summary>
        /// The object type, which is always &#x60;organization.invite&#x60;
        /// </summary>
        /// <value>The object type, which is always &#x60;organization.invite&#x60;</value>
        [Required]
        [DataMember(Name="object", EmitDefaultValue=true)]
        public ObjectEnum Object { get; set; }

        /// <summary>
        /// The identifier, which can be referenced in API endpoints
        /// </summary>
        /// <value>The identifier, which can be referenced in API endpoints</value>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The email address of the individual to whom the invite was sent
        /// </summary>
        /// <value>The email address of the individual to whom the invite was sent</value>
        [Required]
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }


        /// <summary>
        /// `owner` or `reader`
        /// </summary>
        /// <value>`owner` or `reader`</value>
        
        public enum RoleEnum
        {
            
            /// <summary>
            /// Enum OwnerEnum for owner
            /// </summary>
            [EnumMember(Value = "owner")]
            OwnerEnum = 1,
            
            /// <summary>
            /// Enum ReaderEnum for reader
            /// </summary>
            [EnumMember(Value = "reader")]
            ReaderEnum = 2
        }

        /// <summary>
        /// &#x60;owner&#x60; or &#x60;reader&#x60;
        /// </summary>
        /// <value>&#x60;owner&#x60; or &#x60;reader&#x60;</value>
        [Required]
        [DataMember(Name="role", EmitDefaultValue=true)]
        public RoleEnum Role { get; set; }


        /// <summary>
        /// `accepted`,`expired`, or `pending`
        /// </summary>
        /// <value>`accepted`,`expired`, or `pending`</value>
        
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum AcceptedEnum for accepted
            /// </summary>
            [EnumMember(Value = "accepted")]
            AcceptedEnum = 1,
            
            /// <summary>
            /// Enum ExpiredEnum for expired
            /// </summary>
            [EnumMember(Value = "expired")]
            ExpiredEnum = 2,
            
            /// <summary>
            /// Enum PendingEnum for pending
            /// </summary>
            [EnumMember(Value = "pending")]
            PendingEnum = 3
        }

        /// <summary>
        /// &#x60;accepted&#x60;,&#x60;expired&#x60;, or &#x60;pending&#x60;
        /// </summary>
        /// <value>&#x60;accepted&#x60;,&#x60;expired&#x60;, or &#x60;pending&#x60;</value>
        [Required]
        [DataMember(Name="status", EmitDefaultValue=true)]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) of when the invite was sent.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) of when the invite was sent.</value>
        [Required]
        [DataMember(Name="invited_at", EmitDefaultValue=true)]
        public int InvitedAt { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) of when the invite expires.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) of when the invite expires.</value>
        [Required]
        [DataMember(Name="expires_at", EmitDefaultValue=true)]
        public int ExpiresAt { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) of when the invite was accepted.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) of when the invite was accepted.</value>
        [DataMember(Name="accepted_at", EmitDefaultValue=true)]
        public int? AcceptedAt { get; set; }

        /// <summary>
        /// The projects that were granted membership upon acceptance of the invite.
        /// </summary>
        /// <value>The projects that were granted membership upon acceptance of the invite.</value>
        [DataMember(Name="projects", EmitDefaultValue=false)]
        public List<InviteProjectsInner> Projects { get; set; }

    }
}
