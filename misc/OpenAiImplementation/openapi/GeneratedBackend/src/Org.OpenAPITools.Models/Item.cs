/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using JsonSubTypes;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Content item used to generate a response. 
    /// </summary>
    [DataContract]
    public partial class Item 
    {

        /// <summary>
        /// The type of the message input. Always set to `message`. 
        /// </summary>
        /// <value>The type of the message input. Always set to `message`. </value>
        
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum MessageEnum for message
            /// </summary>
            [EnumMember(Value = "message")]
            MessageEnum = 1,
            
            /// <summary>
            /// Enum FileSearchCallEnum for file_search_call
            /// </summary>
            [EnumMember(Value = "file_search_call")]
            FileSearchCallEnum = 2,
            
            /// <summary>
            /// Enum ComputerCallEnum for computer_call
            /// </summary>
            [EnumMember(Value = "computer_call")]
            ComputerCallEnum = 3,
            
            /// <summary>
            /// Enum ComputerCallOutputEnum for computer_call_output
            /// </summary>
            [EnumMember(Value = "computer_call_output")]
            ComputerCallOutputEnum = 4,
            
            /// <summary>
            /// Enum WebSearchCallEnum for web_search_call
            /// </summary>
            [EnumMember(Value = "web_search_call")]
            WebSearchCallEnum = 5,
            
            /// <summary>
            /// Enum FunctionCallEnum for function_call
            /// </summary>
            [EnumMember(Value = "function_call")]
            FunctionCallEnum = 6,
            
            /// <summary>
            /// Enum FunctionCallOutputEnum for function_call_output
            /// </summary>
            [EnumMember(Value = "function_call_output")]
            FunctionCallOutputEnum = 7,
            
            /// <summary>
            /// Enum ReasoningEnum for reasoning
            /// </summary>
            [EnumMember(Value = "reasoning")]
            ReasoningEnum = 8,
            
            /// <summary>
            /// Enum ImageGenerationCallEnum for image_generation_call
            /// </summary>
            [EnumMember(Value = "image_generation_call")]
            ImageGenerationCallEnum = 9,
            
            /// <summary>
            /// Enum CodeInterpreterCallEnum for code_interpreter_call
            /// </summary>
            [EnumMember(Value = "code_interpreter_call")]
            CodeInterpreterCallEnum = 10,
            
            /// <summary>
            /// Enum LocalShellCallEnum for local_shell_call
            /// </summary>
            [EnumMember(Value = "local_shell_call")]
            LocalShellCallEnum = 11,
            
            /// <summary>
            /// Enum LocalShellCallOutputEnum for local_shell_call_output
            /// </summary>
            [EnumMember(Value = "local_shell_call_output")]
            LocalShellCallOutputEnum = 12,
            
            /// <summary>
            /// Enum McpListToolsEnum for mcp_list_tools
            /// </summary>
            [EnumMember(Value = "mcp_list_tools")]
            McpListToolsEnum = 13,
            
            /// <summary>
            /// Enum McpApprovalRequestEnum for mcp_approval_request
            /// </summary>
            [EnumMember(Value = "mcp_approval_request")]
            McpApprovalRequestEnum = 14,
            
            /// <summary>
            /// Enum McpApprovalResponseEnum for mcp_approval_response
            /// </summary>
            [EnumMember(Value = "mcp_approval_response")]
            McpApprovalResponseEnum = 15,
            
            /// <summary>
            /// Enum McpCallEnum for mcp_call
            /// </summary>
            [EnumMember(Value = "mcp_call")]
            McpCallEnum = 16,
            
            /// <summary>
            /// Enum CustomToolCallOutputEnum for custom_tool_call_output
            /// </summary>
            [EnumMember(Value = "custom_tool_call_output")]
            CustomToolCallOutputEnum = 17,
            
            /// <summary>
            /// Enum CustomToolCallEnum for custom_tool_call
            /// </summary>
            [EnumMember(Value = "custom_tool_call")]
            CustomToolCallEnum = 18
        }

        /// <summary>
        /// The type of the message input. Always set to &#x60;message&#x60;. 
        /// </summary>
        /// <value>The type of the message input. Always set to &#x60;message&#x60;. </value>
        [Required]
        [DataMember(Name="type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; }


        /// <summary>
        /// The role of the output message. Always `assistant`. 
        /// </summary>
        /// <value>The role of the output message. Always `assistant`. </value>
        
        public enum RoleEnum
        {
            
            /// <summary>
            /// Enum AssistantEnum for assistant
            /// </summary>
            [EnumMember(Value = "assistant")]
            AssistantEnum = 1
        }

        /// <summary>
        /// The role of the output message. Always &#x60;assistant&#x60;. 
        /// </summary>
        /// <value>The role of the output message. Always &#x60;assistant&#x60;. </value>
        [Required]
        [DataMember(Name="role", EmitDefaultValue=true)]
        public RoleEnum Role { get; set; }


        /// <summary>
        /// The status of the item. One of `in_progress`, `completed`, or `incomplete`. 
        /// </summary>
        /// <value>The status of the item. One of `in_progress`, `completed`, or `incomplete`. </value>
        
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum InProgressEnum for in_progress
            /// </summary>
            [EnumMember(Value = "in_progress")]
            InProgressEnum = 1,
            
            /// <summary>
            /// Enum CompletedEnum for completed
            /// </summary>
            [EnumMember(Value = "completed")]
            CompletedEnum = 2,
            
            /// <summary>
            /// Enum IncompleteEnum for incomplete
            /// </summary>
            [EnumMember(Value = "incomplete")]
            IncompleteEnum = 3
        }

        /// <summary>
        /// The status of the item. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, or &#x60;incomplete&#x60;. 
        /// </summary>
        /// <value>The status of the item. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, or &#x60;incomplete&#x60;. </value>
        [Required]
        [DataMember(Name="status", EmitDefaultValue=true)]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// Reasoning text content. 
        /// </summary>
        /// <value>Reasoning text content. </value>
        [Required]
        [DataMember(Name="content", EmitDefaultValue=false)]
        public List<ReasoningItemContentInner> Content { get; set; }

        /// <summary>
        /// The unique ID of the custom tool call in the OpenAI platform. 
        /// </summary>
        /// <value>The unique ID of the custom tool call in the OpenAI platform. </value>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The queries used to search for files. 
        /// </summary>
        /// <value>The queries used to search for files. </value>
        [Required]
        [DataMember(Name="queries", EmitDefaultValue=false)]
        public List<string> Queries { get; set; }

        /// <summary>
        /// The results of the file search tool call. 
        /// </summary>
        /// <value>The results of the file search tool call. </value>
        [DataMember(Name="results", EmitDefaultValue=false)]
        public List<FileSearchToolCallResultsInner> Results { get; set; }

        /// <summary>
        /// An identifier used to map this custom tool call to a tool call output. 
        /// </summary>
        /// <value>An identifier used to map this custom tool call to a tool call output. </value>
        [Required]
        [DataMember(Name="call_id", EmitDefaultValue=false)]
        public string CallId { get; set; }

        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [Required]
        [DataMember(Name="action", EmitDefaultValue=false)]
        public LocalShellExecAction Action { get; set; }

        /// <summary>
        /// The pending safety checks for the computer call. 
        /// </summary>
        /// <value>The pending safety checks for the computer call. </value>
        [Required]
        [DataMember(Name="pending_safety_checks", EmitDefaultValue=false)]
        public List<ComputerToolCallSafetyCheck> PendingSafetyChecks { get; set; }

        /// <summary>
        /// The output from the custom tool call generated by your code. 
        /// </summary>
        /// <value>The output from the custom tool call generated by your code. </value>
        [Required]
        [DataMember(Name="output", EmitDefaultValue=false)]
        public string Output { get; set; }

        /// <summary>
        /// The safety checks reported by the API that have been acknowledged by the developer.
        /// </summary>
        /// <value>The safety checks reported by the API that have been acknowledged by the developer.</value>
        [DataMember(Name="acknowledged_safety_checks", EmitDefaultValue=false)]
        public List<ComputerCallSafetyCheckParam> AcknowledgedSafetyChecks { get; set; }

        /// <summary>
        /// The name of the custom tool being called. 
        /// </summary>
        /// <value>The name of the custom tool being called. </value>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// A JSON string of the arguments passed to the tool. 
        /// </summary>
        /// <value>A JSON string of the arguments passed to the tool. </value>
        [Required]
        [DataMember(Name="arguments", EmitDefaultValue=false)]
        public string Arguments { get; set; }

        /// <summary>
        /// The encrypted content of the reasoning item - populated when a response is generated with &#x60;reasoning.encrypted_content&#x60; in the &#x60;include&#x60; parameter. 
        /// </summary>
        /// <value>The encrypted content of the reasoning item - populated when a response is generated with &#x60;reasoning.encrypted_content&#x60; in the &#x60;include&#x60; parameter. </value>
        [DataMember(Name="encrypted_content", EmitDefaultValue=false)]
        public string? EncryptedContent { get; set; }

        /// <summary>
        /// Reasoning summary content. 
        /// </summary>
        /// <value>Reasoning summary content. </value>
        [Required]
        [DataMember(Name="summary", EmitDefaultValue=false)]
        public List<ReasoningItemSummaryInner> Summary { get; set; }

        /// <summary>
        /// The generated image encoded in base64. 
        /// </summary>
        /// <value>The generated image encoded in base64. </value>
        [Required]
        [DataMember(Name="result", EmitDefaultValue=false)]
        public string Result { get; set; }

        /// <summary>
        /// The ID of the container used to run the code. 
        /// </summary>
        /// <value>The ID of the container used to run the code. </value>
        [Required]
        [DataMember(Name="container_id", EmitDefaultValue=false)]
        public string ContainerId { get; set; }

        /// <summary>
        /// The code to run, or null if not available. 
        /// </summary>
        /// <value>The code to run, or null if not available. </value>
        [Required]
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// The outputs generated by the code interpreter, such as logs or images.  Can be null if no outputs are available. 
        /// </summary>
        /// <value>The outputs generated by the code interpreter, such as logs or images.  Can be null if no outputs are available. </value>
        [Required]
        [DataMember(Name="outputs", EmitDefaultValue=false)]
        public List<CodeInterpreterToolCallOutputsInner> Outputs { get; set; }

        /// <summary>
        /// The label of the MCP server running the tool. 
        /// </summary>
        /// <value>The label of the MCP server running the tool. </value>
        [Required]
        [DataMember(Name="server_label", EmitDefaultValue=false)]
        public string ServerLabel { get; set; }

        /// <summary>
        /// The tools available on the server. 
        /// </summary>
        /// <value>The tools available on the server. </value>
        [Required]
        [DataMember(Name="tools", EmitDefaultValue=false)]
        public List<MCPListToolsTool> Tools { get; set; }

        /// <summary>
        /// The error from the tool call, if any. 
        /// </summary>
        /// <value>The error from the tool call, if any. </value>
        [DataMember(Name="error", EmitDefaultValue=false)]
        public string? Error { get; set; }

        /// <summary>
        /// The ID of the approval request being answered. 
        /// </summary>
        /// <value>The ID of the approval request being answered. </value>
        [Required]
        [DataMember(Name="approval_request_id", EmitDefaultValue=false)]
        public string ApprovalRequestId { get; set; }

        /// <summary>
        /// Whether the request was approved. 
        /// </summary>
        /// <value>Whether the request was approved. </value>
        [Required]
        [DataMember(Name="approve", EmitDefaultValue=true)]
        public bool Approve { get; set; }

        /// <summary>
        /// Optional reason for the decision. 
        /// </summary>
        /// <value>Optional reason for the decision. </value>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public string? Reason { get; set; }

        /// <summary>
        /// The input for the custom tool call generated by the model. 
        /// </summary>
        /// <value>The input for the custom tool call generated by the model. </value>
        [Required]
        [DataMember(Name="input", EmitDefaultValue=false)]
        public string Input { get; set; }

    }
}
