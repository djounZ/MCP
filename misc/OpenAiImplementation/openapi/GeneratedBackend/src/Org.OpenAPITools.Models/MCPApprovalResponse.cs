/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// A response to an MCP approval request. 
    /// </summary>
    [DataContract]
    public partial class MCPApprovalResponse 
    {

        /// <summary>
        /// The type of the item. Always `mcp_approval_response`. 
        /// </summary>
        /// <value>The type of the item. Always `mcp_approval_response`. </value>
        
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum McpApprovalResponseEnum for mcp_approval_response
            /// </summary>
            [EnumMember(Value = "mcp_approval_response")]
            McpApprovalResponseEnum = 1
        }

        /// <summary>
        /// The type of the item. Always &#x60;mcp_approval_response&#x60;. 
        /// </summary>
        /// <value>The type of the item. Always &#x60;mcp_approval_response&#x60;. </value>
        [Required]
        [DataMember(Name="type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// The unique ID of the approval response 
        /// </summary>
        /// <value>The unique ID of the approval response </value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string? Id { get; set; }

        /// <summary>
        /// The ID of the approval request being answered. 
        /// </summary>
        /// <value>The ID of the approval request being answered. </value>
        [Required]
        [DataMember(Name="approval_request_id", EmitDefaultValue=false)]
        public string ApprovalRequestId { get; set; }

        /// <summary>
        /// Whether the request was approved. 
        /// </summary>
        /// <value>Whether the request was approved. </value>
        [Required]
        [DataMember(Name="approve", EmitDefaultValue=true)]
        public bool Approve { get; set; }

        /// <summary>
        /// Optional reason for the decision. 
        /// </summary>
        /// <value>Optional reason for the decision. </value>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public string? Reason { get; set; }

    }
}
