/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Give the model access to additional tools via remote Model Context Protocol  (MCP) servers. [Learn more about MCP](https://platform.openai.com/docs/guides/tools-remote-mcp). 
    /// </summary>
    [DataContract]
    public partial class MCPTool 
    {

        /// <summary>
        /// The type of the MCP tool. Always `mcp`.
        /// </summary>
        /// <value>The type of the MCP tool. Always `mcp`.</value>
        
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum McpEnum for mcp
            /// </summary>
            [EnumMember(Value = "mcp")]
            McpEnum = 1
        }

        /// <summary>
        /// The type of the MCP tool. Always &#x60;mcp&#x60;.
        /// </summary>
        /// <value>The type of the MCP tool. Always &#x60;mcp&#x60;.</value>
        [Required]
        [DataMember(Name="type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// A label for this MCP server, used to identify it in tool calls. 
        /// </summary>
        /// <value>A label for this MCP server, used to identify it in tool calls. </value>
        [Required]
        [DataMember(Name="server_label", EmitDefaultValue=false)]
        public string ServerLabel { get; set; }

        /// <summary>
        /// The URL for the MCP server. 
        /// </summary>
        /// <value>The URL for the MCP server. </value>
        [Required]
        [DataMember(Name="server_url", EmitDefaultValue=false)]
        public string ServerUrl { get; set; }

        /// <summary>
        /// Optional description of the MCP server, used to provide more context. 
        /// </summary>
        /// <value>Optional description of the MCP server, used to provide more context. </value>
        [DataMember(Name="server_description", EmitDefaultValue=false)]
        public string? ServerDescription { get; set; }

        /// <summary>
        /// Optional HTTP headers to send to the MCP server. Use for authentication or other purposes. 
        /// </summary>
        /// <value>Optional HTTP headers to send to the MCP server. Use for authentication or other purposes. </value>
        [DataMember(Name="headers", EmitDefaultValue=false)]
        public Dictionary<string, string> Headers { get; set; }

        /// <summary>
        /// Gets or Sets AllowedTools
        /// </summary>
        [DataMember(Name="allowed_tools", EmitDefaultValue=false)]
        public MCPToolAllowedTools? AllowedTools { get; set; }

        /// <summary>
        /// Gets or Sets RequireApproval
        /// </summary>
        [DataMember(Name="require_approval", EmitDefaultValue=false)]
        public MCPToolRequireApproval? RequireApproval { get; set; }

    }
}
