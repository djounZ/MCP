/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Represents a message within a [thread](https://platform.openai.com/docs/api-reference/threads).
    /// </summary>
    [DataContract]
    public partial class MessageObject 
    {
        /// <summary>
        /// The identifier, which can be referenced in API endpoints.
        /// </summary>
        /// <value>The identifier, which can be referenced in API endpoints.</value>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }


        /// <summary>
        /// The object type, which is always `thread.message`.
        /// </summary>
        /// <value>The object type, which is always `thread.message`.</value>
        
        public enum ObjectEnum
        {
            
            /// <summary>
            /// Enum ThreadMessageEnum for thread.message
            /// </summary>
            [EnumMember(Value = "thread.message")]
            ThreadMessageEnum = 1
        }

        /// <summary>
        /// The object type, which is always &#x60;thread.message&#x60;.
        /// </summary>
        /// <value>The object type, which is always &#x60;thread.message&#x60;.</value>
        [Required]
        [DataMember(Name="object", EmitDefaultValue=true)]
        public ObjectEnum Object { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the message was created.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the message was created.</value>
        [Required]
        [DataMember(Name="created_at", EmitDefaultValue=true)]
        public int CreatedAt { get; set; }

        /// <summary>
        /// The [thread](https://platform.openai.com/docs/api-reference/threads) ID that this message belongs to.
        /// </summary>
        /// <value>The [thread](https://platform.openai.com/docs/api-reference/threads) ID that this message belongs to.</value>
        [Required]
        [DataMember(Name="thread_id", EmitDefaultValue=false)]
        public string ThreadId { get; set; }


        /// <summary>
        /// The status of the message, which can be either `in_progress`, `incomplete`, or `completed`.
        /// </summary>
        /// <value>The status of the message, which can be either `in_progress`, `incomplete`, or `completed`.</value>
        
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum InProgressEnum for in_progress
            /// </summary>
            [EnumMember(Value = "in_progress")]
            InProgressEnum = 1,
            
            /// <summary>
            /// Enum IncompleteEnum for incomplete
            /// </summary>
            [EnumMember(Value = "incomplete")]
            IncompleteEnum = 2,
            
            /// <summary>
            /// Enum CompletedEnum for completed
            /// </summary>
            [EnumMember(Value = "completed")]
            CompletedEnum = 3
        }

        /// <summary>
        /// The status of the message, which can be either &#x60;in_progress&#x60;, &#x60;incomplete&#x60;, or &#x60;completed&#x60;.
        /// </summary>
        /// <value>The status of the message, which can be either &#x60;in_progress&#x60;, &#x60;incomplete&#x60;, or &#x60;completed&#x60;.</value>
        [Required]
        [DataMember(Name="status", EmitDefaultValue=true)]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// Gets or Sets IncompleteDetails
        /// </summary>
        [Required]
        [DataMember(Name="incomplete_details", EmitDefaultValue=false)]
        public MessageObjectIncompleteDetails IncompleteDetails { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the message was completed.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the message was completed.</value>
        [Required]
        [DataMember(Name="completed_at", EmitDefaultValue=true)]
        public int CompletedAt { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the message was marked as incomplete.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the message was marked as incomplete.</value>
        [Required]
        [DataMember(Name="incomplete_at", EmitDefaultValue=true)]
        public int IncompleteAt { get; set; }


        /// <summary>
        /// The entity that produced the message. One of `user` or `assistant`.
        /// </summary>
        /// <value>The entity that produced the message. One of `user` or `assistant`.</value>
        
        public enum RoleEnum
        {
            
            /// <summary>
            /// Enum UserEnum for user
            /// </summary>
            [EnumMember(Value = "user")]
            UserEnum = 1,
            
            /// <summary>
            /// Enum AssistantEnum for assistant
            /// </summary>
            [EnumMember(Value = "assistant")]
            AssistantEnum = 2
        }

        /// <summary>
        /// The entity that produced the message. One of &#x60;user&#x60; or &#x60;assistant&#x60;.
        /// </summary>
        /// <value>The entity that produced the message. One of &#x60;user&#x60; or &#x60;assistant&#x60;.</value>
        [Required]
        [DataMember(Name="role", EmitDefaultValue=true)]
        public RoleEnum Role { get; set; }

        /// <summary>
        /// The content of the message in array of text and/or images.
        /// </summary>
        /// <value>The content of the message in array of text and/or images.</value>
        [Required]
        [DataMember(Name="content", EmitDefaultValue=false)]
        public List<MessageContent> Content { get; set; }

        /// <summary>
        /// If applicable, the ID of the [assistant](https://platform.openai.com/docs/api-reference/assistants) that authored this message.
        /// </summary>
        /// <value>If applicable, the ID of the [assistant](https://platform.openai.com/docs/api-reference/assistants) that authored this message.</value>
        [Required]
        [DataMember(Name="assistant_id", EmitDefaultValue=false)]
        public string AssistantId { get; set; }

        /// <summary>
        /// The ID of the [run](https://platform.openai.com/docs/api-reference/runs) associated with the creation of this message. Value is &#x60;null&#x60; when messages are created manually using the create message or create thread endpoints.
        /// </summary>
        /// <value>The ID of the [run](https://platform.openai.com/docs/api-reference/runs) associated with the creation of this message. Value is &#x60;null&#x60; when messages are created manually using the create message or create thread endpoints.</value>
        [Required]
        [DataMember(Name="run_id", EmitDefaultValue=false)]
        public string RunId { get; set; }

        /// <summary>
        /// A list of files attached to the message, and the tools they were added to.
        /// </summary>
        /// <value>A list of files attached to the message, and the tools they were added to.</value>
        [Required]
        [DataMember(Name="attachments", EmitDefaultValue=false)]
        public List<MessageObjectAttachmentsInner> Attachments { get; set; }

        /// <summary>
        /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.   Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters. 
        /// </summary>
        /// <value>Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.   Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters. </value>
        [Required]
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Dictionary<string, string> Metadata { get; set; }

    }
}
