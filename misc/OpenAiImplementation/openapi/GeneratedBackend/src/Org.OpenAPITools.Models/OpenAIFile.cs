/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// The &#x60;File&#x60; object represents a document that has been uploaded to OpenAI.
    /// </summary>
    [DataContract]
    public partial class OpenAIFile 
    {
        /// <summary>
        /// The file identifier, which can be referenced in the API endpoints.
        /// </summary>
        /// <value>The file identifier, which can be referenced in the API endpoints.</value>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The size of the file, in bytes.
        /// </summary>
        /// <value>The size of the file, in bytes.</value>
        [Required]
        [DataMember(Name="bytes", EmitDefaultValue=true)]
        public int Bytes { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the file was created.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the file was created.</value>
        [Required]
        [DataMember(Name="created_at", EmitDefaultValue=true)]
        public int CreatedAt { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the file will expire.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the file will expire.</value>
        [DataMember(Name="expires_at", EmitDefaultValue=true)]
        public int? ExpiresAt { get; set; }

        /// <summary>
        /// The name of the file.
        /// </summary>
        /// <value>The name of the file.</value>
        [Required]
        [DataMember(Name="filename", EmitDefaultValue=false)]
        public string Filename { get; set; }


        /// <summary>
        /// The object type, which is always `file`.
        /// </summary>
        /// <value>The object type, which is always `file`.</value>
        
        public enum ObjectEnum
        {
            
            /// <summary>
            /// Enum FileEnum for file
            /// </summary>
            [EnumMember(Value = "file")]
            FileEnum = 1
        }

        /// <summary>
        /// The object type, which is always &#x60;file&#x60;.
        /// </summary>
        /// <value>The object type, which is always &#x60;file&#x60;.</value>
        [Required]
        [DataMember(Name="object", EmitDefaultValue=true)]
        public ObjectEnum Object { get; set; }


        /// <summary>
        /// The intended purpose of the file. Supported values are `assistants`, `assistants_output`, `batch`, `batch_output`, `fine-tune`, `fine-tune-results`, `vision`, and `user_data`.
        /// </summary>
        /// <value>The intended purpose of the file. Supported values are `assistants`, `assistants_output`, `batch`, `batch_output`, `fine-tune`, `fine-tune-results`, `vision`, and `user_data`.</value>
        
        public enum PurposeEnum
        {
            
            /// <summary>
            /// Enum AssistantsEnum for assistants
            /// </summary>
            [EnumMember(Value = "assistants")]
            AssistantsEnum = 1,
            
            /// <summary>
            /// Enum AssistantsOutputEnum for assistants_output
            /// </summary>
            [EnumMember(Value = "assistants_output")]
            AssistantsOutputEnum = 2,
            
            /// <summary>
            /// Enum BatchEnum for batch
            /// </summary>
            [EnumMember(Value = "batch")]
            BatchEnum = 3,
            
            /// <summary>
            /// Enum BatchOutputEnum for batch_output
            /// </summary>
            [EnumMember(Value = "batch_output")]
            BatchOutputEnum = 4,
            
            /// <summary>
            /// Enum FineTuneEnum for fine-tune
            /// </summary>
            [EnumMember(Value = "fine-tune")]
            FineTuneEnum = 5,
            
            /// <summary>
            /// Enum FineTuneResultsEnum for fine-tune-results
            /// </summary>
            [EnumMember(Value = "fine-tune-results")]
            FineTuneResultsEnum = 6,
            
            /// <summary>
            /// Enum VisionEnum for vision
            /// </summary>
            [EnumMember(Value = "vision")]
            VisionEnum = 7,
            
            /// <summary>
            /// Enum UserDataEnum for user_data
            /// </summary>
            [EnumMember(Value = "user_data")]
            UserDataEnum = 8
        }

        /// <summary>
        /// The intended purpose of the file. Supported values are &#x60;assistants&#x60;, &#x60;assistants_output&#x60;, &#x60;batch&#x60;, &#x60;batch_output&#x60;, &#x60;fine-tune&#x60;, &#x60;fine-tune-results&#x60;, &#x60;vision&#x60;, and &#x60;user_data&#x60;.
        /// </summary>
        /// <value>The intended purpose of the file. Supported values are &#x60;assistants&#x60;, &#x60;assistants_output&#x60;, &#x60;batch&#x60;, &#x60;batch_output&#x60;, &#x60;fine-tune&#x60;, &#x60;fine-tune-results&#x60;, &#x60;vision&#x60;, and &#x60;user_data&#x60;.</value>
        [Required]
        [DataMember(Name="purpose", EmitDefaultValue=true)]
        public PurposeEnum Purpose { get; set; }


        /// <summary>
        /// Deprecated. The current status of the file, which can be either `uploaded`, `processed`, or `error`.
        /// </summary>
        /// <value>Deprecated. The current status of the file, which can be either `uploaded`, `processed`, or `error`.</value>
        
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum UploadedEnum for uploaded
            /// </summary>
            [EnumMember(Value = "uploaded")]
            UploadedEnum = 1,
            
            /// <summary>
            /// Enum ProcessedEnum for processed
            /// </summary>
            [EnumMember(Value = "processed")]
            ProcessedEnum = 2,
            
            /// <summary>
            /// Enum ErrorEnum for error
            /// </summary>
            [EnumMember(Value = "error")]
            ErrorEnum = 3
        }

        /// <summary>
        /// Deprecated. The current status of the file, which can be either &#x60;uploaded&#x60;, &#x60;processed&#x60;, or &#x60;error&#x60;.
        /// </summary>
        /// <value>Deprecated. The current status of the file, which can be either &#x60;uploaded&#x60;, &#x60;processed&#x60;, or &#x60;error&#x60;.</value>
        [Required]
        [DataMember(Name="status", EmitDefaultValue=true)]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// Deprecated. For details on why a fine-tuning training file failed validation, see the &#x60;error&#x60; field on &#x60;fine_tuning.job&#x60;.
        /// </summary>
        /// <value>Deprecated. For details on why a fine-tuning training file failed validation, see the &#x60;error&#x60; field on &#x60;fine_tuning.job&#x60;.</value>
        [DataMember(Name="status_details", EmitDefaultValue=false)]
        public string? StatusDetails { get; set; }

    }
}
