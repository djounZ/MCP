/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// The item to add to the conversation.
    /// </summary>
    [DataContract]
    public partial class RealtimeConversationItem 
    {
        /// <summary>
        /// The unique ID of the item, this can be generated by the client to help  manage server-side context, but is not required because the server will  generate one if not provided. 
        /// </summary>
        /// <value>The unique ID of the item, this can be generated by the client to help  manage server-side context, but is not required because the server will  generate one if not provided. </value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string? Id { get; set; }


        /// <summary>
        /// The type of the item (`message`, `function_call`, `function_call_output`). 
        /// </summary>
        /// <value>The type of the item (`message`, `function_call`, `function_call_output`). </value>
        
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum MessageEnum for message
            /// </summary>
            [EnumMember(Value = "message")]
            MessageEnum = 1,
            
            /// <summary>
            /// Enum FunctionCallEnum for function_call
            /// </summary>
            [EnumMember(Value = "function_call")]
            FunctionCallEnum = 2,
            
            /// <summary>
            /// Enum FunctionCallOutputEnum for function_call_output
            /// </summary>
            [EnumMember(Value = "function_call_output")]
            FunctionCallOutputEnum = 3
        }

        /// <summary>
        /// The type of the item (&#x60;message&#x60;, &#x60;function_call&#x60;, &#x60;function_call_output&#x60;). 
        /// </summary>
        /// <value>The type of the item (&#x60;message&#x60;, &#x60;function_call&#x60;, &#x60;function_call_output&#x60;). </value>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; }


        /// <summary>
        /// Identifier for the API object being returned - always `realtime.item`. 
        /// </summary>
        /// <value>Identifier for the API object being returned - always `realtime.item`. </value>
        
        public enum ObjectEnum
        {
            
            /// <summary>
            /// Enum RealtimeItemEnum for realtime.item
            /// </summary>
            [EnumMember(Value = "realtime.item")]
            RealtimeItemEnum = 1
        }

        /// <summary>
        /// Identifier for the API object being returned - always &#x60;realtime.item&#x60;. 
        /// </summary>
        /// <value>Identifier for the API object being returned - always &#x60;realtime.item&#x60;. </value>
        [DataMember(Name="object", EmitDefaultValue=true)]
        public ObjectEnum Object { get; set; }


        /// <summary>
        /// The status of the item (`completed`, `incomplete`, `in_progress`). These have no effect  on the conversation, but are accepted for consistency with the  `conversation.item.created` event. 
        /// </summary>
        /// <value>The status of the item (`completed`, `incomplete`, `in_progress`). These have no effect  on the conversation, but are accepted for consistency with the  `conversation.item.created` event. </value>
        
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum CompletedEnum for completed
            /// </summary>
            [EnumMember(Value = "completed")]
            CompletedEnum = 1,
            
            /// <summary>
            /// Enum IncompleteEnum for incomplete
            /// </summary>
            [EnumMember(Value = "incomplete")]
            IncompleteEnum = 2,
            
            /// <summary>
            /// Enum InProgressEnum for in_progress
            /// </summary>
            [EnumMember(Value = "in_progress")]
            InProgressEnum = 3
        }

        /// <summary>
        /// The status of the item (&#x60;completed&#x60;, &#x60;incomplete&#x60;, &#x60;in_progress&#x60;). These have no effect  on the conversation, but are accepted for consistency with the  &#x60;conversation.item.created&#x60; event. 
        /// </summary>
        /// <value>The status of the item (&#x60;completed&#x60;, &#x60;incomplete&#x60;, &#x60;in_progress&#x60;). These have no effect  on the conversation, but are accepted for consistency with the  &#x60;conversation.item.created&#x60; event. </value>
        [DataMember(Name="status", EmitDefaultValue=true)]
        public StatusEnum Status { get; set; }


        /// <summary>
        /// The role of the message sender (`user`, `assistant`, `system`), only  applicable for `message` items. 
        /// </summary>
        /// <value>The role of the message sender (`user`, `assistant`, `system`), only  applicable for `message` items. </value>
        
        public enum RoleEnum
        {
            
            /// <summary>
            /// Enum UserEnum for user
            /// </summary>
            [EnumMember(Value = "user")]
            UserEnum = 1,
            
            /// <summary>
            /// Enum AssistantEnum for assistant
            /// </summary>
            [EnumMember(Value = "assistant")]
            AssistantEnum = 2,
            
            /// <summary>
            /// Enum SystemEnum for system
            /// </summary>
            [EnumMember(Value = "system")]
            SystemEnum = 3
        }

        /// <summary>
        /// The role of the message sender (&#x60;user&#x60;, &#x60;assistant&#x60;, &#x60;system&#x60;), only  applicable for &#x60;message&#x60; items. 
        /// </summary>
        /// <value>The role of the message sender (&#x60;user&#x60;, &#x60;assistant&#x60;, &#x60;system&#x60;), only  applicable for &#x60;message&#x60; items. </value>
        [DataMember(Name="role", EmitDefaultValue=true)]
        public RoleEnum Role { get; set; }

        /// <summary>
        /// The content of the message, applicable for &#x60;message&#x60; items.  - Message items of role &#x60;system&#x60; support only &#x60;input_text&#x60; content - Message items of role &#x60;user&#x60; support &#x60;input_text&#x60; and &#x60;input_audio&#x60;    content - Message items of role &#x60;assistant&#x60; support &#x60;text&#x60; content. 
        /// </summary>
        /// <value>The content of the message, applicable for &#x60;message&#x60; items.  - Message items of role &#x60;system&#x60; support only &#x60;input_text&#x60; content - Message items of role &#x60;user&#x60; support &#x60;input_text&#x60; and &#x60;input_audio&#x60;    content - Message items of role &#x60;assistant&#x60; support &#x60;text&#x60; content. </value>
        [DataMember(Name="content", EmitDefaultValue=false)]
        public List<RealtimeConversationItemContent> Content { get; set; }

        /// <summary>
        /// The ID of the function call (for &#x60;function_call&#x60; and  &#x60;function_call_output&#x60; items). If passed on a &#x60;function_call_output&#x60;  item, the server will check that a &#x60;function_call&#x60; item with the same  ID exists in the conversation history. 
        /// </summary>
        /// <value>The ID of the function call (for &#x60;function_call&#x60; and  &#x60;function_call_output&#x60; items). If passed on a &#x60;function_call_output&#x60;  item, the server will check that a &#x60;function_call&#x60; item with the same  ID exists in the conversation history. </value>
        [DataMember(Name="call_id", EmitDefaultValue=false)]
        public string? CallId { get; set; }

        /// <summary>
        /// The name of the function being called (for &#x60;function_call&#x60; items). 
        /// </summary>
        /// <value>The name of the function being called (for &#x60;function_call&#x60; items). </value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string? Name { get; set; }

        /// <summary>
        /// The arguments of the function call (for &#x60;function_call&#x60; items). 
        /// </summary>
        /// <value>The arguments of the function call (for &#x60;function_call&#x60; items). </value>
        [DataMember(Name="arguments", EmitDefaultValue=false)]
        public string? Arguments { get; set; }

        /// <summary>
        /// The output of the function call (for &#x60;function_call_output&#x60; items). 
        /// </summary>
        /// <value>The output of the function call (for &#x60;function_call_output&#x60; items). </value>
        [DataMember(Name="output", EmitDefaultValue=false)]
        public string? Output { get; set; }

    }
}
