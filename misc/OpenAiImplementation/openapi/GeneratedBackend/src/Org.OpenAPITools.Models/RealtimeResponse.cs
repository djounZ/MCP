/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// The response resource.
    /// </summary>
    [DataContract]
    public partial class RealtimeResponse 
    {
        /// <summary>
        /// The unique ID of the response.
        /// </summary>
        /// <value>The unique ID of the response.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string? Id { get; set; }

        /// <summary>
        /// Gets or Sets Object
        /// </summary>
        [DataMember(Name="object", EmitDefaultValue=true)]
        public Object Object { get; set; }


        /// <summary>
        /// The final status of the response (`completed`, `cancelled`, `failed`, or  `incomplete`, `in_progress`). 
        /// </summary>
        /// <value>The final status of the response (`completed`, `cancelled`, `failed`, or  `incomplete`, `in_progress`). </value>
        
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum CompletedEnum for completed
            /// </summary>
            [EnumMember(Value = "completed")]
            CompletedEnum = 1,
            
            /// <summary>
            /// Enum CancelledEnum for cancelled
            /// </summary>
            [EnumMember(Value = "cancelled")]
            CancelledEnum = 2,
            
            /// <summary>
            /// Enum FailedEnum for failed
            /// </summary>
            [EnumMember(Value = "failed")]
            FailedEnum = 3,
            
            /// <summary>
            /// Enum IncompleteEnum for incomplete
            /// </summary>
            [EnumMember(Value = "incomplete")]
            IncompleteEnum = 4,
            
            /// <summary>
            /// Enum InProgressEnum for in_progress
            /// </summary>
            [EnumMember(Value = "in_progress")]
            InProgressEnum = 5
        }

        /// <summary>
        /// The final status of the response (&#x60;completed&#x60;, &#x60;cancelled&#x60;, &#x60;failed&#x60;, or  &#x60;incomplete&#x60;, &#x60;in_progress&#x60;). 
        /// </summary>
        /// <value>The final status of the response (&#x60;completed&#x60;, &#x60;cancelled&#x60;, &#x60;failed&#x60;, or  &#x60;incomplete&#x60;, &#x60;in_progress&#x60;). </value>
        [DataMember(Name="status", EmitDefaultValue=true)]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// Gets or Sets StatusDetails
        /// </summary>
        [DataMember(Name="status_details", EmitDefaultValue=false)]
        public RealtimeResponseStatusDetails? StatusDetails { get; set; }

        /// <summary>
        /// The list of output items generated by the response.
        /// </summary>
        /// <value>The list of output items generated by the response.</value>
        [DataMember(Name="output", EmitDefaultValue=false)]
        public List<RealtimeConversationItem> Output { get; set; }

        /// <summary>
        /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.   Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters. 
        /// </summary>
        /// <value>Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.   Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters. </value>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// Gets or Sets Usage
        /// </summary>
        [DataMember(Name="usage", EmitDefaultValue=false)]
        public RealtimeResponseUsage? Usage { get; set; }

        /// <summary>
        /// Which conversation the response is added to, determined by the &#x60;conversation&#x60; field in the &#x60;response.create&#x60; event. If &#x60;auto&#x60;, the response will be added to the default conversation and the value of &#x60;conversation_id&#x60; will be an id like &#x60;conv_1234&#x60;. If &#x60;none&#x60;, the response will not be added to any conversation and the value of &#x60;conversation_id&#x60; will be &#x60;null&#x60;. If responses are being triggered by server VAD, the response will be added to the default conversation, thus the &#x60;conversation_id&#x60; will be an id like &#x60;conv_1234&#x60;. 
        /// </summary>
        /// <value>Which conversation the response is added to, determined by the &#x60;conversation&#x60; field in the &#x60;response.create&#x60; event. If &#x60;auto&#x60;, the response will be added to the default conversation and the value of &#x60;conversation_id&#x60; will be an id like &#x60;conv_1234&#x60;. If &#x60;none&#x60;, the response will not be added to any conversation and the value of &#x60;conversation_id&#x60; will be &#x60;null&#x60;. If responses are being triggered by server VAD, the response will be added to the default conversation, thus the &#x60;conversation_id&#x60; will be an id like &#x60;conv_1234&#x60;. </value>
        [DataMember(Name="conversation_id", EmitDefaultValue=false)]
        public string? ConversationId { get; set; }

        /// <summary>
        /// The voice the model used to respond. Current voice options are &#x60;alloy&#x60;, &#x60;ash&#x60;, &#x60;ballad&#x60;, &#x60;coral&#x60;, &#x60;echo&#x60;, &#x60;sage&#x60;, &#x60;shimmer&#x60;, and &#x60;verse&#x60;. 
        /// </summary>
        /// <value>The voice the model used to respond. Current voice options are &#x60;alloy&#x60;, &#x60;ash&#x60;, &#x60;ballad&#x60;, &#x60;coral&#x60;, &#x60;echo&#x60;, &#x60;sage&#x60;, &#x60;shimmer&#x60;, and &#x60;verse&#x60;. </value>
        [DataMember(Name="voice", EmitDefaultValue=false)]
        public VoiceIdsShared? Voice { get; set; }


        /// <summary>
        /// Gets or Sets Modalities
        /// </summary>
        
        public enum ModalitiesEnum
        {
            
            /// <summary>
            /// Enum TextEnum for text
            /// </summary>
            [EnumMember(Value = "text")]
            TextEnum = 1,
            
            /// <summary>
            /// Enum AudioEnum for audio
            /// </summary>
            [EnumMember(Value = "audio")]
            AudioEnum = 2
        }

        /// <summary>
        /// The set of modalities the model used to respond. If there are multiple modalities, the model will pick one, for example if &#x60;modalities&#x60; is &#x60;[\&quot;text\&quot;, \&quot;audio\&quot;]&#x60;, the model could be responding in either text or audio. 
        /// </summary>
        /// <value>The set of modalities the model used to respond. If there are multiple modalities, the model will pick one, for example if &#x60;modalities&#x60; is &#x60;[\&quot;text\&quot;, \&quot;audio\&quot;]&#x60;, the model could be responding in either text or audio. </value>
        [DataMember(Name="modalities", EmitDefaultValue=false)]
        public List<RealtimeResponse.ModalitiesEnum> Modalities { get; set; }


        /// <summary>
        /// The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`. 
        /// </summary>
        /// <value>The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`. </value>
        
        public enum OutputAudioFormatEnum
        {
            
            /// <summary>
            /// Enum Pcm16Enum for pcm16
            /// </summary>
            [EnumMember(Value = "pcm16")]
            Pcm16Enum = 1,
            
            /// <summary>
            /// Enum G711UlawEnum for g711_ulaw
            /// </summary>
            [EnumMember(Value = "g711_ulaw")]
            G711UlawEnum = 2,
            
            /// <summary>
            /// Enum G711AlawEnum for g711_alaw
            /// </summary>
            [EnumMember(Value = "g711_alaw")]
            G711AlawEnum = 3
        }

        /// <summary>
        /// The format of output audio. Options are &#x60;pcm16&#x60;, &#x60;g711_ulaw&#x60;, or &#x60;g711_alaw&#x60;. 
        /// </summary>
        /// <value>The format of output audio. Options are &#x60;pcm16&#x60;, &#x60;g711_ulaw&#x60;, or &#x60;g711_alaw&#x60;. </value>
        [DataMember(Name="output_audio_format", EmitDefaultValue=true)]
        public OutputAudioFormatEnum OutputAudioFormat { get; set; }

        /// <summary>
        /// Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8. 
        /// </summary>
        /// <value>Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8. </value>
        [DataMember(Name="temperature", EmitDefaultValue=true)]
        public decimal? Temperature { get; set; }

        /// <summary>
        /// Gets or Sets MaxOutputTokens
        /// </summary>
        [DataMember(Name="max_output_tokens", EmitDefaultValue=false)]
        public RealtimeResponseMaxOutputTokens? MaxOutputTokens { get; set; }

    }
}
