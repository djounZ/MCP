/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using JsonSubTypes;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// A realtime server event. 
    /// </summary>
    [DataContract]
    public partial class RealtimeServerEvent 
    {
        /// <summary>
        /// The unique ID of the server event.
        /// </summary>
        /// <value>The unique ID of the server event.</value>
        [Required]
        [DataMember(Name="event_id", EmitDefaultValue=false)]
        public string EventId { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [Required]
        [DataMember(Name="type", EmitDefaultValue=true)]
        public Object Type { get; set; }

        /// <summary>
        /// Gets or Sets Conversation
        /// </summary>
        [Required]
        [DataMember(Name="conversation", EmitDefaultValue=false)]
        public RealtimeServerEventConversationCreatedConversation Conversation { get; set; }

        /// <summary>
        /// The ID of the preceding item after which the new item will be inserted. Can be &#x60;null&#x60; if the item has no predecessor. 
        /// </summary>
        /// <value>The ID of the preceding item after which the new item will be inserted. Can be &#x60;null&#x60; if the item has no predecessor. </value>
        [DataMember(Name="previous_item_id", EmitDefaultValue=false)]
        public string? PreviousItemId { get; set; }

        /// <summary>
        /// Gets or Sets Item
        /// </summary>
        [Required]
        [DataMember(Name="item", EmitDefaultValue=false)]
        public RealtimeConversationItem Item { get; set; }

        /// <summary>
        /// The ID of the item.
        /// </summary>
        /// <value>The ID of the item.</value>
        [Required]
        [DataMember(Name="item_id", EmitDefaultValue=false)]
        public string ItemId { get; set; }

        /// <summary>
        /// The index of the content part in the item&#39;s content array.
        /// </summary>
        /// <value>The index of the content part in the item&#39;s content array.</value>
        [Required]
        [DataMember(Name="content_index", EmitDefaultValue=true)]
        public int ContentIndex { get; set; }

        /// <summary>
        /// The final transcript of the audio.
        /// </summary>
        /// <value>The final transcript of the audio.</value>
        [Required]
        [DataMember(Name="transcript", EmitDefaultValue=false)]
        public string Transcript { get; set; }

        /// <summary>
        /// The log probabilities of the transcription.
        /// </summary>
        /// <value>The log probabilities of the transcription.</value>
        [DataMember(Name="logprobs", EmitDefaultValue=false)]
        public List<LogProbProperties> Logprobs { get; set; }

        /// <summary>
        /// Gets or Sets Usage
        /// </summary>
        [Required]
        [DataMember(Name="usage", EmitDefaultValue=false)]
        public RealtimeServerEventConversationItemInputAudioTranscriptionCompletedUsage Usage { get; set; }

        /// <summary>
        /// The text delta.
        /// </summary>
        /// <value>The text delta.</value>
        [Required]
        [DataMember(Name="delta", EmitDefaultValue=false)]
        public string Delta { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [Required]
        [DataMember(Name="error", EmitDefaultValue=false)]
        public RealtimeServerEventErrorError Error { get; set; }

        /// <summary>
        /// Milliseconds since the session started when speech stopped. This will  correspond to the end of audio sent to the model, and thus includes the  &#x60;min_silence_duration_ms&#x60; configured in the Session. 
        /// </summary>
        /// <value>Milliseconds since the session started when speech stopped. This will  correspond to the end of audio sent to the model, and thus includes the  &#x60;min_silence_duration_ms&#x60; configured in the Session. </value>
        [Required]
        [DataMember(Name="audio_end_ms", EmitDefaultValue=true)]
        public int AudioEndMs { get; set; }

        /// <summary>
        /// Milliseconds from the start of all audio written to the buffer during the  session when speech was first detected. This will correspond to the  beginning of audio sent to the model, and thus includes the  &#x60;prefix_padding_ms&#x60; configured in the Session. 
        /// </summary>
        /// <value>Milliseconds from the start of all audio written to the buffer during the  session when speech was first detected. This will correspond to the  beginning of audio sent to the model, and thus includes the  &#x60;prefix_padding_ms&#x60; configured in the Session. </value>
        [Required]
        [DataMember(Name="audio_start_ms", EmitDefaultValue=true)]
        public int AudioStartMs { get; set; }

        /// <summary>
        /// List of rate limit information.
        /// </summary>
        /// <value>List of rate limit information.</value>
        [Required]
        [DataMember(Name="rate_limits", EmitDefaultValue=false)]
        public List<RealtimeServerEventRateLimitsUpdatedRateLimitsInner> RateLimits { get; set; }

        /// <summary>
        /// The unique ID of the response that produced the audio.
        /// </summary>
        /// <value>The unique ID of the response that produced the audio.</value>
        [Required]
        [DataMember(Name="response_id", EmitDefaultValue=false)]
        public string ResponseId { get; set; }

        /// <summary>
        /// The index of the output item in the response.
        /// </summary>
        /// <value>The index of the output item in the response.</value>
        [Required]
        [DataMember(Name="output_index", EmitDefaultValue=true)]
        public int OutputIndex { get; set; }

        /// <summary>
        /// Gets or Sets Part
        /// </summary>
        [Required]
        [DataMember(Name="part", EmitDefaultValue=false)]
        public RealtimeServerEventResponseContentPartDonePart Part { get; set; }

        /// <summary>
        /// Gets or Sets Response
        /// </summary>
        [Required]
        [DataMember(Name="response", EmitDefaultValue=false)]
        public RealtimeResponse Response { get; set; }

        /// <summary>
        /// The ID of the function call.
        /// </summary>
        /// <value>The ID of the function call.</value>
        [Required]
        [DataMember(Name="call_id", EmitDefaultValue=false)]
        public string CallId { get; set; }

        /// <summary>
        /// The final arguments as a JSON string.
        /// </summary>
        /// <value>The final arguments as a JSON string.</value>
        [Required]
        [DataMember(Name="arguments", EmitDefaultValue=false)]
        public string Arguments { get; set; }

        /// <summary>
        /// The final text content.
        /// </summary>
        /// <value>The final text content.</value>
        [Required]
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets Session
        /// </summary>
        [Required]
        [DataMember(Name="session", EmitDefaultValue=false)]
        public RealtimeTranscriptionSessionCreateResponse Session { get; set; }

    }
}
