/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Returned when a conversation item is created. There are several scenarios that produce this event:   - The server is generating a Response, which if successful will produce      either one or two Items, which will be of type &#x60;message&#x60;      (role &#x60;assistant&#x60;) or type &#x60;function_call&#x60;.   - The input audio buffer has been committed, either by the client or the      server (in &#x60;server_vad&#x60; mode). The server will take the content of the      input audio buffer and add it to a new user message Item.   - The client has sent a &#x60;conversation.item.create&#x60; event to add a new Item      to the Conversation. 
    /// </summary>
    [DataContract]
    public partial class RealtimeServerEventConversationItemCreated 
    {
        /// <summary>
        /// The unique ID of the server event.
        /// </summary>
        /// <value>The unique ID of the server event.</value>
        [Required]
        [DataMember(Name="event_id", EmitDefaultValue=false)]
        public string EventId { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [Required]
        [DataMember(Name="type", EmitDefaultValue=true)]
        public Object Type { get; set; }

        /// <summary>
        /// The ID of the preceding item in the Conversation context, allows the  client to understand the order of the conversation. Can be &#x60;null&#x60; if the  item has no predecessor. 
        /// </summary>
        /// <value>The ID of the preceding item in the Conversation context, allows the  client to understand the order of the conversation. Can be &#x60;null&#x60; if the  item has no predecessor. </value>
        [DataMember(Name="previous_item_id", EmitDefaultValue=false)]
        public string? PreviousItemId { get; set; }

        /// <summary>
        /// Gets or Sets Item
        /// </summary>
        [Required]
        [DataMember(Name="item", EmitDefaultValue=false)]
        public RealtimeConversationItem Item { get; set; }

    }
}
