/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Configuration for turn detection, ether Server VAD or Semantic VAD. This can be set to &#x60;null&#x60; to turn off, in which case the client must manually trigger model response. Server VAD means that the model will detect the start and end of speech based on audio volume and respond at the end of user speech. Semantic VAD is more advanced and uses a turn detection model (in conjuction with VAD) to semantically estimate whether the user has finished speaking, then dynamically sets a timeout based on this probability. For example, if user audio trails off with \&quot;uhhm\&quot;, the model will score a low probability of turn end and wait longer for the user to continue speaking. This can be useful for more natural conversations, but may have a higher latency. 
    /// </summary>
    [DataContract]
    public partial class RealtimeSessionTurnDetection 
    {

        /// <summary>
        /// Type of turn detection. 
        /// </summary>
        /// <value>Type of turn detection. </value>
        
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum ServerVadEnum for server_vad
            /// </summary>
            [EnumMember(Value = "server_vad")]
            ServerVadEnum = 1,
            
            /// <summary>
            /// Enum SemanticVadEnum for semantic_vad
            /// </summary>
            [EnumMember(Value = "semantic_vad")]
            SemanticVadEnum = 2
        }

        /// <summary>
        /// Type of turn detection. 
        /// </summary>
        /// <value>Type of turn detection. </value>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; } = TypeEnum.ServerVadEnum;


        /// <summary>
        /// Used only for `semantic_vad` mode. The eagerness of the model to respond. `low` will wait longer for the user to continue speaking, `high` will respond more quickly. `auto` is the default and is equivalent to `medium`. 
        /// </summary>
        /// <value>Used only for `semantic_vad` mode. The eagerness of the model to respond. `low` will wait longer for the user to continue speaking, `high` will respond more quickly. `auto` is the default and is equivalent to `medium`. </value>
        
        public enum EagernessEnum
        {
            
            /// <summary>
            /// Enum LowEnum for low
            /// </summary>
            [EnumMember(Value = "low")]
            LowEnum = 1,
            
            /// <summary>
            /// Enum MediumEnum for medium
            /// </summary>
            [EnumMember(Value = "medium")]
            MediumEnum = 2,
            
            /// <summary>
            /// Enum HighEnum for high
            /// </summary>
            [EnumMember(Value = "high")]
            HighEnum = 3,
            
            /// <summary>
            /// Enum AutoEnum for auto
            /// </summary>
            [EnumMember(Value = "auto")]
            AutoEnum = 4
        }

        /// <summary>
        /// Used only for &#x60;semantic_vad&#x60; mode. The eagerness of the model to respond. &#x60;low&#x60; will wait longer for the user to continue speaking, &#x60;high&#x60; will respond more quickly. &#x60;auto&#x60; is the default and is equivalent to &#x60;medium&#x60;. 
        /// </summary>
        /// <value>Used only for &#x60;semantic_vad&#x60; mode. The eagerness of the model to respond. &#x60;low&#x60; will wait longer for the user to continue speaking, &#x60;high&#x60; will respond more quickly. &#x60;auto&#x60; is the default and is equivalent to &#x60;medium&#x60;. </value>
        [DataMember(Name="eagerness", EmitDefaultValue=true)]
        public EagernessEnum Eagerness { get; set; } = EagernessEnum.AutoEnum;

        /// <summary>
        /// Used only for &#x60;server_vad&#x60; mode. Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A  higher threshold will require louder audio to activate the model, and  thus might perform better in noisy environments. 
        /// </summary>
        /// <value>Used only for &#x60;server_vad&#x60; mode. Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A  higher threshold will require louder audio to activate the model, and  thus might perform better in noisy environments. </value>
        [DataMember(Name="threshold", EmitDefaultValue=true)]
        public decimal? Threshold { get; set; }

        /// <summary>
        /// Used only for &#x60;server_vad&#x60; mode. Amount of audio to include before the VAD detected speech (in  milliseconds). Defaults to 300ms. 
        /// </summary>
        /// <value>Used only for &#x60;server_vad&#x60; mode. Amount of audio to include before the VAD detected speech (in  milliseconds). Defaults to 300ms. </value>
        [DataMember(Name="prefix_padding_ms", EmitDefaultValue=true)]
        public int? PrefixPaddingMs { get; set; }

        /// <summary>
        /// Used only for &#x60;server_vad&#x60; mode. Duration of silence to detect speech stop (in milliseconds). Defaults  to 500ms. With shorter values the model will respond more quickly,  but may jump in on short pauses from the user. 
        /// </summary>
        /// <value>Used only for &#x60;server_vad&#x60; mode. Duration of silence to detect speech stop (in milliseconds). Defaults  to 500ms. With shorter values the model will respond more quickly,  but may jump in on short pauses from the user. </value>
        [DataMember(Name="silence_duration_ms", EmitDefaultValue=true)]
        public int? SilenceDurationMs { get; set; }

        /// <summary>
        /// Whether or not to automatically generate a response when a VAD stop event occurs. 
        /// </summary>
        /// <value>Whether or not to automatically generate a response when a VAD stop event occurs. </value>
        [DataMember(Name="create_response", EmitDefaultValue=true)]
        public bool? CreateResponse { get; set; } = true;

        /// <summary>
        /// Whether or not to automatically interrupt any ongoing response with output to the default conversation (i.e. &#x60;conversation&#x60; of &#x60;auto&#x60;) when a VAD start event occurs. 
        /// </summary>
        /// <value>Whether or not to automatically interrupt any ongoing response with output to the default conversation (i.e. &#x60;conversation&#x60; of &#x60;auto&#x60;) when a VAD start event occurs. </value>
        [DataMember(Name="interrupt_response", EmitDefaultValue=true)]
        public bool? InterruptResponse { get; set; } = true;

    }
}
