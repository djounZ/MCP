/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Response 
    {
        /// <summary>
        /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.   Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters. 
        /// </summary>
        /// <value>Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.   Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters. </value>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. 
        /// </summary>
        /// <value>An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. </value>
        [Range(0, 20)]
        [DataMember(Name="top_logprobs", EmitDefaultValue=true)]
        public int? TopLogprobs { get; set; }

        /// <summary>
        /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or &#x60;top_p&#x60; but not both. 
        /// </summary>
        /// <value>What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or &#x60;top_p&#x60; but not both. </value>
        /* <example>1</example> */
        [Range(0, 2)]
        [DataMember(Name="temperature", EmitDefaultValue=true)]
        public decimal? Temperature { get; set; } = 1M;

        /// <summary>
        /// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or &#x60;temperature&#x60; but not both. 
        /// </summary>
        /// <value>An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or &#x60;temperature&#x60; but not both. </value>
        /* <example>1</example> */
        [Range(0, 1)]
        [DataMember(Name="top_p", EmitDefaultValue=true)]
        public decimal? TopP { get; set; } = 1M;

        /// <summary>
        /// This field is being replaced by &#x60;safety_identifier&#x60; and &#x60;prompt_cache_key&#x60;. Use &#x60;prompt_cache_key&#x60; instead to maintain caching optimizations. A stable identifier for your end-users.  Used to boost cache hit rates by better bucketing similar requests and  to help OpenAI detect and prevent abuse. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#safety-identifiers). 
        /// </summary>
        /// <value>This field is being replaced by &#x60;safety_identifier&#x60; and &#x60;prompt_cache_key&#x60;. Use &#x60;prompt_cache_key&#x60; instead to maintain caching optimizations. A stable identifier for your end-users.  Used to boost cache hit rates by better bucketing similar requests and  to help OpenAI detect and prevent abuse. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#safety-identifiers). </value>
        /* <example>user-1234</example> */
        [DataMember(Name="user", EmitDefaultValue=false)]
        public string? User { get; set; }

        /// <summary>
        /// A stable identifier used to help detect users of your application that may be violating OpenAI&#39;s usage policies.  The IDs should be a string that uniquely identifies each user. We recommend hashing their username or email address, in order to avoid sending us any identifying information. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#safety-identifiers). 
        /// </summary>
        /// <value>A stable identifier used to help detect users of your application that may be violating OpenAI&#39;s usage policies.  The IDs should be a string that uniquely identifies each user. We recommend hashing their username or email address, in order to avoid sending us any identifying information. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#safety-identifiers). </value>
        /* <example>safety-identifier-1234</example> */
        [DataMember(Name="safety_identifier", EmitDefaultValue=false)]
        public string? SafetyIdentifier { get; set; }

        /// <summary>
        /// Used by OpenAI to cache responses for similar requests to optimize your cache hit rates. Replaces the &#x60;user&#x60; field. [Learn more](https://platform.openai.com/docs/guides/prompt-caching). 
        /// </summary>
        /// <value>Used by OpenAI to cache responses for similar requests to optimize your cache hit rates. Replaces the &#x60;user&#x60; field. [Learn more](https://platform.openai.com/docs/guides/prompt-caching). </value>
        /* <example>prompt-cache-key-1234</example> */
        [DataMember(Name="prompt_cache_key", EmitDefaultValue=false)]
        public string? PromptCacheKey { get; set; }

        /// <summary>
        /// Gets or Sets ServiceTier
        /// </summary>
        [DataMember(Name="service_tier", EmitDefaultValue=true)]
        public ServiceTier ServiceTier { get; set; }

        /// <summary>
        /// The unique ID of the previous response to the model. Use this to create multi-turn conversations. Learn more about [conversation state](https://platform.openai.com/docs/guides/conversation-state). 
        /// </summary>
        /// <value>The unique ID of the previous response to the model. Use this to create multi-turn conversations. Learn more about [conversation state](https://platform.openai.com/docs/guides/conversation-state). </value>
        [DataMember(Name="previous_response_id", EmitDefaultValue=false)]
        public string? PreviousResponseId { get; set; }

        /// <summary>
        /// Model ID used to generate the response, like &#x60;gpt-4o&#x60; or &#x60;o3&#x60;. OpenAI offers a wide range of models with different capabilities, performance characteristics, and price points. Refer to the [model guide](https://platform.openai.com/docs/models) to browse and compare available models. 
        /// </summary>
        /// <value>Model ID used to generate the response, like &#x60;gpt-4o&#x60; or &#x60;o3&#x60;. OpenAI offers a wide range of models with different capabilities, performance characteristics, and price points. Refer to the [model guide](https://platform.openai.com/docs/models) to browse and compare available models. </value>
        [DataMember(Name="model", EmitDefaultValue=false)]
        public ModelIdsResponses? Model { get; set; }

        /// <summary>
        /// Gets or Sets Reasoning
        /// </summary>
        [DataMember(Name="reasoning", EmitDefaultValue=false)]
        public Reasoning? Reasoning { get; set; }

        /// <summary>
        /// Whether to run the model response in the background. [Learn more](https://platform.openai.com/docs/guides/background). 
        /// </summary>
        /// <value>Whether to run the model response in the background. [Learn more](https://platform.openai.com/docs/guides/background). </value>
        [DataMember(Name="background", EmitDefaultValue=true)]
        public bool? Background { get; set; } = false;

        /// <summary>
        /// An upper bound for the number of tokens that can be generated for a response, including visible output tokens and [reasoning tokens](https://platform.openai.com/docs/guides/reasoning). 
        /// </summary>
        /// <value>An upper bound for the number of tokens that can be generated for a response, including visible output tokens and [reasoning tokens](https://platform.openai.com/docs/guides/reasoning). </value>
        [DataMember(Name="max_output_tokens", EmitDefaultValue=true)]
        public int? MaxOutputTokens { get; set; }

        /// <summary>
        /// The maximum number of total calls to built-in tools that can be processed in a response. This maximum number applies across all built-in tool calls, not per individual tool. Any further attempts to call a tool by the model will be ignored. 
        /// </summary>
        /// <value>The maximum number of total calls to built-in tools that can be processed in a response. This maximum number applies across all built-in tool calls, not per individual tool. Any further attempts to call a tool by the model will be ignored. </value>
        [DataMember(Name="max_tool_calls", EmitDefaultValue=true)]
        public int? MaxToolCalls { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public ResponsePropertiesText? Text { get; set; }

        /// <summary>
        /// An array of tools the model may call while generating a response. You can specify which tool to use by setting the &#x60;tool_choice&#x60; parameter.  The two categories of tools you can provide the model are:  - **Built-in tools**: Tools that are provided by OpenAI that extend the   model&#39;s capabilities, like [web search](https://platform.openai.com/docs/guides/tools-web-search)   or [file search](https://platform.openai.com/docs/guides/tools-file-search). Learn more about   [built-in tools](https://platform.openai.com/docs/guides/tools). - **Function calls (custom tools)**: Functions that are defined by you,   enabling the model to call your own code with strongly typed arguments   and outputs. Learn more about   [function calling](https://platform.openai.com/docs/guides/function-calling). You can also use   custom tools to call your own code. 
        /// </summary>
        /// <value>An array of tools the model may call while generating a response. You can specify which tool to use by setting the &#x60;tool_choice&#x60; parameter.  The two categories of tools you can provide the model are:  - **Built-in tools**: Tools that are provided by OpenAI that extend the   model&#39;s capabilities, like [web search](https://platform.openai.com/docs/guides/tools-web-search)   or [file search](https://platform.openai.com/docs/guides/tools-file-search). Learn more about   [built-in tools](https://platform.openai.com/docs/guides/tools). - **Function calls (custom tools)**: Functions that are defined by you,   enabling the model to call your own code with strongly typed arguments   and outputs. Learn more about   [function calling](https://platform.openai.com/docs/guides/function-calling). You can also use   custom tools to call your own code. </value>
        [DataMember(Name="tools", EmitDefaultValue=false)]
        public List<Tool> Tools { get; set; }

        /// <summary>
        /// Gets or Sets ToolChoice
        /// </summary>
        [DataMember(Name="tool_choice", EmitDefaultValue=false)]
        public ResponsePropertiesToolChoice? ToolChoice { get; set; }

        /// <summary>
        /// Gets or Sets Prompt
        /// </summary>
        [DataMember(Name="prompt", EmitDefaultValue=false)]
        public Prompt? Prompt { get; set; }


        /// <summary>
        /// The truncation strategy to use for the model response. - `auto`: If the context of this response and previous ones exceeds   the model's context window size, the model will truncate the   response to fit the context window by dropping input items in the   middle of the conversation. - `disabled` (default): If a model response will exceed the context window   size for a model, the request will fail with a 400 error. 
        /// </summary>
        /// <value>The truncation strategy to use for the model response. - `auto`: If the context of this response and previous ones exceeds   the model's context window size, the model will truncate the   response to fit the context window by dropping input items in the   middle of the conversation. - `disabled` (default): If a model response will exceed the context window   size for a model, the request will fail with a 400 error. </value>
        
        public enum TruncationEnum
        {
            
            /// <summary>
            /// Enum AutoEnum for auto
            /// </summary>
            [EnumMember(Value = "auto")]
            AutoEnum = 1,
            
            /// <summary>
            /// Enum DisabledEnum for disabled
            /// </summary>
            [EnumMember(Value = "disabled")]
            DisabledEnum = 2
        }

        /// <summary>
        /// The truncation strategy to use for the model response. - &#x60;auto&#x60;: If the context of this response and previous ones exceeds   the model&#39;s context window size, the model will truncate the   response to fit the context window by dropping input items in the   middle of the conversation. - &#x60;disabled&#x60; (default): If a model response will exceed the context window   size for a model, the request will fail with a 400 error. 
        /// </summary>
        /// <value>The truncation strategy to use for the model response. - &#x60;auto&#x60;: If the context of this response and previous ones exceeds   the model&#39;s context window size, the model will truncate the   response to fit the context window by dropping input items in the   middle of the conversation. - &#x60;disabled&#x60; (default): If a model response will exceed the context window   size for a model, the request will fail with a 400 error. </value>
        [DataMember(Name="truncation", EmitDefaultValue=true)]
        public TruncationEnum Truncation { get; set; } = TruncationEnum.DisabledEnum;

        /// <summary>
        /// Unique identifier for this Response. 
        /// </summary>
        /// <value>Unique identifier for this Response. </value>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }


        /// <summary>
        /// The object type of this resource - always set to `response`. 
        /// </summary>
        /// <value>The object type of this resource - always set to `response`. </value>
        
        public enum ObjectEnum
        {
            
            /// <summary>
            /// Enum ResponseEnum for response
            /// </summary>
            [EnumMember(Value = "response")]
            ResponseEnum = 1
        }

        /// <summary>
        /// The object type of this resource - always set to &#x60;response&#x60;. 
        /// </summary>
        /// <value>The object type of this resource - always set to &#x60;response&#x60;. </value>
        [Required]
        [DataMember(Name="object", EmitDefaultValue=true)]
        public ObjectEnum Object { get; set; }


        /// <summary>
        /// The status of the response generation. One of `completed`, `failed`,  `in_progress`, `cancelled`, `queued`, or `incomplete`. 
        /// </summary>
        /// <value>The status of the response generation. One of `completed`, `failed`,  `in_progress`, `cancelled`, `queued`, or `incomplete`. </value>
        
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum CompletedEnum for completed
            /// </summary>
            [EnumMember(Value = "completed")]
            CompletedEnum = 1,
            
            /// <summary>
            /// Enum FailedEnum for failed
            /// </summary>
            [EnumMember(Value = "failed")]
            FailedEnum = 2,
            
            /// <summary>
            /// Enum InProgressEnum for in_progress
            /// </summary>
            [EnumMember(Value = "in_progress")]
            InProgressEnum = 3,
            
            /// <summary>
            /// Enum CancelledEnum for cancelled
            /// </summary>
            [EnumMember(Value = "cancelled")]
            CancelledEnum = 4,
            
            /// <summary>
            /// Enum QueuedEnum for queued
            /// </summary>
            [EnumMember(Value = "queued")]
            QueuedEnum = 5,
            
            /// <summary>
            /// Enum IncompleteEnum for incomplete
            /// </summary>
            [EnumMember(Value = "incomplete")]
            IncompleteEnum = 6
        }

        /// <summary>
        /// The status of the response generation. One of &#x60;completed&#x60;, &#x60;failed&#x60;,  &#x60;in_progress&#x60;, &#x60;cancelled&#x60;, &#x60;queued&#x60;, or &#x60;incomplete&#x60;. 
        /// </summary>
        /// <value>The status of the response generation. One of &#x60;completed&#x60;, &#x60;failed&#x60;,  &#x60;in_progress&#x60;, &#x60;cancelled&#x60;, &#x60;queued&#x60;, or &#x60;incomplete&#x60;. </value>
        [DataMember(Name="status", EmitDefaultValue=true)]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// Unix timestamp (in seconds) of when this Response was created. 
        /// </summary>
        /// <value>Unix timestamp (in seconds) of when this Response was created. </value>
        [Required]
        [DataMember(Name="created_at", EmitDefaultValue=true)]
        public decimal CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [Required]
        [DataMember(Name="error", EmitDefaultValue=false)]
        public ResponseError Error { get; set; }

        /// <summary>
        /// Gets or Sets IncompleteDetails
        /// </summary>
        [Required]
        [DataMember(Name="incomplete_details", EmitDefaultValue=false)]
        public ResponseAllOfIncompleteDetails IncompleteDetails { get; set; }

        /// <summary>
        /// An array of content items generated by the model.  - The length and order of items in the &#x60;output&#x60; array is dependent   on the model&#39;s response. - Rather than accessing the first item in the &#x60;output&#x60; array and    assuming it&#39;s an &#x60;assistant&#x60; message with the content generated by   the model, you might consider using the &#x60;output_text&#x60; property where   supported in SDKs. 
        /// </summary>
        /// <value>An array of content items generated by the model.  - The length and order of items in the &#x60;output&#x60; array is dependent   on the model&#39;s response. - Rather than accessing the first item in the &#x60;output&#x60; array and    assuming it&#39;s an &#x60;assistant&#x60; message with the content generated by   the model, you might consider using the &#x60;output_text&#x60; property where   supported in SDKs. </value>
        [Required]
        [DataMember(Name="output", EmitDefaultValue=false)]
        public List<OutputItem> Output { get; set; }

        /// <summary>
        /// Gets or Sets Instructions
        /// </summary>
        [Required]
        [DataMember(Name="instructions", EmitDefaultValue=false)]
        public ResponseAllOfInstructions Instructions { get; set; }

        /// <summary>
        /// SDK-only convenience property that contains the aggregated text output  from all &#x60;output_text&#x60; items in the &#x60;output&#x60; array, if any are present.  Supported in the Python and JavaScript SDKs. 
        /// </summary>
        /// <value>SDK-only convenience property that contains the aggregated text output  from all &#x60;output_text&#x60; items in the &#x60;output&#x60; array, if any are present.  Supported in the Python and JavaScript SDKs. </value>
        [DataMember(Name="output_text", EmitDefaultValue=false)]
        public string? OutputText { get; set; }

        /// <summary>
        /// Gets or Sets Usage
        /// </summary>
        [DataMember(Name="usage", EmitDefaultValue=false)]
        public ResponseUsage? Usage { get; set; }

        /// <summary>
        /// Whether to allow the model to run tool calls in parallel. 
        /// </summary>
        /// <value>Whether to allow the model to run tool calls in parallel. </value>
        [Required]
        [DataMember(Name="parallel_tool_calls", EmitDefaultValue=true)]
        public bool ParallelToolCalls { get; set; } = true;

    }
}
