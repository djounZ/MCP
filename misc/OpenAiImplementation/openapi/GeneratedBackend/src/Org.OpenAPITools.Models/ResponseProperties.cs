/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ResponseProperties 
    {
        /// <summary>
        /// The unique ID of the previous response to the model. Use this to create multi-turn conversations. Learn more about [conversation state](https://platform.openai.com/docs/guides/conversation-state). 
        /// </summary>
        /// <value>The unique ID of the previous response to the model. Use this to create multi-turn conversations. Learn more about [conversation state](https://platform.openai.com/docs/guides/conversation-state). </value>
        [DataMember(Name="previous_response_id", EmitDefaultValue=false)]
        public string? PreviousResponseId { get; set; }

        /// <summary>
        /// Model ID used to generate the response, like &#x60;gpt-4o&#x60; or &#x60;o3&#x60;. OpenAI offers a wide range of models with different capabilities, performance characteristics, and price points. Refer to the [model guide](https://platform.openai.com/docs/models) to browse and compare available models. 
        /// </summary>
        /// <value>Model ID used to generate the response, like &#x60;gpt-4o&#x60; or &#x60;o3&#x60;. OpenAI offers a wide range of models with different capabilities, performance characteristics, and price points. Refer to the [model guide](https://platform.openai.com/docs/models) to browse and compare available models. </value>
        [DataMember(Name="model", EmitDefaultValue=false)]
        public ModelIdsResponses? Model { get; set; }

        /// <summary>
        /// Gets or Sets Reasoning
        /// </summary>
        [DataMember(Name="reasoning", EmitDefaultValue=false)]
        public Reasoning? Reasoning { get; set; }

        /// <summary>
        /// Whether to run the model response in the background. [Learn more](https://platform.openai.com/docs/guides/background). 
        /// </summary>
        /// <value>Whether to run the model response in the background. [Learn more](https://platform.openai.com/docs/guides/background). </value>
        [DataMember(Name="background", EmitDefaultValue=true)]
        public bool? Background { get; set; } = false;

        /// <summary>
        /// An upper bound for the number of tokens that can be generated for a response, including visible output tokens and [reasoning tokens](https://platform.openai.com/docs/guides/reasoning). 
        /// </summary>
        /// <value>An upper bound for the number of tokens that can be generated for a response, including visible output tokens and [reasoning tokens](https://platform.openai.com/docs/guides/reasoning). </value>
        [DataMember(Name="max_output_tokens", EmitDefaultValue=true)]
        public int? MaxOutputTokens { get; set; }

        /// <summary>
        /// The maximum number of total calls to built-in tools that can be processed in a response. This maximum number applies across all built-in tool calls, not per individual tool. Any further attempts to call a tool by the model will be ignored. 
        /// </summary>
        /// <value>The maximum number of total calls to built-in tools that can be processed in a response. This maximum number applies across all built-in tool calls, not per individual tool. Any further attempts to call a tool by the model will be ignored. </value>
        [DataMember(Name="max_tool_calls", EmitDefaultValue=true)]
        public int? MaxToolCalls { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public ResponsePropertiesText? Text { get; set; }

        /// <summary>
        /// An array of tools the model may call while generating a response. You can specify which tool to use by setting the &#x60;tool_choice&#x60; parameter.  The two categories of tools you can provide the model are:  - **Built-in tools**: Tools that are provided by OpenAI that extend the   model&#39;s capabilities, like [web search](https://platform.openai.com/docs/guides/tools-web-search)   or [file search](https://platform.openai.com/docs/guides/tools-file-search). Learn more about   [built-in tools](https://platform.openai.com/docs/guides/tools). - **Function calls (custom tools)**: Functions that are defined by you,   enabling the model to call your own code with strongly typed arguments   and outputs. Learn more about   [function calling](https://platform.openai.com/docs/guides/function-calling). You can also use   custom tools to call your own code. 
        /// </summary>
        /// <value>An array of tools the model may call while generating a response. You can specify which tool to use by setting the &#x60;tool_choice&#x60; parameter.  The two categories of tools you can provide the model are:  - **Built-in tools**: Tools that are provided by OpenAI that extend the   model&#39;s capabilities, like [web search](https://platform.openai.com/docs/guides/tools-web-search)   or [file search](https://platform.openai.com/docs/guides/tools-file-search). Learn more about   [built-in tools](https://platform.openai.com/docs/guides/tools). - **Function calls (custom tools)**: Functions that are defined by you,   enabling the model to call your own code with strongly typed arguments   and outputs. Learn more about   [function calling](https://platform.openai.com/docs/guides/function-calling). You can also use   custom tools to call your own code. </value>
        [DataMember(Name="tools", EmitDefaultValue=false)]
        public List<Tool> Tools { get; set; }

        /// <summary>
        /// Gets or Sets ToolChoice
        /// </summary>
        [DataMember(Name="tool_choice", EmitDefaultValue=false)]
        public ResponsePropertiesToolChoice? ToolChoice { get; set; }

        /// <summary>
        /// Gets or Sets Prompt
        /// </summary>
        [DataMember(Name="prompt", EmitDefaultValue=false)]
        public Prompt? Prompt { get; set; }


        /// <summary>
        /// The truncation strategy to use for the model response. - `auto`: If the context of this response and previous ones exceeds   the model's context window size, the model will truncate the   response to fit the context window by dropping input items in the   middle of the conversation. - `disabled` (default): If a model response will exceed the context window   size for a model, the request will fail with a 400 error. 
        /// </summary>
        /// <value>The truncation strategy to use for the model response. - `auto`: If the context of this response and previous ones exceeds   the model's context window size, the model will truncate the   response to fit the context window by dropping input items in the   middle of the conversation. - `disabled` (default): If a model response will exceed the context window   size for a model, the request will fail with a 400 error. </value>
        
        public enum TruncationEnum
        {
            
            /// <summary>
            /// Enum AutoEnum for auto
            /// </summary>
            [EnumMember(Value = "auto")]
            AutoEnum = 1,
            
            /// <summary>
            /// Enum DisabledEnum for disabled
            /// </summary>
            [EnumMember(Value = "disabled")]
            DisabledEnum = 2
        }

        /// <summary>
        /// The truncation strategy to use for the model response. - &#x60;auto&#x60;: If the context of this response and previous ones exceeds   the model&#39;s context window size, the model will truncate the   response to fit the context window by dropping input items in the   middle of the conversation. - &#x60;disabled&#x60; (default): If a model response will exceed the context window   size for a model, the request will fail with a 400 error. 
        /// </summary>
        /// <value>The truncation strategy to use for the model response. - &#x60;auto&#x60;: If the context of this response and previous ones exceeds   the model&#39;s context window size, the model will truncate the   response to fit the context window by dropping input items in the   middle of the conversation. - &#x60;disabled&#x60; (default): If a model response will exceed the context window   size for a model, the request will fail with a 400 error. </value>
        [DataMember(Name="truncation", EmitDefaultValue=true)]
        public TruncationEnum Truncation { get; set; } = TruncationEnum.DisabledEnum;

    }
}
