/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// How the model should select which tool (or tools) to use when generating a response. See the &#x60;tools&#x60; parameter to see how to specify which tools the model can call. 
    /// </summary>
    [DataContract]
    public partial class ResponsePropertiesToolChoice 
    {

        /// <summary>
        /// Allowed tool configuration type. Always `allowed_tools`.
        /// </summary>
        /// <value>Allowed tool configuration type. Always `allowed_tools`.</value>
        
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum AllowedToolsEnum for allowed_tools
            /// </summary>
            [EnumMember(Value = "allowed_tools")]
            AllowedToolsEnum = 1,
            
            /// <summary>
            /// Enum FileSearchEnum for file_search
            /// </summary>
            [EnumMember(Value = "file_search")]
            FileSearchEnum = 2,
            
            /// <summary>
            /// Enum WebSearchPreviewEnum for web_search_preview
            /// </summary>
            [EnumMember(Value = "web_search_preview")]
            WebSearchPreviewEnum = 3,
            
            /// <summary>
            /// Enum ComputerUsePreviewEnum for computer_use_preview
            /// </summary>
            [EnumMember(Value = "computer_use_preview")]
            ComputerUsePreviewEnum = 4,
            
            /// <summary>
            /// Enum WebSearchPreview20250311Enum for web_search_preview_2025_03_11
            /// </summary>
            [EnumMember(Value = "web_search_preview_2025_03_11")]
            WebSearchPreview20250311Enum = 5,
            
            /// <summary>
            /// Enum ImageGenerationEnum for image_generation
            /// </summary>
            [EnumMember(Value = "image_generation")]
            ImageGenerationEnum = 6,
            
            /// <summary>
            /// Enum CodeInterpreterEnum for code_interpreter
            /// </summary>
            [EnumMember(Value = "code_interpreter")]
            CodeInterpreterEnum = 7,
            
            /// <summary>
            /// Enum FunctionEnum for function
            /// </summary>
            [EnumMember(Value = "function")]
            FunctionEnum = 8,
            
            /// <summary>
            /// Enum McpEnum for mcp
            /// </summary>
            [EnumMember(Value = "mcp")]
            McpEnum = 9,
            
            /// <summary>
            /// Enum CustomEnum for custom
            /// </summary>
            [EnumMember(Value = "custom")]
            CustomEnum = 10
        }

        /// <summary>
        /// Allowed tool configuration type. Always &#x60;allowed_tools&#x60;.
        /// </summary>
        /// <value>Allowed tool configuration type. Always &#x60;allowed_tools&#x60;.</value>
        [Required]
        [DataMember(Name="type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; }


        /// <summary>
        /// Constrains the tools available to the model to a pre-defined set.  `auto` allows the model to pick from among the allowed tools and generate a message.  `required` requires the model to call one or more of the allowed tools. 
        /// </summary>
        /// <value>Constrains the tools available to the model to a pre-defined set.  `auto` allows the model to pick from among the allowed tools and generate a message.  `required` requires the model to call one or more of the allowed tools. </value>
        
        public enum ModeEnum
        {
            
            /// <summary>
            /// Enum AutoEnum for auto
            /// </summary>
            [EnumMember(Value = "auto")]
            AutoEnum = 1,
            
            /// <summary>
            /// Enum RequiredEnum for required
            /// </summary>
            [EnumMember(Value = "required")]
            RequiredEnum = 2
        }

        /// <summary>
        /// Constrains the tools available to the model to a pre-defined set.  &#x60;auto&#x60; allows the model to pick from among the allowed tools and generate a message.  &#x60;required&#x60; requires the model to call one or more of the allowed tools. 
        /// </summary>
        /// <value>Constrains the tools available to the model to a pre-defined set.  &#x60;auto&#x60; allows the model to pick from among the allowed tools and generate a message.  &#x60;required&#x60; requires the model to call one or more of the allowed tools. </value>
        [Required]
        [DataMember(Name="mode", EmitDefaultValue=true)]
        public ModeEnum Mode { get; set; }

        /// <summary>
        /// A list of tool definitions that the model should be allowed to call.  For the Responses API, the list of tool definitions might look like: &#x60;&#x60;&#x60;json [   { \&quot;type\&quot;: \&quot;function\&quot;, \&quot;name\&quot;: \&quot;get_weather\&quot; },   { \&quot;type\&quot;: \&quot;mcp\&quot;, \&quot;server_label\&quot;: \&quot;deepwiki\&quot; },   { \&quot;type\&quot;: \&quot;image_generation\&quot; } ] &#x60;&#x60;&#x60; 
        /// </summary>
        /// <value>A list of tool definitions that the model should be allowed to call.  For the Responses API, the list of tool definitions might look like: &#x60;&#x60;&#x60;json [   { \&quot;type\&quot;: \&quot;function\&quot;, \&quot;name\&quot;: \&quot;get_weather\&quot; },   { \&quot;type\&quot;: \&quot;mcp\&quot;, \&quot;server_label\&quot;: \&quot;deepwiki\&quot; },   { \&quot;type\&quot;: \&quot;image_generation\&quot; } ] &#x60;&#x60;&#x60; </value>
        [Required]
        [DataMember(Name="tools", EmitDefaultValue=false)]
        public List<Dictionary<string, Object>> Tools { get; set; }

        /// <summary>
        /// The name of the custom tool to call.
        /// </summary>
        /// <value>The name of the custom tool to call.</value>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The label of the MCP server to use. 
        /// </summary>
        /// <value>The label of the MCP server to use. </value>
        [Required]
        [DataMember(Name="server_label", EmitDefaultValue=false)]
        public string ServerLabel { get; set; }

    }
}
