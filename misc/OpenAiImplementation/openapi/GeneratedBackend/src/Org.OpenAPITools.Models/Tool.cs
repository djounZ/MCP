/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using JsonSubTypes;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// A tool that can be used to generate a response. 
    /// </summary>
    [DataContract]
    public partial class Tool 
    {

        /// <summary>
        /// The type of the function tool. Always `function`.
        /// </summary>
        /// <value>The type of the function tool. Always `function`.</value>
        
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum FunctionEnum for function
            /// </summary>
            [EnumMember(Value = "function")]
            FunctionEnum = 1,
            
            /// <summary>
            /// Enum FileSearchEnum for file_search
            /// </summary>
            [EnumMember(Value = "file_search")]
            FileSearchEnum = 2,
            
            /// <summary>
            /// Enum WebSearchPreviewEnum for web_search_preview
            /// </summary>
            [EnumMember(Value = "web_search_preview")]
            WebSearchPreviewEnum = 3,
            
            /// <summary>
            /// Enum WebSearchPreview20250311Enum for web_search_preview_2025_03_11
            /// </summary>
            [EnumMember(Value = "web_search_preview_2025_03_11")]
            WebSearchPreview20250311Enum = 4,
            
            /// <summary>
            /// Enum ComputerUsePreviewEnum for computer_use_preview
            /// </summary>
            [EnumMember(Value = "computer_use_preview")]
            ComputerUsePreviewEnum = 5,
            
            /// <summary>
            /// Enum McpEnum for mcp
            /// </summary>
            [EnumMember(Value = "mcp")]
            McpEnum = 6,
            
            /// <summary>
            /// Enum CodeInterpreterEnum for code_interpreter
            /// </summary>
            [EnumMember(Value = "code_interpreter")]
            CodeInterpreterEnum = 7,
            
            /// <summary>
            /// Enum ImageGenerationEnum for image_generation
            /// </summary>
            [EnumMember(Value = "image_generation")]
            ImageGenerationEnum = 8,
            
            /// <summary>
            /// Enum LocalShellEnum for local_shell
            /// </summary>
            [EnumMember(Value = "local_shell")]
            LocalShellEnum = 9,
            
            /// <summary>
            /// Enum CustomEnum for custom
            /// </summary>
            [EnumMember(Value = "custom")]
            CustomEnum = 10
        }

        /// <summary>
        /// The type of the function tool. Always &#x60;function&#x60;.
        /// </summary>
        /// <value>The type of the function tool. Always &#x60;function&#x60;.</value>
        [Required]
        [DataMember(Name="type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; } = TypeEnum.FunctionEnum;

        /// <summary>
        /// The name of the custom tool, used to identify it in tool calls.
        /// </summary>
        /// <value>The name of the custom tool, used to identify it in tool calls.</value>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Optional description of the custom tool, used to provide more context. 
        /// </summary>
        /// <value>Optional description of the custom tool, used to provide more context. </value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string? Description { get; set; }

        /// <summary>
        /// A JSON schema object describing the parameters of the function.
        /// </summary>
        /// <value>A JSON schema object describing the parameters of the function.</value>
        [Required]
        [DataMember(Name="parameters", EmitDefaultValue=false)]
        public Dictionary<string, Object> Parameters { get; set; }

        /// <summary>
        /// Whether to enforce strict parameter validation. Default &#x60;true&#x60;.
        /// </summary>
        /// <value>Whether to enforce strict parameter validation. Default &#x60;true&#x60;.</value>
        [Required]
        [DataMember(Name="strict", EmitDefaultValue=true)]
        public bool Strict { get; set; }

        /// <summary>
        /// The IDs of the vector stores to search.
        /// </summary>
        /// <value>The IDs of the vector stores to search.</value>
        [Required]
        [DataMember(Name="vector_store_ids", EmitDefaultValue=false)]
        public List<string> VectorStoreIds { get; set; }

        /// <summary>
        /// The maximum number of results to return. This number should be between 1 and 50 inclusive.
        /// </summary>
        /// <value>The maximum number of results to return. This number should be between 1 and 50 inclusive.</value>
        [DataMember(Name="max_num_results", EmitDefaultValue=true)]
        public int? MaxNumResults { get; set; }

        /// <summary>
        /// Ranking options for search.
        /// </summary>
        /// <value>Ranking options for search.</value>
        [DataMember(Name="ranking_options", EmitDefaultValue=false)]
        public RankingOptions? RankingOptions { get; set; }

        /// <summary>
        /// A filter to apply.
        /// </summary>
        /// <value>A filter to apply.</value>
        [DataMember(Name="filters", EmitDefaultValue=false)]
        public Filters? Filters { get; set; }

        /// <summary>
        /// The user&#39;s location.
        /// </summary>
        /// <value>The user&#39;s location.</value>
        [DataMember(Name="user_location", EmitDefaultValue=false)]
        public ApproximateLocation? UserLocation { get; set; }


        /// <summary>
        /// High level guidance for the amount of context window space to use for the search. One of `low`, `medium`, or `high`. `medium` is the default.
        /// </summary>
        /// <value>High level guidance for the amount of context window space to use for the search. One of `low`, `medium`, or `high`. `medium` is the default.</value>
        
        public enum SearchContextSizeEnum
        {
            
            /// <summary>
            /// Enum LowEnum for low
            /// </summary>
            [EnumMember(Value = "low")]
            LowEnum = 1,
            
            /// <summary>
            /// Enum MediumEnum for medium
            /// </summary>
            [EnumMember(Value = "medium")]
            MediumEnum = 2,
            
            /// <summary>
            /// Enum HighEnum for high
            /// </summary>
            [EnumMember(Value = "high")]
            HighEnum = 3
        }

        /// <summary>
        /// High level guidance for the amount of context window space to use for the search. One of &#x60;low&#x60;, &#x60;medium&#x60;, or &#x60;high&#x60;. &#x60;medium&#x60; is the default.
        /// </summary>
        /// <value>High level guidance for the amount of context window space to use for the search. One of &#x60;low&#x60;, &#x60;medium&#x60;, or &#x60;high&#x60;. &#x60;medium&#x60; is the default.</value>
        [DataMember(Name="search_context_size", EmitDefaultValue=true)]
        public SearchContextSizeEnum SearchContextSize { get; set; }


        /// <summary>
        /// The type of computer environment to control.
        /// </summary>
        /// <value>The type of computer environment to control.</value>
        
        public enum VarEnvironmentEnum
        {
            
            /// <summary>
            /// Enum WindowsEnum for windows
            /// </summary>
            [EnumMember(Value = "windows")]
            WindowsEnum = 1,
            
            /// <summary>
            /// Enum MacEnum for mac
            /// </summary>
            [EnumMember(Value = "mac")]
            MacEnum = 2,
            
            /// <summary>
            /// Enum LinuxEnum for linux
            /// </summary>
            [EnumMember(Value = "linux")]
            LinuxEnum = 3,
            
            /// <summary>
            /// Enum UbuntuEnum for ubuntu
            /// </summary>
            [EnumMember(Value = "ubuntu")]
            UbuntuEnum = 4,
            
            /// <summary>
            /// Enum BrowserEnum for browser
            /// </summary>
            [EnumMember(Value = "browser")]
            BrowserEnum = 5
        }

        /// <summary>
        /// The type of computer environment to control.
        /// </summary>
        /// <value>The type of computer environment to control.</value>
        [Required]
        [DataMember(Name="environment", EmitDefaultValue=true)]
        public VarEnvironmentEnum VarEnvironment { get; set; }

        /// <summary>
        /// The width of the computer display.
        /// </summary>
        /// <value>The width of the computer display.</value>
        [Required]
        [DataMember(Name="display_width", EmitDefaultValue=true)]
        public int DisplayWidth { get; set; }

        /// <summary>
        /// The height of the computer display.
        /// </summary>
        /// <value>The height of the computer display.</value>
        [Required]
        [DataMember(Name="display_height", EmitDefaultValue=true)]
        public int DisplayHeight { get; set; }

        /// <summary>
        /// A label for this MCP server, used to identify it in tool calls. 
        /// </summary>
        /// <value>A label for this MCP server, used to identify it in tool calls. </value>
        [Required]
        [DataMember(Name="server_label", EmitDefaultValue=false)]
        public string ServerLabel { get; set; }

        /// <summary>
        /// The URL for the MCP server. 
        /// </summary>
        /// <value>The URL for the MCP server. </value>
        [Required]
        [DataMember(Name="server_url", EmitDefaultValue=false)]
        public string ServerUrl { get; set; }

        /// <summary>
        /// Optional description of the MCP server, used to provide more context. 
        /// </summary>
        /// <value>Optional description of the MCP server, used to provide more context. </value>
        [DataMember(Name="server_description", EmitDefaultValue=false)]
        public string? ServerDescription { get; set; }

        /// <summary>
        /// Optional HTTP headers to send to the MCP server. Use for authentication or other purposes. 
        /// </summary>
        /// <value>Optional HTTP headers to send to the MCP server. Use for authentication or other purposes. </value>
        [DataMember(Name="headers", EmitDefaultValue=false)]
        public Dictionary<string, string> Headers { get; set; }

        /// <summary>
        /// Gets or Sets AllowedTools
        /// </summary>
        [DataMember(Name="allowed_tools", EmitDefaultValue=false)]
        public MCPToolAllowedTools? AllowedTools { get; set; }

        /// <summary>
        /// Gets or Sets RequireApproval
        /// </summary>
        [DataMember(Name="require_approval", EmitDefaultValue=false)]
        public MCPToolRequireApproval? RequireApproval { get; set; }

        /// <summary>
        /// Gets or Sets Container
        /// </summary>
        [Required]
        [DataMember(Name="container", EmitDefaultValue=false)]
        public CodeInterpreterToolContainer Container { get; set; }


        /// <summary>
        /// The image generation model to use. Default: `gpt-image-1`. 
        /// </summary>
        /// <value>The image generation model to use. Default: `gpt-image-1`. </value>
        
        public enum ModelEnum
        {
            
            /// <summary>
            /// Enum GptImage1Enum for gpt-image-1
            /// </summary>
            [EnumMember(Value = "gpt-image-1")]
            GptImage1Enum = 1
        }

        /// <summary>
        /// The image generation model to use. Default: &#x60;gpt-image-1&#x60;. 
        /// </summary>
        /// <value>The image generation model to use. Default: &#x60;gpt-image-1&#x60;. </value>
        [DataMember(Name="model", EmitDefaultValue=true)]
        public ModelEnum Model { get; set; } = ModelEnum.GptImage1Enum;


        /// <summary>
        /// The quality of the generated image. One of `low`, `medium`, `high`,  or `auto`. Default: `auto`. 
        /// </summary>
        /// <value>The quality of the generated image. One of `low`, `medium`, `high`,  or `auto`. Default: `auto`. </value>
        
        public enum QualityEnum
        {
            
            /// <summary>
            /// Enum LowEnum for low
            /// </summary>
            [EnumMember(Value = "low")]
            LowEnum = 1,
            
            /// <summary>
            /// Enum MediumEnum for medium
            /// </summary>
            [EnumMember(Value = "medium")]
            MediumEnum = 2,
            
            /// <summary>
            /// Enum HighEnum for high
            /// </summary>
            [EnumMember(Value = "high")]
            HighEnum = 3,
            
            /// <summary>
            /// Enum AutoEnum for auto
            /// </summary>
            [EnumMember(Value = "auto")]
            AutoEnum = 4
        }

        /// <summary>
        /// The quality of the generated image. One of &#x60;low&#x60;, &#x60;medium&#x60;, &#x60;high&#x60;,  or &#x60;auto&#x60;. Default: &#x60;auto&#x60;. 
        /// </summary>
        /// <value>The quality of the generated image. One of &#x60;low&#x60;, &#x60;medium&#x60;, &#x60;high&#x60;,  or &#x60;auto&#x60;. Default: &#x60;auto&#x60;. </value>
        [DataMember(Name="quality", EmitDefaultValue=true)]
        public QualityEnum Quality { get; set; } = QualityEnum.AutoEnum;


        /// <summary>
        /// The size of the generated image. One of `1024x1024`, `1024x1536`,  `1536x1024`, or `auto`. Default: `auto`. 
        /// </summary>
        /// <value>The size of the generated image. One of `1024x1024`, `1024x1536`,  `1536x1024`, or `auto`. Default: `auto`. </value>
        
        public enum SizeEnum
        {
            
            /// <summary>
            /// Enum _1024x1024Enum for 1024x1024
            /// </summary>
            [EnumMember(Value = "1024x1024")]
            _1024x1024Enum = 1,
            
            /// <summary>
            /// Enum _1024x1536Enum for 1024x1536
            /// </summary>
            [EnumMember(Value = "1024x1536")]
            _1024x1536Enum = 2,
            
            /// <summary>
            /// Enum _1536x1024Enum for 1536x1024
            /// </summary>
            [EnumMember(Value = "1536x1024")]
            _1536x1024Enum = 3,
            
            /// <summary>
            /// Enum AutoEnum for auto
            /// </summary>
            [EnumMember(Value = "auto")]
            AutoEnum = 4
        }

        /// <summary>
        /// The size of the generated image. One of &#x60;1024x1024&#x60;, &#x60;1024x1536&#x60;,  &#x60;1536x1024&#x60;, or &#x60;auto&#x60;. Default: &#x60;auto&#x60;. 
        /// </summary>
        /// <value>The size of the generated image. One of &#x60;1024x1024&#x60;, &#x60;1024x1536&#x60;,  &#x60;1536x1024&#x60;, or &#x60;auto&#x60;. Default: &#x60;auto&#x60;. </value>
        [DataMember(Name="size", EmitDefaultValue=true)]
        public SizeEnum Size { get; set; } = SizeEnum.AutoEnum;


        /// <summary>
        /// The output format of the generated image. One of `png`, `webp`, or  `jpeg`. Default: `png`. 
        /// </summary>
        /// <value>The output format of the generated image. One of `png`, `webp`, or  `jpeg`. Default: `png`. </value>
        
        public enum OutputFormatEnum
        {
            
            /// <summary>
            /// Enum PngEnum for png
            /// </summary>
            [EnumMember(Value = "png")]
            PngEnum = 1,
            
            /// <summary>
            /// Enum WebpEnum for webp
            /// </summary>
            [EnumMember(Value = "webp")]
            WebpEnum = 2,
            
            /// <summary>
            /// Enum JpegEnum for jpeg
            /// </summary>
            [EnumMember(Value = "jpeg")]
            JpegEnum = 3
        }

        /// <summary>
        /// The output format of the generated image. One of &#x60;png&#x60;, &#x60;webp&#x60;, or  &#x60;jpeg&#x60;. Default: &#x60;png&#x60;. 
        /// </summary>
        /// <value>The output format of the generated image. One of &#x60;png&#x60;, &#x60;webp&#x60;, or  &#x60;jpeg&#x60;. Default: &#x60;png&#x60;. </value>
        [DataMember(Name="output_format", EmitDefaultValue=true)]
        public OutputFormatEnum OutputFormat { get; set; } = OutputFormatEnum.PngEnum;

        /// <summary>
        /// Compression level for the output image. Default: 100. 
        /// </summary>
        /// <value>Compression level for the output image. Default: 100. </value>
        [Range(0, 100)]
        [DataMember(Name="output_compression", EmitDefaultValue=true)]
        public int? OutputCompression { get; set; } = 100;


        /// <summary>
        /// Moderation level for the generated image. Default: `auto`. 
        /// </summary>
        /// <value>Moderation level for the generated image. Default: `auto`. </value>
        
        public enum ModerationEnum
        {
            
            /// <summary>
            /// Enum AutoEnum for auto
            /// </summary>
            [EnumMember(Value = "auto")]
            AutoEnum = 1,
            
            /// <summary>
            /// Enum LowEnum for low
            /// </summary>
            [EnumMember(Value = "low")]
            LowEnum = 2
        }

        /// <summary>
        /// Moderation level for the generated image. Default: &#x60;auto&#x60;. 
        /// </summary>
        /// <value>Moderation level for the generated image. Default: &#x60;auto&#x60;. </value>
        [DataMember(Name="moderation", EmitDefaultValue=true)]
        public ModerationEnum Moderation { get; set; } = ModerationEnum.AutoEnum;


        /// <summary>
        /// Background type for the generated image. One of `transparent`,  `opaque`, or `auto`. Default: `auto`. 
        /// </summary>
        /// <value>Background type for the generated image. One of `transparent`,  `opaque`, or `auto`. Default: `auto`. </value>
        
        public enum BackgroundEnum
        {
            
            /// <summary>
            /// Enum TransparentEnum for transparent
            /// </summary>
            [EnumMember(Value = "transparent")]
            TransparentEnum = 1,
            
            /// <summary>
            /// Enum OpaqueEnum for opaque
            /// </summary>
            [EnumMember(Value = "opaque")]
            OpaqueEnum = 2,
            
            /// <summary>
            /// Enum AutoEnum for auto
            /// </summary>
            [EnumMember(Value = "auto")]
            AutoEnum = 3
        }

        /// <summary>
        /// Background type for the generated image. One of &#x60;transparent&#x60;,  &#x60;opaque&#x60;, or &#x60;auto&#x60;. Default: &#x60;auto&#x60;. 
        /// </summary>
        /// <value>Background type for the generated image. One of &#x60;transparent&#x60;,  &#x60;opaque&#x60;, or &#x60;auto&#x60;. Default: &#x60;auto&#x60;. </value>
        [DataMember(Name="background", EmitDefaultValue=true)]
        public BackgroundEnum Background { get; set; } = BackgroundEnum.AutoEnum;

        /// <summary>
        /// Gets or Sets InputFidelity
        /// </summary>
        [DataMember(Name="input_fidelity", EmitDefaultValue=true)]
        public ImageInputFidelity InputFidelity { get; set; }

        /// <summary>
        /// Gets or Sets InputImageMask
        /// </summary>
        [DataMember(Name="input_image_mask", EmitDefaultValue=false)]
        public ImageGenToolInputImageMask? InputImageMask { get; set; }

        /// <summary>
        /// Number of partial images to generate in streaming mode, from 0 (default value) to 3. 
        /// </summary>
        /// <value>Number of partial images to generate in streaming mode, from 0 (default value) to 3. </value>
        [Range(0, 3)]
        [DataMember(Name="partial_images", EmitDefaultValue=true)]
        public int? PartialImages { get; set; } = 0;

        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [DataMember(Name="format", EmitDefaultValue=false)]
        public CustomToolFormat? Format { get; set; }

    }
}
