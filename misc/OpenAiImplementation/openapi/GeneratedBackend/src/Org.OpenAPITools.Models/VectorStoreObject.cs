/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// A vector store is a collection of processed files can be used by the &#x60;file_search&#x60; tool.
    /// </summary>
    [DataContract]
    public partial class VectorStoreObject 
    {
        /// <summary>
        /// The identifier, which can be referenced in API endpoints.
        /// </summary>
        /// <value>The identifier, which can be referenced in API endpoints.</value>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }


        /// <summary>
        /// The object type, which is always `vector_store`.
        /// </summary>
        /// <value>The object type, which is always `vector_store`.</value>
        
        public enum ObjectEnum
        {
            
            /// <summary>
            /// Enum VectorStoreEnum for vector_store
            /// </summary>
            [EnumMember(Value = "vector_store")]
            VectorStoreEnum = 1
        }

        /// <summary>
        /// The object type, which is always &#x60;vector_store&#x60;.
        /// </summary>
        /// <value>The object type, which is always &#x60;vector_store&#x60;.</value>
        [Required]
        [DataMember(Name="object", EmitDefaultValue=true)]
        public ObjectEnum Object { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the vector store was created.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the vector store was created.</value>
        [Required]
        [DataMember(Name="created_at", EmitDefaultValue=true)]
        public int CreatedAt { get; set; }

        /// <summary>
        /// The name of the vector store.
        /// </summary>
        /// <value>The name of the vector store.</value>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The total number of bytes used by the files in the vector store.
        /// </summary>
        /// <value>The total number of bytes used by the files in the vector store.</value>
        [Required]
        [DataMember(Name="usage_bytes", EmitDefaultValue=true)]
        public int UsageBytes { get; set; }

        /// <summary>
        /// Gets or Sets FileCounts
        /// </summary>
        [Required]
        [DataMember(Name="file_counts", EmitDefaultValue=false)]
        public VectorStoreObjectFileCounts FileCounts { get; set; }


        /// <summary>
        /// The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use.
        /// </summary>
        /// <value>The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use.</value>
        
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum ExpiredEnum for expired
            /// </summary>
            [EnumMember(Value = "expired")]
            ExpiredEnum = 1,
            
            /// <summary>
            /// Enum InProgressEnum for in_progress
            /// </summary>
            [EnumMember(Value = "in_progress")]
            InProgressEnum = 2,
            
            /// <summary>
            /// Enum CompletedEnum for completed
            /// </summary>
            [EnumMember(Value = "completed")]
            CompletedEnum = 3
        }

        /// <summary>
        /// The status of the vector store, which can be either &#x60;expired&#x60;, &#x60;in_progress&#x60;, or &#x60;completed&#x60;. A status of &#x60;completed&#x60; indicates that the vector store is ready for use.
        /// </summary>
        /// <value>The status of the vector store, which can be either &#x60;expired&#x60;, &#x60;in_progress&#x60;, or &#x60;completed&#x60;. A status of &#x60;completed&#x60; indicates that the vector store is ready for use.</value>
        [Required]
        [DataMember(Name="status", EmitDefaultValue=true)]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// Gets or Sets ExpiresAfter
        /// </summary>
        [DataMember(Name="expires_after", EmitDefaultValue=false)]
        public VectorStoreExpirationAfter? ExpiresAfter { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the vector store will expire.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the vector store will expire.</value>
        [DataMember(Name="expires_at", EmitDefaultValue=true)]
        public int? ExpiresAt { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the vector store was last active.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the vector store was last active.</value>
        [Required]
        [DataMember(Name="last_active_at", EmitDefaultValue=true)]
        public int LastActiveAt { get; set; }

        /// <summary>
        /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.   Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters. 
        /// </summary>
        /// <value>Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.   Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters. </value>
        [Required]
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Dictionary<string, string> Metadata { get; set; }

    }
}
