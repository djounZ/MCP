/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using System.Text.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class AssistantsApiController : ControllerBase
    { 
        /// <summary>
        /// Cancel a run
        /// </summary>
        /// <remarks>Cancels a run that is &#x60;in_progress&#x60;.</remarks>
        /// <param name="threadId">The ID of the thread to which this run belongs.</param>
        /// <param name="runId">The ID of the run to cancel.</param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/threads/{thread_id}/runs/{run_id}/cancel")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(RunObject))]
        public virtual IActionResult CancelRun([FromRoute (Name = "thread_id")][Required]string threadId, [FromRoute (Name = "run_id")][Required]string runId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"cancelled_at\" : 5,\r\n  \"instructions\" : \"instructions\",\r\n  \"metadata\" : {\r\n    \"key\" : \"metadata\"\r\n  },\r\n  \"assistant_id\" : \"assistant_id\",\r\n  \"required_action\" : {\r\n    \"submit_tool_outputs\" : {\r\n      \"tool_calls\" : [ {\r\n        \"function\" : {\r\n          \"name\" : \"name\",\r\n          \"arguments\" : \"arguments\"\r\n        },\r\n        \"id\" : \"id\",\r\n        \"type\" : \"function\"\r\n      }, {\r\n        \"function\" : {\r\n          \"name\" : \"name\",\r\n          \"arguments\" : \"arguments\"\r\n        },\r\n        \"id\" : \"id\",\r\n        \"type\" : \"function\"\r\n      } ]\r\n    },\r\n    \"type\" : \"submit_tool_outputs\"\r\n  },\r\n  \"usage\" : {\r\n    \"completion_tokens\" : 7,\r\n    \"prompt_tokens\" : 9,\r\n    \"total_tokens\" : 3\r\n  },\r\n  \"created_at\" : 0,\r\n  \"tools\" : [ {\r\n    \"type\" : \"code_interpreter\"\r\n  }, {\r\n    \"type\" : \"code_interpreter\"\r\n  }, {\r\n    \"type\" : \"code_interpreter\"\r\n  }, {\r\n    \"type\" : \"code_interpreter\"\r\n  }, {\r\n    \"type\" : \"code_interpreter\"\r\n  } ],\r\n  \"top_p\" : 4.145608029883936,\r\n  \"max_completion_tokens\" : 256,\r\n  \"thread_id\" : \"thread_id\",\r\n  \"expires_at\" : 6,\r\n  \"response_format\" : \"auto\",\r\n  \"temperature\" : 2.027123023002322,\r\n  \"tool_choice\" : \"\",\r\n  \"model\" : \"model\",\r\n  \"id\" : \"id\",\r\n  \"last_error\" : {\r\n    \"code\" : \"server_error\",\r\n    \"message\" : \"message\"\r\n  },\r\n  \"incomplete_details\" : {\r\n    \"reason\" : \"max_completion_tokens\"\r\n  },\r\n  \"truncation_strategy\" : \"\",\r\n  \"completed_at\" : 2,\r\n  \"parallel_tool_calls\" : true,\r\n  \"started_at\" : 1,\r\n  \"failed_at\" : 5,\r\n  \"max_prompt_tokens\" : 256,\r\n  \"object\" : \"thread.run\",\r\n  \"status\" : \"queued\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<RunObject>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create assistant
        /// </summary>
        /// <remarks>Create an assistant with a model and instructions.</remarks>
        /// <param name="createAssistantRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/assistants")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(AssistantObject))]
        public virtual IActionResult CreateAssistant([FromBody]CreateAssistantRequest createAssistantRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"instructions\" : \"instructions\",\r\n  \"tool_resources\" : {\r\n    \"code_interpreter\" : {\r\n      \"file_ids\" : [ \"file_ids\", \"file_ids\", \"file_ids\", \"file_ids\", \"file_ids\" ]\r\n    },\r\n    \"file_search\" : {\r\n      \"vector_store_ids\" : [ \"vector_store_ids\" ]\r\n    }\r\n  },\r\n  \"metadata\" : {\r\n    \"key\" : \"metadata\"\r\n  },\r\n  \"created_at\" : 0,\r\n  \"description\" : \"description\",\r\n  \"tools\" : [ {\r\n    \"type\" : \"code_interpreter\"\r\n  }, {\r\n    \"type\" : \"code_interpreter\"\r\n  }, {\r\n    \"type\" : \"code_interpreter\"\r\n  }, {\r\n    \"type\" : \"code_interpreter\"\r\n  }, {\r\n    \"type\" : \"code_interpreter\"\r\n  } ],\r\n  \"top_p\" : 1,\r\n  \"response_format\" : \"auto\",\r\n  \"name\" : \"name\",\r\n  \"temperature\" : 1,\r\n  \"model\" : \"model\",\r\n  \"id\" : \"id\",\r\n  \"object\" : \"assistant\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<AssistantObject>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create message
        /// </summary>
        /// <remarks>Create a message.</remarks>
        /// <param name="threadId">The ID of the [thread](https://platform.openai.com/docs/api-reference/threads) to create a message for.</param>
        /// <param name="createMessageRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/threads/{thread_id}/messages")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(MessageObject))]
        public virtual IActionResult CreateMessage([FromRoute (Name = "thread_id")][Required]string threadId, [FromBody]CreateMessageRequest createMessageRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"metadata\" : {\r\n    \"key\" : \"metadata\"\r\n  },\r\n  \"role\" : \"user\",\r\n  \"assistant_id\" : \"assistant_id\",\r\n  \"run_id\" : \"run_id\",\r\n  \"attachments\" : [ {\r\n    \"file_id\" : \"file_id\",\r\n    \"tools\" : [ {\r\n      \"type\" : \"code_interpreter\"\r\n    }, {\r\n      \"type\" : \"code_interpreter\"\r\n    } ]\r\n  }, {\r\n    \"file_id\" : \"file_id\",\r\n    \"tools\" : [ {\r\n      \"type\" : \"code_interpreter\"\r\n    }, {\r\n      \"type\" : \"code_interpreter\"\r\n    } ]\r\n  } ],\r\n  \"created_at\" : 0,\r\n  \"content\" : [ {\r\n    \"image_file\" : {\r\n      \"file_id\" : \"file_id\",\r\n      \"detail\" : \"auto\"\r\n    },\r\n    \"type\" : \"image_file\"\r\n  }, {\r\n    \"image_file\" : {\r\n      \"file_id\" : \"file_id\",\r\n      \"detail\" : \"auto\"\r\n    },\r\n    \"type\" : \"image_file\"\r\n  } ],\r\n  \"completed_at\" : 6,\r\n  \"thread_id\" : \"thread_id\",\r\n  \"id\" : \"id\",\r\n  \"incomplete_at\" : 1,\r\n  \"incomplete_details\" : {\r\n    \"reason\" : \"content_filter\"\r\n  },\r\n  \"object\" : \"thread.message\",\r\n  \"status\" : \"in_progress\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<MessageObject>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create run
        /// </summary>
        /// <remarks>Create a run.</remarks>
        /// <param name="threadId">The ID of the thread to run.</param>
        /// <param name="createRunRequest"></param>
        /// <param name="include">A list of additional fields to include in the response. Currently the only supported value is &#x60;step_details.tool_calls[*].file_search.results[*].content&#x60; to fetch the file search result content.  See the [file search tool documentation](https://platform.openai.com/docs/assistants/tools/file-search#customizing-file-search-settings) for more information. </param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/threads/{thread_id}/runs")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(RunObject))]
        public virtual IActionResult CreateRun([FromRoute (Name = "thread_id")][Required]string threadId, [FromBody]CreateRunRequest createRunRequest, [FromQuery (Name = "include[]")]List<string>? include)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"cancelled_at\" : 5,\r\n  \"instructions\" : \"instructions\",\r\n  \"metadata\" : {\r\n    \"key\" : \"metadata\"\r\n  },\r\n  \"assistant_id\" : \"assistant_id\",\r\n  \"required_action\" : {\r\n    \"submit_tool_outputs\" : {\r\n      \"tool_calls\" : [ {\r\n        \"function\" : {\r\n          \"name\" : \"name\",\r\n          \"arguments\" : \"arguments\"\r\n        },\r\n        \"id\" : \"id\",\r\n        \"type\" : \"function\"\r\n      }, {\r\n        \"function\" : {\r\n          \"name\" : \"name\",\r\n          \"arguments\" : \"arguments\"\r\n        },\r\n        \"id\" : \"id\",\r\n        \"type\" : \"function\"\r\n      } ]\r\n    },\r\n    \"type\" : \"submit_tool_outputs\"\r\n  },\r\n  \"usage\" : {\r\n    \"completion_tokens\" : 7,\r\n    \"prompt_tokens\" : 9,\r\n    \"total_tokens\" : 3\r\n  },\r\n  \"created_at\" : 0,\r\n  \"tools\" : [ {\r\n    \"type\" : \"code_interpreter\"\r\n  }, {\r\n    \"type\" : \"code_interpreter\"\r\n  }, {\r\n    \"type\" : \"code_interpreter\"\r\n  }, {\r\n    \"type\" : \"code_interpreter\"\r\n  }, {\r\n    \"type\" : \"code_interpreter\"\r\n  } ],\r\n  \"top_p\" : 4.145608029883936,\r\n  \"max_completion_tokens\" : 256,\r\n  \"thread_id\" : \"thread_id\",\r\n  \"expires_at\" : 6,\r\n  \"response_format\" : \"auto\",\r\n  \"temperature\" : 2.027123023002322,\r\n  \"tool_choice\" : \"\",\r\n  \"model\" : \"model\",\r\n  \"id\" : \"id\",\r\n  \"last_error\" : {\r\n    \"code\" : \"server_error\",\r\n    \"message\" : \"message\"\r\n  },\r\n  \"incomplete_details\" : {\r\n    \"reason\" : \"max_completion_tokens\"\r\n  },\r\n  \"truncation_strategy\" : \"\",\r\n  \"completed_at\" : 2,\r\n  \"parallel_tool_calls\" : true,\r\n  \"started_at\" : 1,\r\n  \"failed_at\" : 5,\r\n  \"max_prompt_tokens\" : 256,\r\n  \"object\" : \"thread.run\",\r\n  \"status\" : \"queued\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<RunObject>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create thread
        /// </summary>
        /// <remarks>Create a thread.</remarks>
        /// <param name="createThreadRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/threads")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ThreadObject))]
        public virtual IActionResult CreateThread([FromBody]CreateThreadRequest? createThreadRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"tool_resources\" : {\r\n    \"code_interpreter\" : {\r\n      \"file_ids\" : [ \"file_ids\", \"file_ids\", \"file_ids\", \"file_ids\", \"file_ids\" ]\r\n    },\r\n    \"file_search\" : {\r\n      \"vector_store_ids\" : [ \"vector_store_ids\" ]\r\n    }\r\n  },\r\n  \"metadata\" : {\r\n    \"key\" : \"metadata\"\r\n  },\r\n  \"created_at\" : 0,\r\n  \"id\" : \"id\",\r\n  \"object\" : \"thread\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<ThreadObject>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create thread and run
        /// </summary>
        /// <remarks>Create a thread and run it in one request.</remarks>
        /// <param name="createThreadAndRunRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/threads/runs")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(RunObject))]
        public virtual IActionResult CreateThreadAndRun([FromBody]CreateThreadAndRunRequest createThreadAndRunRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"cancelled_at\" : 5,\r\n  \"instructions\" : \"instructions\",\r\n  \"metadata\" : {\r\n    \"key\" : \"metadata\"\r\n  },\r\n  \"assistant_id\" : \"assistant_id\",\r\n  \"required_action\" : {\r\n    \"submit_tool_outputs\" : {\r\n      \"tool_calls\" : [ {\r\n        \"function\" : {\r\n          \"name\" : \"name\",\r\n          \"arguments\" : \"arguments\"\r\n        },\r\n        \"id\" : \"id\",\r\n        \"type\" : \"function\"\r\n      }, {\r\n        \"function\" : {\r\n          \"name\" : \"name\",\r\n          \"arguments\" : \"arguments\"\r\n        },\r\n        \"id\" : \"id\",\r\n        \"type\" : \"function\"\r\n      } ]\r\n    },\r\n    \"type\" : \"submit_tool_outputs\"\r\n  },\r\n  \"usage\" : {\r\n    \"completion_tokens\" : 7,\r\n    \"prompt_tokens\" : 9,\r\n    \"total_tokens\" : 3\r\n  },\r\n  \"created_at\" : 0,\r\n  \"tools\" : [ {\r\n    \"type\" : \"code_interpreter\"\r\n  }, {\r\n    \"type\" : \"code_interpreter\"\r\n  }, {\r\n    \"type\" : \"code_interpreter\"\r\n  }, {\r\n    \"type\" : \"code_interpreter\"\r\n  }, {\r\n    \"type\" : \"code_interpreter\"\r\n  } ],\r\n  \"top_p\" : 4.145608029883936,\r\n  \"max_completion_tokens\" : 256,\r\n  \"thread_id\" : \"thread_id\",\r\n  \"expires_at\" : 6,\r\n  \"response_format\" : \"auto\",\r\n  \"temperature\" : 2.027123023002322,\r\n  \"tool_choice\" : \"\",\r\n  \"model\" : \"model\",\r\n  \"id\" : \"id\",\r\n  \"last_error\" : {\r\n    \"code\" : \"server_error\",\r\n    \"message\" : \"message\"\r\n  },\r\n  \"incomplete_details\" : {\r\n    \"reason\" : \"max_completion_tokens\"\r\n  },\r\n  \"truncation_strategy\" : \"\",\r\n  \"completed_at\" : 2,\r\n  \"parallel_tool_calls\" : true,\r\n  \"started_at\" : 1,\r\n  \"failed_at\" : 5,\r\n  \"max_prompt_tokens\" : 256,\r\n  \"object\" : \"thread.run\",\r\n  \"status\" : \"queued\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<RunObject>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete assistant
        /// </summary>
        /// <remarks>Delete an assistant.</remarks>
        /// <param name="assistantId">The ID of the assistant to delete.</param>
        /// <response code="200">OK</response>
        [HttpDelete]
        [Route("/v1/assistants/{assistant_id}")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(DeleteAssistantResponse))]
        public virtual IActionResult DeleteAssistant([FromRoute (Name = "assistant_id")][Required]string assistantId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"deleted\" : true,\r\n  \"id\" : \"id\",\r\n  \"object\" : \"assistant.deleted\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<DeleteAssistantResponse>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete message
        /// </summary>
        /// <remarks>Deletes a message.</remarks>
        /// <param name="threadId">The ID of the thread to which this message belongs.</param>
        /// <param name="messageId">The ID of the message to delete.</param>
        /// <response code="200">OK</response>
        [HttpDelete]
        [Route("/v1/threads/{thread_id}/messages/{message_id}")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(DeleteMessageResponse))]
        public virtual IActionResult DeleteMessage([FromRoute (Name = "thread_id")][Required]string threadId, [FromRoute (Name = "message_id")][Required]string messageId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"deleted\" : true,\r\n  \"id\" : \"id\",\r\n  \"object\" : \"thread.message.deleted\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<DeleteMessageResponse>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete thread
        /// </summary>
        /// <remarks>Delete a thread.</remarks>
        /// <param name="threadId">The ID of the thread to delete.</param>
        /// <response code="200">OK</response>
        [HttpDelete]
        [Route("/v1/threads/{thread_id}")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(DeleteThreadResponse))]
        public virtual IActionResult DeleteThread([FromRoute (Name = "thread_id")][Required]string threadId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"deleted\" : true,\r\n  \"id\" : \"id\",\r\n  \"object\" : \"thread.deleted\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<DeleteThreadResponse>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieve assistant
        /// </summary>
        /// <remarks>Retrieves an assistant.</remarks>
        /// <param name="assistantId">The ID of the assistant to retrieve.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/assistants/{assistant_id}")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(AssistantObject))]
        public virtual IActionResult GetAssistant([FromRoute (Name = "assistant_id")][Required]string assistantId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"instructions\" : \"instructions\",\r\n  \"tool_resources\" : {\r\n    \"code_interpreter\" : {\r\n      \"file_ids\" : [ \"file_ids\", \"file_ids\", \"file_ids\", \"file_ids\", \"file_ids\" ]\r\n    },\r\n    \"file_search\" : {\r\n      \"vector_store_ids\" : [ \"vector_store_ids\" ]\r\n    }\r\n  },\r\n  \"metadata\" : {\r\n    \"key\" : \"metadata\"\r\n  },\r\n  \"created_at\" : 0,\r\n  \"description\" : \"description\",\r\n  \"tools\" : [ {\r\n    \"type\" : \"code_interpreter\"\r\n  }, {\r\n    \"type\" : \"code_interpreter\"\r\n  }, {\r\n    \"type\" : \"code_interpreter\"\r\n  }, {\r\n    \"type\" : \"code_interpreter\"\r\n  }, {\r\n    \"type\" : \"code_interpreter\"\r\n  } ],\r\n  \"top_p\" : 1,\r\n  \"response_format\" : \"auto\",\r\n  \"name\" : \"name\",\r\n  \"temperature\" : 1,\r\n  \"model\" : \"model\",\r\n  \"id\" : \"id\",\r\n  \"object\" : \"assistant\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<AssistantObject>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieve message
        /// </summary>
        /// <remarks>Retrieve a message.</remarks>
        /// <param name="threadId">The ID of the [thread](https://platform.openai.com/docs/api-reference/threads) to which this message belongs.</param>
        /// <param name="messageId">The ID of the message to retrieve.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/threads/{thread_id}/messages/{message_id}")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(MessageObject))]
        public virtual IActionResult GetMessage([FromRoute (Name = "thread_id")][Required]string threadId, [FromRoute (Name = "message_id")][Required]string messageId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"metadata\" : {\r\n    \"key\" : \"metadata\"\r\n  },\r\n  \"role\" : \"user\",\r\n  \"assistant_id\" : \"assistant_id\",\r\n  \"run_id\" : \"run_id\",\r\n  \"attachments\" : [ {\r\n    \"file_id\" : \"file_id\",\r\n    \"tools\" : [ {\r\n      \"type\" : \"code_interpreter\"\r\n    }, {\r\n      \"type\" : \"code_interpreter\"\r\n    } ]\r\n  }, {\r\n    \"file_id\" : \"file_id\",\r\n    \"tools\" : [ {\r\n      \"type\" : \"code_interpreter\"\r\n    }, {\r\n      \"type\" : \"code_interpreter\"\r\n    } ]\r\n  } ],\r\n  \"created_at\" : 0,\r\n  \"content\" : [ {\r\n    \"image_file\" : {\r\n      \"file_id\" : \"file_id\",\r\n      \"detail\" : \"auto\"\r\n    },\r\n    \"type\" : \"image_file\"\r\n  }, {\r\n    \"image_file\" : {\r\n      \"file_id\" : \"file_id\",\r\n      \"detail\" : \"auto\"\r\n    },\r\n    \"type\" : \"image_file\"\r\n  } ],\r\n  \"completed_at\" : 6,\r\n  \"thread_id\" : \"thread_id\",\r\n  \"id\" : \"id\",\r\n  \"incomplete_at\" : 1,\r\n  \"incomplete_details\" : {\r\n    \"reason\" : \"content_filter\"\r\n  },\r\n  \"object\" : \"thread.message\",\r\n  \"status\" : \"in_progress\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<MessageObject>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieve run
        /// </summary>
        /// <remarks>Retrieves a run.</remarks>
        /// <param name="threadId">The ID of the [thread](https://platform.openai.com/docs/api-reference/threads) that was run.</param>
        /// <param name="runId">The ID of the run to retrieve.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/threads/{thread_id}/runs/{run_id}")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(RunObject))]
        public virtual IActionResult GetRun([FromRoute (Name = "thread_id")][Required]string threadId, [FromRoute (Name = "run_id")][Required]string runId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"cancelled_at\" : 5,\r\n  \"instructions\" : \"instructions\",\r\n  \"metadata\" : {\r\n    \"key\" : \"metadata\"\r\n  },\r\n  \"assistant_id\" : \"assistant_id\",\r\n  \"required_action\" : {\r\n    \"submit_tool_outputs\" : {\r\n      \"tool_calls\" : [ {\r\n        \"function\" : {\r\n          \"name\" : \"name\",\r\n          \"arguments\" : \"arguments\"\r\n        },\r\n        \"id\" : \"id\",\r\n        \"type\" : \"function\"\r\n      }, {\r\n        \"function\" : {\r\n          \"name\" : \"name\",\r\n          \"arguments\" : \"arguments\"\r\n        },\r\n        \"id\" : \"id\",\r\n        \"type\" : \"function\"\r\n      } ]\r\n    },\r\n    \"type\" : \"submit_tool_outputs\"\r\n  },\r\n  \"usage\" : {\r\n    \"completion_tokens\" : 7,\r\n    \"prompt_tokens\" : 9,\r\n    \"total_tokens\" : 3\r\n  },\r\n  \"created_at\" : 0,\r\n  \"tools\" : [ {\r\n    \"type\" : \"code_interpreter\"\r\n  }, {\r\n    \"type\" : \"code_interpreter\"\r\n  }, {\r\n    \"type\" : \"code_interpreter\"\r\n  }, {\r\n    \"type\" : \"code_interpreter\"\r\n  }, {\r\n    \"type\" : \"code_interpreter\"\r\n  } ],\r\n  \"top_p\" : 4.145608029883936,\r\n  \"max_completion_tokens\" : 256,\r\n  \"thread_id\" : \"thread_id\",\r\n  \"expires_at\" : 6,\r\n  \"response_format\" : \"auto\",\r\n  \"temperature\" : 2.027123023002322,\r\n  \"tool_choice\" : \"\",\r\n  \"model\" : \"model\",\r\n  \"id\" : \"id\",\r\n  \"last_error\" : {\r\n    \"code\" : \"server_error\",\r\n    \"message\" : \"message\"\r\n  },\r\n  \"incomplete_details\" : {\r\n    \"reason\" : \"max_completion_tokens\"\r\n  },\r\n  \"truncation_strategy\" : \"\",\r\n  \"completed_at\" : 2,\r\n  \"parallel_tool_calls\" : true,\r\n  \"started_at\" : 1,\r\n  \"failed_at\" : 5,\r\n  \"max_prompt_tokens\" : 256,\r\n  \"object\" : \"thread.run\",\r\n  \"status\" : \"queued\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<RunObject>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieve run step
        /// </summary>
        /// <remarks>Retrieves a run step.</remarks>
        /// <param name="threadId">The ID of the thread to which the run and run step belongs.</param>
        /// <param name="runId">The ID of the run to which the run step belongs.</param>
        /// <param name="stepId">The ID of the run step to retrieve.</param>
        /// <param name="include">A list of additional fields to include in the response. Currently the only supported value is &#x60;step_details.tool_calls[*].file_search.results[*].content&#x60; to fetch the file search result content.  See the [file search tool documentation](https://platform.openai.com/docs/assistants/tools/file-search#customizing-file-search-settings) for more information. </param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/threads/{thread_id}/runs/{run_id}/steps/{step_id}")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(RunStepObject))]
        public virtual IActionResult GetRunStep([FromRoute (Name = "thread_id")][Required]string threadId, [FromRoute (Name = "run_id")][Required]string runId, [FromRoute (Name = "step_id")][Required]string stepId, [FromQuery (Name = "include[]")]List<string>? include)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"cancelled_at\" : 1,\r\n  \"metadata\" : {\r\n    \"key\" : \"metadata\"\r\n  },\r\n  \"assistant_id\" : \"assistant_id\",\r\n  \"run_id\" : \"run_id\",\r\n  \"usage\" : {\r\n    \"completion_tokens\" : 2,\r\n    \"prompt_tokens\" : 7,\r\n    \"total_tokens\" : 9\r\n  },\r\n  \"created_at\" : 0,\r\n  \"expired_at\" : 6,\r\n  \"type\" : \"message_creation\",\r\n  \"step_details\" : {\r\n    \"message_creation\" : {\r\n      \"message_id\" : \"message_id\"\r\n    },\r\n    \"type\" : \"message_creation\"\r\n  },\r\n  \"completed_at\" : 5,\r\n  \"thread_id\" : \"thread_id\",\r\n  \"id\" : \"id\",\r\n  \"last_error\" : {\r\n    \"code\" : \"server_error\",\r\n    \"message\" : \"message\"\r\n  },\r\n  \"failed_at\" : 5,\r\n  \"object\" : \"thread.run.step\",\r\n  \"status\" : \"in_progress\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<RunStepObject>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieve thread
        /// </summary>
        /// <remarks>Retrieves a thread.</remarks>
        /// <param name="threadId">The ID of the thread to retrieve.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/threads/{thread_id}")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ThreadObject))]
        public virtual IActionResult GetThread([FromRoute (Name = "thread_id")][Required]string threadId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"tool_resources\" : {\r\n    \"code_interpreter\" : {\r\n      \"file_ids\" : [ \"file_ids\", \"file_ids\", \"file_ids\", \"file_ids\", \"file_ids\" ]\r\n    },\r\n    \"file_search\" : {\r\n      \"vector_store_ids\" : [ \"vector_store_ids\" ]\r\n    }\r\n  },\r\n  \"metadata\" : {\r\n    \"key\" : \"metadata\"\r\n  },\r\n  \"created_at\" : 0,\r\n  \"id\" : \"id\",\r\n  \"object\" : \"thread\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<ThreadObject>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List assistants
        /// </summary>
        /// <remarks>Returns a list of assistants.</remarks>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. </param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. </param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. </param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/assistants")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ListAssistantsResponse))]
        public virtual IActionResult ListAssistants([FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "order")]string? order, [FromQuery (Name = "after")]string? after, [FromQuery (Name = "before")]string? before)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"first_id\" : \"asst_abc123\",\r\n  \"data\" : [ {\r\n    \"instructions\" : \"instructions\",\r\n    \"tool_resources\" : {\r\n      \"code_interpreter\" : {\r\n        \"file_ids\" : [ \"file_ids\", \"file_ids\", \"file_ids\", \"file_ids\", \"file_ids\" ]\r\n      },\r\n      \"file_search\" : {\r\n        \"vector_store_ids\" : [ \"vector_store_ids\" ]\r\n      }\r\n    },\r\n    \"metadata\" : {\r\n      \"key\" : \"metadata\"\r\n    },\r\n    \"created_at\" : 0,\r\n    \"description\" : \"description\",\r\n    \"tools\" : [ {\r\n      \"type\" : \"code_interpreter\"\r\n    }, {\r\n      \"type\" : \"code_interpreter\"\r\n    }, {\r\n      \"type\" : \"code_interpreter\"\r\n    }, {\r\n      \"type\" : \"code_interpreter\"\r\n    }, {\r\n      \"type\" : \"code_interpreter\"\r\n    } ],\r\n    \"top_p\" : 1,\r\n    \"response_format\" : \"auto\",\r\n    \"name\" : \"name\",\r\n    \"temperature\" : 1,\r\n    \"model\" : \"model\",\r\n    \"id\" : \"id\",\r\n    \"object\" : \"assistant\"\r\n  }, {\r\n    \"instructions\" : \"instructions\",\r\n    \"tool_resources\" : {\r\n      \"code_interpreter\" : {\r\n        \"file_ids\" : [ \"file_ids\", \"file_ids\", \"file_ids\", \"file_ids\", \"file_ids\" ]\r\n      },\r\n      \"file_search\" : {\r\n        \"vector_store_ids\" : [ \"vector_store_ids\" ]\r\n      }\r\n    },\r\n    \"metadata\" : {\r\n      \"key\" : \"metadata\"\r\n    },\r\n    \"created_at\" : 0,\r\n    \"description\" : \"description\",\r\n    \"tools\" : [ {\r\n      \"type\" : \"code_interpreter\"\r\n    }, {\r\n      \"type\" : \"code_interpreter\"\r\n    }, {\r\n      \"type\" : \"code_interpreter\"\r\n    }, {\r\n      \"type\" : \"code_interpreter\"\r\n    }, {\r\n      \"type\" : \"code_interpreter\"\r\n    } ],\r\n    \"top_p\" : 1,\r\n    \"response_format\" : \"auto\",\r\n    \"name\" : \"name\",\r\n    \"temperature\" : 1,\r\n    \"model\" : \"model\",\r\n    \"id\" : \"id\",\r\n    \"object\" : \"assistant\"\r\n  } ],\r\n  \"last_id\" : \"asst_abc456\",\r\n  \"has_more\" : false,\r\n  \"object\" : \"list\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<ListAssistantsResponse>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List messages
        /// </summary>
        /// <remarks>Returns a list of messages for a given thread.</remarks>
        /// <param name="threadId">The ID of the [thread](https://platform.openai.com/docs/api-reference/threads) the messages belong to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. </param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. </param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. </param>
        /// <param name="runId">Filter messages by the run ID that generated them. </param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/threads/{thread_id}/messages")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ListMessagesResponse))]
        public virtual IActionResult ListMessages([FromRoute (Name = "thread_id")][Required]string threadId, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "order")]string? order, [FromQuery (Name = "after")]string? after, [FromQuery (Name = "before")]string? before, [FromQuery (Name = "run_id")]string? runId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"first_id\" : \"msg_abc123\",\r\n  \"data\" : [ {\r\n    \"metadata\" : {\r\n      \"key\" : \"metadata\"\r\n    },\r\n    \"role\" : \"user\",\r\n    \"assistant_id\" : \"assistant_id\",\r\n    \"run_id\" : \"run_id\",\r\n    \"attachments\" : [ {\r\n      \"file_id\" : \"file_id\",\r\n      \"tools\" : [ {\r\n        \"type\" : \"code_interpreter\"\r\n      }, {\r\n        \"type\" : \"code_interpreter\"\r\n      } ]\r\n    }, {\r\n      \"file_id\" : \"file_id\",\r\n      \"tools\" : [ {\r\n        \"type\" : \"code_interpreter\"\r\n      }, {\r\n        \"type\" : \"code_interpreter\"\r\n      } ]\r\n    } ],\r\n    \"created_at\" : 0,\r\n    \"content\" : [ {\r\n      \"image_file\" : {\r\n        \"file_id\" : \"file_id\",\r\n        \"detail\" : \"auto\"\r\n      },\r\n      \"type\" : \"image_file\"\r\n    }, {\r\n      \"image_file\" : {\r\n        \"file_id\" : \"file_id\",\r\n        \"detail\" : \"auto\"\r\n      },\r\n      \"type\" : \"image_file\"\r\n    } ],\r\n    \"completed_at\" : 6,\r\n    \"thread_id\" : \"thread_id\",\r\n    \"id\" : \"id\",\r\n    \"incomplete_at\" : 1,\r\n    \"incomplete_details\" : {\r\n      \"reason\" : \"content_filter\"\r\n    },\r\n    \"object\" : \"thread.message\",\r\n    \"status\" : \"in_progress\"\r\n  }, {\r\n    \"metadata\" : {\r\n      \"key\" : \"metadata\"\r\n    },\r\n    \"role\" : \"user\",\r\n    \"assistant_id\" : \"assistant_id\",\r\n    \"run_id\" : \"run_id\",\r\n    \"attachments\" : [ {\r\n      \"file_id\" : \"file_id\",\r\n      \"tools\" : [ {\r\n        \"type\" : \"code_interpreter\"\r\n      }, {\r\n        \"type\" : \"code_interpreter\"\r\n      } ]\r\n    }, {\r\n      \"file_id\" : \"file_id\",\r\n      \"tools\" : [ {\r\n        \"type\" : \"code_interpreter\"\r\n      }, {\r\n        \"type\" : \"code_interpreter\"\r\n      } ]\r\n    } ],\r\n    \"created_at\" : 0,\r\n    \"content\" : [ {\r\n      \"image_file\" : {\r\n        \"file_id\" : \"file_id\",\r\n        \"detail\" : \"auto\"\r\n      },\r\n      \"type\" : \"image_file\"\r\n    }, {\r\n      \"image_file\" : {\r\n        \"file_id\" : \"file_id\",\r\n        \"detail\" : \"auto\"\r\n      },\r\n      \"type\" : \"image_file\"\r\n    } ],\r\n    \"completed_at\" : 6,\r\n    \"thread_id\" : \"thread_id\",\r\n    \"id\" : \"id\",\r\n    \"incomplete_at\" : 1,\r\n    \"incomplete_details\" : {\r\n      \"reason\" : \"content_filter\"\r\n    },\r\n    \"object\" : \"thread.message\",\r\n    \"status\" : \"in_progress\"\r\n  } ],\r\n  \"last_id\" : \"msg_abc123\",\r\n  \"has_more\" : false,\r\n  \"object\" : \"list\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<ListMessagesResponse>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List run steps
        /// </summary>
        /// <remarks>Returns a list of run steps belonging to a run.</remarks>
        /// <param name="threadId">The ID of the thread the run and run steps belong to.</param>
        /// <param name="runId">The ID of the run the run steps belong to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. </param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. </param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. </param>
        /// <param name="include">A list of additional fields to include in the response. Currently the only supported value is &#x60;step_details.tool_calls[*].file_search.results[*].content&#x60; to fetch the file search result content.  See the [file search tool documentation](https://platform.openai.com/docs/assistants/tools/file-search#customizing-file-search-settings) for more information. </param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/threads/{thread_id}/runs/{run_id}/steps")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ListRunStepsResponse))]
        public virtual IActionResult ListRunSteps([FromRoute (Name = "thread_id")][Required]string threadId, [FromRoute (Name = "run_id")][Required]string runId, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "order")]string? order, [FromQuery (Name = "after")]string? after, [FromQuery (Name = "before")]string? before, [FromQuery (Name = "include[]")]List<string>? include)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"first_id\" : \"step_abc123\",\r\n  \"data\" : [ {\r\n    \"cancelled_at\" : 1,\r\n    \"metadata\" : {\r\n      \"key\" : \"metadata\"\r\n    },\r\n    \"assistant_id\" : \"assistant_id\",\r\n    \"run_id\" : \"run_id\",\r\n    \"usage\" : {\r\n      \"completion_tokens\" : 2,\r\n      \"prompt_tokens\" : 7,\r\n      \"total_tokens\" : 9\r\n    },\r\n    \"created_at\" : 0,\r\n    \"expired_at\" : 6,\r\n    \"type\" : \"message_creation\",\r\n    \"step_details\" : {\r\n      \"message_creation\" : {\r\n        \"message_id\" : \"message_id\"\r\n      },\r\n      \"type\" : \"message_creation\"\r\n    },\r\n    \"completed_at\" : 5,\r\n    \"thread_id\" : \"thread_id\",\r\n    \"id\" : \"id\",\r\n    \"last_error\" : {\r\n      \"code\" : \"server_error\",\r\n      \"message\" : \"message\"\r\n    },\r\n    \"failed_at\" : 5,\r\n    \"object\" : \"thread.run.step\",\r\n    \"status\" : \"in_progress\"\r\n  }, {\r\n    \"cancelled_at\" : 1,\r\n    \"metadata\" : {\r\n      \"key\" : \"metadata\"\r\n    },\r\n    \"assistant_id\" : \"assistant_id\",\r\n    \"run_id\" : \"run_id\",\r\n    \"usage\" : {\r\n      \"completion_tokens\" : 2,\r\n      \"prompt_tokens\" : 7,\r\n      \"total_tokens\" : 9\r\n    },\r\n    \"created_at\" : 0,\r\n    \"expired_at\" : 6,\r\n    \"type\" : \"message_creation\",\r\n    \"step_details\" : {\r\n      \"message_creation\" : {\r\n        \"message_id\" : \"message_id\"\r\n      },\r\n      \"type\" : \"message_creation\"\r\n    },\r\n    \"completed_at\" : 5,\r\n    \"thread_id\" : \"thread_id\",\r\n    \"id\" : \"id\",\r\n    \"last_error\" : {\r\n      \"code\" : \"server_error\",\r\n      \"message\" : \"message\"\r\n    },\r\n    \"failed_at\" : 5,\r\n    \"object\" : \"thread.run.step\",\r\n    \"status\" : \"in_progress\"\r\n  } ],\r\n  \"last_id\" : \"step_abc456\",\r\n  \"has_more\" : false,\r\n  \"object\" : \"list\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<ListRunStepsResponse>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List runs
        /// </summary>
        /// <remarks>Returns a list of runs belonging to a thread.</remarks>
        /// <param name="threadId">The ID of the thread the run belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. </param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. </param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. </param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/threads/{thread_id}/runs")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ListRunsResponse))]
        public virtual IActionResult ListRuns([FromRoute (Name = "thread_id")][Required]string threadId, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "order")]string? order, [FromQuery (Name = "after")]string? after, [FromQuery (Name = "before")]string? before)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"first_id\" : \"run_abc123\",\r\n  \"data\" : [ {\r\n    \"cancelled_at\" : 5,\r\n    \"instructions\" : \"instructions\",\r\n    \"metadata\" : {\r\n      \"key\" : \"metadata\"\r\n    },\r\n    \"assistant_id\" : \"assistant_id\",\r\n    \"required_action\" : {\r\n      \"submit_tool_outputs\" : {\r\n        \"tool_calls\" : [ {\r\n          \"function\" : {\r\n            \"name\" : \"name\",\r\n            \"arguments\" : \"arguments\"\r\n          },\r\n          \"id\" : \"id\",\r\n          \"type\" : \"function\"\r\n        }, {\r\n          \"function\" : {\r\n            \"name\" : \"name\",\r\n            \"arguments\" : \"arguments\"\r\n          },\r\n          \"id\" : \"id\",\r\n          \"type\" : \"function\"\r\n        } ]\r\n      },\r\n      \"type\" : \"submit_tool_outputs\"\r\n    },\r\n    \"usage\" : {\r\n      \"completion_tokens\" : 7,\r\n      \"prompt_tokens\" : 9,\r\n      \"total_tokens\" : 3\r\n    },\r\n    \"created_at\" : 0,\r\n    \"tools\" : [ {\r\n      \"type\" : \"code_interpreter\"\r\n    }, {\r\n      \"type\" : \"code_interpreter\"\r\n    }, {\r\n      \"type\" : \"code_interpreter\"\r\n    }, {\r\n      \"type\" : \"code_interpreter\"\r\n    }, {\r\n      \"type\" : \"code_interpreter\"\r\n    } ],\r\n    \"top_p\" : 4.145608029883936,\r\n    \"max_completion_tokens\" : 256,\r\n    \"thread_id\" : \"thread_id\",\r\n    \"expires_at\" : 6,\r\n    \"response_format\" : \"auto\",\r\n    \"temperature\" : 2.027123023002322,\r\n    \"tool_choice\" : \"\",\r\n    \"model\" : \"model\",\r\n    \"id\" : \"id\",\r\n    \"last_error\" : {\r\n      \"code\" : \"server_error\",\r\n      \"message\" : \"message\"\r\n    },\r\n    \"incomplete_details\" : {\r\n      \"reason\" : \"max_completion_tokens\"\r\n    },\r\n    \"truncation_strategy\" : \"\",\r\n    \"completed_at\" : 2,\r\n    \"parallel_tool_calls\" : true,\r\n    \"started_at\" : 1,\r\n    \"failed_at\" : 5,\r\n    \"max_prompt_tokens\" : 256,\r\n    \"object\" : \"thread.run\",\r\n    \"status\" : \"queued\"\r\n  }, {\r\n    \"cancelled_at\" : 5,\r\n    \"instructions\" : \"instructions\",\r\n    \"metadata\" : {\r\n      \"key\" : \"metadata\"\r\n    },\r\n    \"assistant_id\" : \"assistant_id\",\r\n    \"required_action\" : {\r\n      \"submit_tool_outputs\" : {\r\n        \"tool_calls\" : [ {\r\n          \"function\" : {\r\n            \"name\" : \"name\",\r\n            \"arguments\" : \"arguments\"\r\n          },\r\n          \"id\" : \"id\",\r\n          \"type\" : \"function\"\r\n        }, {\r\n          \"function\" : {\r\n            \"name\" : \"name\",\r\n            \"arguments\" : \"arguments\"\r\n          },\r\n          \"id\" : \"id\",\r\n          \"type\" : \"function\"\r\n        } ]\r\n      },\r\n      \"type\" : \"submit_tool_outputs\"\r\n    },\r\n    \"usage\" : {\r\n      \"completion_tokens\" : 7,\r\n      \"prompt_tokens\" : 9,\r\n      \"total_tokens\" : 3\r\n    },\r\n    \"created_at\" : 0,\r\n    \"tools\" : [ {\r\n      \"type\" : \"code_interpreter\"\r\n    }, {\r\n      \"type\" : \"code_interpreter\"\r\n    }, {\r\n      \"type\" : \"code_interpreter\"\r\n    }, {\r\n      \"type\" : \"code_interpreter\"\r\n    }, {\r\n      \"type\" : \"code_interpreter\"\r\n    } ],\r\n    \"top_p\" : 4.145608029883936,\r\n    \"max_completion_tokens\" : 256,\r\n    \"thread_id\" : \"thread_id\",\r\n    \"expires_at\" : 6,\r\n    \"response_format\" : \"auto\",\r\n    \"temperature\" : 2.027123023002322,\r\n    \"tool_choice\" : \"\",\r\n    \"model\" : \"model\",\r\n    \"id\" : \"id\",\r\n    \"last_error\" : {\r\n      \"code\" : \"server_error\",\r\n      \"message\" : \"message\"\r\n    },\r\n    \"incomplete_details\" : {\r\n      \"reason\" : \"max_completion_tokens\"\r\n    },\r\n    \"truncation_strategy\" : \"\",\r\n    \"completed_at\" : 2,\r\n    \"parallel_tool_calls\" : true,\r\n    \"started_at\" : 1,\r\n    \"failed_at\" : 5,\r\n    \"max_prompt_tokens\" : 256,\r\n    \"object\" : \"thread.run\",\r\n    \"status\" : \"queued\"\r\n  } ],\r\n  \"last_id\" : \"run_abc456\",\r\n  \"has_more\" : false,\r\n  \"object\" : \"list\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<ListRunsResponse>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Modify assistant
        /// </summary>
        /// <remarks>Modifies an assistant.</remarks>
        /// <param name="assistantId">The ID of the assistant to modify.</param>
        /// <param name="modifyAssistantRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/assistants/{assistant_id}")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(AssistantObject))]
        public virtual IActionResult ModifyAssistant([FromRoute (Name = "assistant_id")][Required]string assistantId, [FromBody]ModifyAssistantRequest modifyAssistantRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"instructions\" : \"instructions\",\r\n  \"tool_resources\" : {\r\n    \"code_interpreter\" : {\r\n      \"file_ids\" : [ \"file_ids\", \"file_ids\", \"file_ids\", \"file_ids\", \"file_ids\" ]\r\n    },\r\n    \"file_search\" : {\r\n      \"vector_store_ids\" : [ \"vector_store_ids\" ]\r\n    }\r\n  },\r\n  \"metadata\" : {\r\n    \"key\" : \"metadata\"\r\n  },\r\n  \"created_at\" : 0,\r\n  \"description\" : \"description\",\r\n  \"tools\" : [ {\r\n    \"type\" : \"code_interpreter\"\r\n  }, {\r\n    \"type\" : \"code_interpreter\"\r\n  }, {\r\n    \"type\" : \"code_interpreter\"\r\n  }, {\r\n    \"type\" : \"code_interpreter\"\r\n  }, {\r\n    \"type\" : \"code_interpreter\"\r\n  } ],\r\n  \"top_p\" : 1,\r\n  \"response_format\" : \"auto\",\r\n  \"name\" : \"name\",\r\n  \"temperature\" : 1,\r\n  \"model\" : \"model\",\r\n  \"id\" : \"id\",\r\n  \"object\" : \"assistant\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<AssistantObject>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Modify message
        /// </summary>
        /// <remarks>Modifies a message.</remarks>
        /// <param name="threadId">The ID of the thread to which this message belongs.</param>
        /// <param name="messageId">The ID of the message to modify.</param>
        /// <param name="modifyMessageRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/threads/{thread_id}/messages/{message_id}")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(MessageObject))]
        public virtual IActionResult ModifyMessage([FromRoute (Name = "thread_id")][Required]string threadId, [FromRoute (Name = "message_id")][Required]string messageId, [FromBody]ModifyMessageRequest modifyMessageRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"metadata\" : {\r\n    \"key\" : \"metadata\"\r\n  },\r\n  \"role\" : \"user\",\r\n  \"assistant_id\" : \"assistant_id\",\r\n  \"run_id\" : \"run_id\",\r\n  \"attachments\" : [ {\r\n    \"file_id\" : \"file_id\",\r\n    \"tools\" : [ {\r\n      \"type\" : \"code_interpreter\"\r\n    }, {\r\n      \"type\" : \"code_interpreter\"\r\n    } ]\r\n  }, {\r\n    \"file_id\" : \"file_id\",\r\n    \"tools\" : [ {\r\n      \"type\" : \"code_interpreter\"\r\n    }, {\r\n      \"type\" : \"code_interpreter\"\r\n    } ]\r\n  } ],\r\n  \"created_at\" : 0,\r\n  \"content\" : [ {\r\n    \"image_file\" : {\r\n      \"file_id\" : \"file_id\",\r\n      \"detail\" : \"auto\"\r\n    },\r\n    \"type\" : \"image_file\"\r\n  }, {\r\n    \"image_file\" : {\r\n      \"file_id\" : \"file_id\",\r\n      \"detail\" : \"auto\"\r\n    },\r\n    \"type\" : \"image_file\"\r\n  } ],\r\n  \"completed_at\" : 6,\r\n  \"thread_id\" : \"thread_id\",\r\n  \"id\" : \"id\",\r\n  \"incomplete_at\" : 1,\r\n  \"incomplete_details\" : {\r\n    \"reason\" : \"content_filter\"\r\n  },\r\n  \"object\" : \"thread.message\",\r\n  \"status\" : \"in_progress\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<MessageObject>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Modify run
        /// </summary>
        /// <remarks>Modifies a run.</remarks>
        /// <param name="threadId">The ID of the [thread](https://platform.openai.com/docs/api-reference/threads) that was run.</param>
        /// <param name="runId">The ID of the run to modify.</param>
        /// <param name="modifyRunRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/threads/{thread_id}/runs/{run_id}")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(RunObject))]
        public virtual IActionResult ModifyRun([FromRoute (Name = "thread_id")][Required]string threadId, [FromRoute (Name = "run_id")][Required]string runId, [FromBody]ModifyRunRequest modifyRunRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"cancelled_at\" : 5,\r\n  \"instructions\" : \"instructions\",\r\n  \"metadata\" : {\r\n    \"key\" : \"metadata\"\r\n  },\r\n  \"assistant_id\" : \"assistant_id\",\r\n  \"required_action\" : {\r\n    \"submit_tool_outputs\" : {\r\n      \"tool_calls\" : [ {\r\n        \"function\" : {\r\n          \"name\" : \"name\",\r\n          \"arguments\" : \"arguments\"\r\n        },\r\n        \"id\" : \"id\",\r\n        \"type\" : \"function\"\r\n      }, {\r\n        \"function\" : {\r\n          \"name\" : \"name\",\r\n          \"arguments\" : \"arguments\"\r\n        },\r\n        \"id\" : \"id\",\r\n        \"type\" : \"function\"\r\n      } ]\r\n    },\r\n    \"type\" : \"submit_tool_outputs\"\r\n  },\r\n  \"usage\" : {\r\n    \"completion_tokens\" : 7,\r\n    \"prompt_tokens\" : 9,\r\n    \"total_tokens\" : 3\r\n  },\r\n  \"created_at\" : 0,\r\n  \"tools\" : [ {\r\n    \"type\" : \"code_interpreter\"\r\n  }, {\r\n    \"type\" : \"code_interpreter\"\r\n  }, {\r\n    \"type\" : \"code_interpreter\"\r\n  }, {\r\n    \"type\" : \"code_interpreter\"\r\n  }, {\r\n    \"type\" : \"code_interpreter\"\r\n  } ],\r\n  \"top_p\" : 4.145608029883936,\r\n  \"max_completion_tokens\" : 256,\r\n  \"thread_id\" : \"thread_id\",\r\n  \"expires_at\" : 6,\r\n  \"response_format\" : \"auto\",\r\n  \"temperature\" : 2.027123023002322,\r\n  \"tool_choice\" : \"\",\r\n  \"model\" : \"model\",\r\n  \"id\" : \"id\",\r\n  \"last_error\" : {\r\n    \"code\" : \"server_error\",\r\n    \"message\" : \"message\"\r\n  },\r\n  \"incomplete_details\" : {\r\n    \"reason\" : \"max_completion_tokens\"\r\n  },\r\n  \"truncation_strategy\" : \"\",\r\n  \"completed_at\" : 2,\r\n  \"parallel_tool_calls\" : true,\r\n  \"started_at\" : 1,\r\n  \"failed_at\" : 5,\r\n  \"max_prompt_tokens\" : 256,\r\n  \"object\" : \"thread.run\",\r\n  \"status\" : \"queued\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<RunObject>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Modify thread
        /// </summary>
        /// <remarks>Modifies a thread.</remarks>
        /// <param name="threadId">The ID of the thread to modify. Only the &#x60;metadata&#x60; can be modified.</param>
        /// <param name="modifyThreadRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/threads/{thread_id}")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ThreadObject))]
        public virtual IActionResult ModifyThread([FromRoute (Name = "thread_id")][Required]string threadId, [FromBody]ModifyThreadRequest modifyThreadRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"tool_resources\" : {\r\n    \"code_interpreter\" : {\r\n      \"file_ids\" : [ \"file_ids\", \"file_ids\", \"file_ids\", \"file_ids\", \"file_ids\" ]\r\n    },\r\n    \"file_search\" : {\r\n      \"vector_store_ids\" : [ \"vector_store_ids\" ]\r\n    }\r\n  },\r\n  \"metadata\" : {\r\n    \"key\" : \"metadata\"\r\n  },\r\n  \"created_at\" : 0,\r\n  \"id\" : \"id\",\r\n  \"object\" : \"thread\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<ThreadObject>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Submit tool outputs to run
        /// </summary>
        /// <remarks>When a run has the &#x60;status: \&quot;requires_action\&quot;&#x60; and &#x60;required_action.type&#x60; is &#x60;submit_tool_outputs&#x60;, this endpoint can be used to submit the outputs from the tool calls once they&#39;re all completed. All outputs must be submitted in a single request. </remarks>
        /// <param name="threadId">The ID of the [thread](https://platform.openai.com/docs/api-reference/threads) to which this run belongs.</param>
        /// <param name="runId">The ID of the run that requires the tool output submission.</param>
        /// <param name="submitToolOutputsRunRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/threads/{thread_id}/runs/{run_id}/submit_tool_outputs")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(RunObject))]
        public virtual IActionResult SubmitToolOuputsToRun([FromRoute (Name = "thread_id")][Required]string threadId, [FromRoute (Name = "run_id")][Required]string runId, [FromBody]SubmitToolOutputsRunRequest submitToolOutputsRunRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"cancelled_at\" : 5,\r\n  \"instructions\" : \"instructions\",\r\n  \"metadata\" : {\r\n    \"key\" : \"metadata\"\r\n  },\r\n  \"assistant_id\" : \"assistant_id\",\r\n  \"required_action\" : {\r\n    \"submit_tool_outputs\" : {\r\n      \"tool_calls\" : [ {\r\n        \"function\" : {\r\n          \"name\" : \"name\",\r\n          \"arguments\" : \"arguments\"\r\n        },\r\n        \"id\" : \"id\",\r\n        \"type\" : \"function\"\r\n      }, {\r\n        \"function\" : {\r\n          \"name\" : \"name\",\r\n          \"arguments\" : \"arguments\"\r\n        },\r\n        \"id\" : \"id\",\r\n        \"type\" : \"function\"\r\n      } ]\r\n    },\r\n    \"type\" : \"submit_tool_outputs\"\r\n  },\r\n  \"usage\" : {\r\n    \"completion_tokens\" : 7,\r\n    \"prompt_tokens\" : 9,\r\n    \"total_tokens\" : 3\r\n  },\r\n  \"created_at\" : 0,\r\n  \"tools\" : [ {\r\n    \"type\" : \"code_interpreter\"\r\n  }, {\r\n    \"type\" : \"code_interpreter\"\r\n  }, {\r\n    \"type\" : \"code_interpreter\"\r\n  }, {\r\n    \"type\" : \"code_interpreter\"\r\n  }, {\r\n    \"type\" : \"code_interpreter\"\r\n  } ],\r\n  \"top_p\" : 4.145608029883936,\r\n  \"max_completion_tokens\" : 256,\r\n  \"thread_id\" : \"thread_id\",\r\n  \"expires_at\" : 6,\r\n  \"response_format\" : \"auto\",\r\n  \"temperature\" : 2.027123023002322,\r\n  \"tool_choice\" : \"\",\r\n  \"model\" : \"model\",\r\n  \"id\" : \"id\",\r\n  \"last_error\" : {\r\n    \"code\" : \"server_error\",\r\n    \"message\" : \"message\"\r\n  },\r\n  \"incomplete_details\" : {\r\n    \"reason\" : \"max_completion_tokens\"\r\n  },\r\n  \"truncation_strategy\" : \"\",\r\n  \"completed_at\" : 2,\r\n  \"parallel_tool_calls\" : true,\r\n  \"started_at\" : 1,\r\n  \"failed_at\" : 5,\r\n  \"max_prompt_tokens\" : 256,\r\n  \"object\" : \"thread.run\",\r\n  \"status\" : \"queued\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<RunObject>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
