/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using System.Text.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class AudioApiController : ControllerBase
    { 
        /// <summary>
        /// Create speech
        /// </summary>
        /// <remarks>Generates audio from the input text.</remarks>
        /// <param name="createSpeechRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/audio/speech")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(System.IO.Stream))]
        public virtual IActionResult CreateSpeech([FromBody]CreateSpeechRequest createSpeechRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<System.IO.Stream>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create transcription
        /// </summary>
        /// <remarks>Transcribes audio into the input language.</remarks>
        /// <param name="file">The audio file object (not file name) to transcribe, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm. </param>
        /// <param name="model"></param>
        /// <param name="language">The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. &#x60;en&#x60;) format will improve accuracy and latency. </param>
        /// <param name="prompt">An optional text to guide the model&#39;s style or continue a previous audio segment. The [prompt](https://platform.openai.com/docs/guides/speech-to-text#prompting) should match the audio language. </param>
        /// <param name="responseFormat"></param>
        /// <param name="temperature">The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. </param>
        /// <param name="stream">If set to true, the model response data will be streamed to the client as it is generated using [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).  See the [Streaming section of the Speech-to-Text guide](https://platform.openai.com/docs/guides/speech-to-text?lang&#x3D;curl#streaming-transcriptions) for more information.  Note: Streaming is not supported for the &#x60;whisper-1&#x60; model and will be ignored. </param>
        /// <param name="chunkingStrategy"></param>
        /// <param name="timestampGranularities">The timestamp granularities to populate for this transcription. &#x60;response_format&#x60; must be set &#x60;verbose_json&#x60; to use timestamp granularities. Either or both of these options are supported: &#x60;word&#x60;, or &#x60;segment&#x60;. Note: There is no additional latency for segment timestamps, but generating word timestamps incurs additional latency. </param>
        /// <param name="include">Additional information to include in the transcription response.  &#x60;logprobs&#x60; will return the log probabilities of the tokens in the  response to understand the model&#39;s confidence in the transcription.  &#x60;logprobs&#x60; only works with response_format set to &#x60;json&#x60; and only with  the models &#x60;gpt-4o-transcribe&#x60; and &#x60;gpt-4o-mini-transcribe&#x60;. </param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/audio/transcriptions")]
        [Authorize]
        [Consumes("multipart/form-data")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(CreateTranscription200Response))]
        public virtual IActionResult CreateTranscription([Required()]IFormFile file, [FromForm][Required()]CreateTranscriptionRequestModel model, [FromForm (Name = "language")]string? language, [FromForm (Name = "prompt")]string? prompt, [FromForm (Name = "response_format")]AudioResponseFormat? responseFormat, [FromForm (Name = "temperature")]decimal? temperature, [FromForm (Name = "stream")]bool? stream, [FromForm]TranscriptionChunkingStrategy? chunkingStrategy, [FromForm (Name = "timestamp_granularities")]List<string>? timestampGranularities, [FromForm (Name = "include")]List<TranscriptionInclude>? include)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"usage\" : {\r\n    \"total_tokens\" : 7,\r\n    \"input_token_details\" : {\r\n      \"audio_tokens\" : 5,\r\n      \"text_tokens\" : 5\r\n    },\r\n    \"output_tokens\" : 2,\r\n    \"type\" : \"tokens\",\r\n    \"input_tokens\" : 1\r\n  },\r\n  \"text\" : \"text\",\r\n  \"logprobs\" : [ {\r\n    \"logprob\" : 0.8008281904610115,\r\n    \"bytes\" : [ 6.027456183070403, 6.027456183070403 ],\r\n    \"token\" : \"token\"\r\n  }, {\r\n    \"logprob\" : 0.8008281904610115,\r\n    \"bytes\" : [ 6.027456183070403, 6.027456183070403 ],\r\n    \"token\" : \"token\"\r\n  } ]\r\n}";
            exampleJson = "Custom MIME type example not yet supported: text/event-stream";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<CreateTranscription200Response>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create translation
        /// </summary>
        /// <remarks>Translates audio into English.</remarks>
        /// <param name="file">The audio file object (not file name) translate, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm. </param>
        /// <param name="model"></param>
        /// <param name="prompt">An optional text to guide the model&#39;s style or continue a previous audio segment. The [prompt](https://platform.openai.com/docs/guides/speech-to-text#prompting) should be in English. </param>
        /// <param name="responseFormat">The format of the output, in one of these options: &#x60;json&#x60;, &#x60;text&#x60;, &#x60;srt&#x60;, &#x60;verbose_json&#x60;, or &#x60;vtt&#x60;. </param>
        /// <param name="temperature">The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. </param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/audio/translations")]
        [Authorize]
        [Consumes("multipart/form-data")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(CreateTranslation200Response))]
        public virtual IActionResult CreateTranslation([Required()]IFormFile file, [FromForm][Required()]CreateTranslationRequestModel model, [FromForm (Name = "prompt")]string? prompt, [FromForm (Name = "response_format")]string? responseFormat, [FromForm (Name = "temperature")]decimal? temperature)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"text\" : \"text\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<CreateTranslation200Response>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
