/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using System.Text.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class CertificatesApiController : ControllerBase
    { 
        /// <summary>
        /// Activate certificates for organization
        /// </summary>
        /// <remarks>Activate certificates at the organization level.  You can atomically and idempotently activate up to 10 certificates at a time. </remarks>
        /// <param name="toggleCertificatesRequest">The certificate activation payload.</param>
        /// <response code="200">Certificates activated successfully.</response>
        [HttpPost]
        [Route("/v1/organization/certificates/activate")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ListCertificatesResponse))]
        public virtual IActionResult ActivateOrganizationCertificates([FromBody]ToggleCertificatesRequest toggleCertificatesRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"first_id\" : \"cert_abc\",\r\n  \"data\" : [ {\r\n    \"name\" : \"name\",\r\n    \"created_at\" : 0,\r\n    \"active\" : true,\r\n    \"id\" : \"id\",\r\n    \"certificate_details\" : {\r\n      \"expires_at\" : 1,\r\n      \"content\" : \"content\",\r\n      \"valid_at\" : 6\r\n    },\r\n    \"object\" : \"certificate\"\r\n  }, {\r\n    \"name\" : \"name\",\r\n    \"created_at\" : 0,\r\n    \"active\" : true,\r\n    \"id\" : \"id\",\r\n    \"certificate_details\" : {\r\n      \"expires_at\" : 1,\r\n      \"content\" : \"content\",\r\n      \"valid_at\" : 6\r\n    },\r\n    \"object\" : \"certificate\"\r\n  } ],\r\n  \"last_id\" : \"cert_abc\",\r\n  \"has_more\" : true,\r\n  \"object\" : \"list\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<ListCertificatesResponse>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Activate certificates for project
        /// </summary>
        /// <remarks>Activate certificates at the project level.  You can atomically and idempotently activate up to 10 certificates at a time. </remarks>
        /// <param name="projectId">The ID of the project.</param>
        /// <param name="toggleCertificatesRequest">The certificate activation payload.</param>
        /// <response code="200">Certificates activated successfully.</response>
        [HttpPost]
        [Route("/v1/organization/projects/{project_id}/certificates/activate")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ListCertificatesResponse))]
        public virtual IActionResult ActivateProjectCertificates([FromRoute (Name = "project_id")][Required]string projectId, [FromBody]ToggleCertificatesRequest toggleCertificatesRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"first_id\" : \"cert_abc\",\r\n  \"data\" : [ {\r\n    \"name\" : \"name\",\r\n    \"created_at\" : 0,\r\n    \"active\" : true,\r\n    \"id\" : \"id\",\r\n    \"certificate_details\" : {\r\n      \"expires_at\" : 1,\r\n      \"content\" : \"content\",\r\n      \"valid_at\" : 6\r\n    },\r\n    \"object\" : \"certificate\"\r\n  }, {\r\n    \"name\" : \"name\",\r\n    \"created_at\" : 0,\r\n    \"active\" : true,\r\n    \"id\" : \"id\",\r\n    \"certificate_details\" : {\r\n      \"expires_at\" : 1,\r\n      \"content\" : \"content\",\r\n      \"valid_at\" : 6\r\n    },\r\n    \"object\" : \"certificate\"\r\n  } ],\r\n  \"last_id\" : \"cert_abc\",\r\n  \"has_more\" : true,\r\n  \"object\" : \"list\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<ListCertificatesResponse>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Deactivate certificates for organization
        /// </summary>
        /// <remarks>Deactivate certificates at the organization level.  You can atomically and idempotently deactivate up to 10 certificates at a time. </remarks>
        /// <param name="toggleCertificatesRequest">The certificate deactivation payload.</param>
        /// <response code="200">Certificates deactivated successfully.</response>
        [HttpPost]
        [Route("/v1/organization/certificates/deactivate")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ListCertificatesResponse))]
        public virtual IActionResult DeactivateOrganizationCertificates([FromBody]ToggleCertificatesRequest toggleCertificatesRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"first_id\" : \"cert_abc\",\r\n  \"data\" : [ {\r\n    \"name\" : \"name\",\r\n    \"created_at\" : 0,\r\n    \"active\" : true,\r\n    \"id\" : \"id\",\r\n    \"certificate_details\" : {\r\n      \"expires_at\" : 1,\r\n      \"content\" : \"content\",\r\n      \"valid_at\" : 6\r\n    },\r\n    \"object\" : \"certificate\"\r\n  }, {\r\n    \"name\" : \"name\",\r\n    \"created_at\" : 0,\r\n    \"active\" : true,\r\n    \"id\" : \"id\",\r\n    \"certificate_details\" : {\r\n      \"expires_at\" : 1,\r\n      \"content\" : \"content\",\r\n      \"valid_at\" : 6\r\n    },\r\n    \"object\" : \"certificate\"\r\n  } ],\r\n  \"last_id\" : \"cert_abc\",\r\n  \"has_more\" : true,\r\n  \"object\" : \"list\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<ListCertificatesResponse>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Deactivate certificates for project
        /// </summary>
        /// <remarks>Deactivate certificates at the project level. You can atomically and  idempotently deactivate up to 10 certificates at a time. </remarks>
        /// <param name="projectId">The ID of the project.</param>
        /// <param name="toggleCertificatesRequest">The certificate deactivation payload.</param>
        /// <response code="200">Certificates deactivated successfully.</response>
        [HttpPost]
        [Route("/v1/organization/projects/{project_id}/certificates/deactivate")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ListCertificatesResponse))]
        public virtual IActionResult DeactivateProjectCertificates([FromRoute (Name = "project_id")][Required]string projectId, [FromBody]ToggleCertificatesRequest toggleCertificatesRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"first_id\" : \"cert_abc\",\r\n  \"data\" : [ {\r\n    \"name\" : \"name\",\r\n    \"created_at\" : 0,\r\n    \"active\" : true,\r\n    \"id\" : \"id\",\r\n    \"certificate_details\" : {\r\n      \"expires_at\" : 1,\r\n      \"content\" : \"content\",\r\n      \"valid_at\" : 6\r\n    },\r\n    \"object\" : \"certificate\"\r\n  }, {\r\n    \"name\" : \"name\",\r\n    \"created_at\" : 0,\r\n    \"active\" : true,\r\n    \"id\" : \"id\",\r\n    \"certificate_details\" : {\r\n      \"expires_at\" : 1,\r\n      \"content\" : \"content\",\r\n      \"valid_at\" : 6\r\n    },\r\n    \"object\" : \"certificate\"\r\n  } ],\r\n  \"last_id\" : \"cert_abc\",\r\n  \"has_more\" : true,\r\n  \"object\" : \"list\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<ListCertificatesResponse>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete certificate
        /// </summary>
        /// <remarks>Delete a certificate from the organization.  The certificate must be inactive for the organization and all projects. </remarks>
        /// <param name="certificateId">Unique ID of the certificate to retrieve.</param>
        /// <response code="200">Certificate deleted successfully.</response>
        [HttpDelete]
        [Route("/v1/organization/certificates/{certificate_id}")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(DeleteCertificateResponse))]
        public virtual IActionResult DeleteCertificate([FromRoute (Name = "certificate_id")][Required]string certificateId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"id\" : \"id\",\r\n  \"object\" : \"\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<DeleteCertificateResponse>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get certificate
        /// </summary>
        /// <remarks>Get a certificate that has been uploaded to the organization.  You can get a certificate regardless of whether it is active or not. </remarks>
        /// <param name="certificateId">Unique ID of the certificate to retrieve.</param>
        /// <param name="include">A list of additional fields to include in the response. Currently the only supported value is &#x60;content&#x60; to fetch the PEM content of the certificate.</param>
        /// <response code="200">Certificate retrieved successfully.</response>
        [HttpGet]
        [Route("/v1/organization/certificates/{certificate_id}")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Certificate))]
        public virtual IActionResult GetCertificate([FromRoute (Name = "certificate_id")][Required]string certificateId, [FromQuery (Name = "include")]List<string>? include)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"name\" : \"name\",\r\n  \"created_at\" : 0,\r\n  \"active\" : true,\r\n  \"id\" : \"id\",\r\n  \"certificate_details\" : {\r\n    \"expires_at\" : 1,\r\n    \"content\" : \"content\",\r\n    \"valid_at\" : 6\r\n  },\r\n  \"object\" : \"certificate\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<Certificate>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List organization certificates
        /// </summary>
        /// <remarks>List uploaded certificates for this organization.</remarks>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. </param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. </param>
        /// <response code="200">Certificates listed successfully.</response>
        [HttpGet]
        [Route("/v1/organization/certificates")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ListCertificatesResponse))]
        public virtual IActionResult ListOrganizationCertificates([FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "after")]string? after, [FromQuery (Name = "order")]string? order)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"first_id\" : \"cert_abc\",\r\n  \"data\" : [ {\r\n    \"name\" : \"name\",\r\n    \"created_at\" : 0,\r\n    \"active\" : true,\r\n    \"id\" : \"id\",\r\n    \"certificate_details\" : {\r\n      \"expires_at\" : 1,\r\n      \"content\" : \"content\",\r\n      \"valid_at\" : 6\r\n    },\r\n    \"object\" : \"certificate\"\r\n  }, {\r\n    \"name\" : \"name\",\r\n    \"created_at\" : 0,\r\n    \"active\" : true,\r\n    \"id\" : \"id\",\r\n    \"certificate_details\" : {\r\n      \"expires_at\" : 1,\r\n      \"content\" : \"content\",\r\n      \"valid_at\" : 6\r\n    },\r\n    \"object\" : \"certificate\"\r\n  } ],\r\n  \"last_id\" : \"cert_abc\",\r\n  \"has_more\" : true,\r\n  \"object\" : \"list\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<ListCertificatesResponse>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List project certificates
        /// </summary>
        /// <remarks>List certificates for this project.</remarks>
        /// <param name="projectId">The ID of the project.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. </param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. </param>
        /// <response code="200">Certificates listed successfully.</response>
        [HttpGet]
        [Route("/v1/organization/projects/{project_id}/certificates")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ListCertificatesResponse))]
        public virtual IActionResult ListProjectCertificates([FromRoute (Name = "project_id")][Required]string projectId, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "after")]string? after, [FromQuery (Name = "order")]string? order)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"first_id\" : \"cert_abc\",\r\n  \"data\" : [ {\r\n    \"name\" : \"name\",\r\n    \"created_at\" : 0,\r\n    \"active\" : true,\r\n    \"id\" : \"id\",\r\n    \"certificate_details\" : {\r\n      \"expires_at\" : 1,\r\n      \"content\" : \"content\",\r\n      \"valid_at\" : 6\r\n    },\r\n    \"object\" : \"certificate\"\r\n  }, {\r\n    \"name\" : \"name\",\r\n    \"created_at\" : 0,\r\n    \"active\" : true,\r\n    \"id\" : \"id\",\r\n    \"certificate_details\" : {\r\n      \"expires_at\" : 1,\r\n      \"content\" : \"content\",\r\n      \"valid_at\" : 6\r\n    },\r\n    \"object\" : \"certificate\"\r\n  } ],\r\n  \"last_id\" : \"cert_abc\",\r\n  \"has_more\" : true,\r\n  \"object\" : \"list\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<ListCertificatesResponse>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Modify certificate
        /// </summary>
        /// <remarks>Modify a certificate. Note that only the name can be modified. </remarks>
        /// <param name="certificateId">Unique ID of the certificate to retrieve.</param>
        /// <param name="modifyCertificateRequest">The certificate modification payload.</param>
        /// <response code="200">Certificate modified successfully.</response>
        [HttpPost]
        [Route("/v1/organization/certificates/{certificate_id}")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Certificate))]
        public virtual IActionResult ModifyCertificate([FromRoute (Name = "certificate_id")][Required]string certificateId, [FromBody]ModifyCertificateRequest modifyCertificateRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"name\" : \"name\",\r\n  \"created_at\" : 0,\r\n  \"active\" : true,\r\n  \"id\" : \"id\",\r\n  \"certificate_details\" : {\r\n    \"expires_at\" : 1,\r\n    \"content\" : \"content\",\r\n    \"valid_at\" : 6\r\n  },\r\n  \"object\" : \"certificate\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<Certificate>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Upload certificate
        /// </summary>
        /// <remarks>Upload a certificate to the organization. This does **not** automatically activate the certificate.  Organizations can upload up to 50 certificates. </remarks>
        /// <param name="uploadCertificateRequest">The certificate upload payload.</param>
        /// <response code="200">Certificate uploaded successfully.</response>
        [HttpPost]
        [Route("/v1/organization/certificates")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Certificate))]
        public virtual IActionResult UploadCertificate([FromBody]UploadCertificateRequest uploadCertificateRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"name\" : \"name\",\r\n  \"created_at\" : 0,\r\n  \"active\" : true,\r\n  \"id\" : \"id\",\r\n  \"certificate_details\" : {\r\n    \"expires_at\" : 1,\r\n    \"content\" : \"content\",\r\n    \"valid_at\" : 6\r\n  },\r\n  \"object\" : \"certificate\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<Certificate>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
