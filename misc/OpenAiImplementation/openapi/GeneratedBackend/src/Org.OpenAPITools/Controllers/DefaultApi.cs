/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using System.Text.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DefaultApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <param name="webhookBatchCancelled">The event payload sent by the API.</param>
        /// <response code="200">Return a 200 status code to acknowledge receipt of the event. Non-200  status codes will be retried. </response>
        [HttpPost]
        [Route("/v1/batch_cancelled")]
        [Authorize]
        [ValidateModelState]
        public virtual IActionResult BatchCancelledPost([FromBody]WebhookBatchCancelled? webhookBatchCancelled)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="webhookBatchCompleted">The event payload sent by the API.</param>
        /// <response code="200">Return a 200 status code to acknowledge receipt of the event. Non-200  status codes will be retried. </response>
        [HttpPost]
        [Route("/v1/batch_completed")]
        [Authorize]
        [ValidateModelState]
        public virtual IActionResult BatchCompletedPost([FromBody]WebhookBatchCompleted? webhookBatchCompleted)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="webhookBatchExpired">The event payload sent by the API.</param>
        /// <response code="200">Return a 200 status code to acknowledge receipt of the event. Non-200  status codes will be retried. </response>
        [HttpPost]
        [Route("/v1/batch_expired")]
        [Authorize]
        [ValidateModelState]
        public virtual IActionResult BatchExpiredPost([FromBody]WebhookBatchExpired? webhookBatchExpired)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="webhookBatchFailed">The event payload sent by the API.</param>
        /// <response code="200">Return a 200 status code to acknowledge receipt of the event. Non-200  status codes will be retried. </response>
        [HttpPost]
        [Route("/v1/batch_failed")]
        [Authorize]
        [ValidateModelState]
        public virtual IActionResult BatchFailedPost([FromBody]WebhookBatchFailed? webhookBatchFailed)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="webhookEvalRunCanceled">The event payload sent by the API.</param>
        /// <response code="200">Return a 200 status code to acknowledge receipt of the event. Non-200  status codes will be retried.  </response>
        [HttpPost]
        [Route("/v1/eval_run_canceled")]
        [Authorize]
        [ValidateModelState]
        public virtual IActionResult EvalRunCanceledPost([FromBody]WebhookEvalRunCanceled? webhookEvalRunCanceled)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="webhookEvalRunFailed">The event payload sent by the API.</param>
        /// <response code="200">Return a 200 status code to acknowledge receipt of the event. Non-200  status codes will be retried.  </response>
        [HttpPost]
        [Route("/v1/eval_run_failed")]
        [Authorize]
        [ValidateModelState]
        public virtual IActionResult EvalRunFailedPost([FromBody]WebhookEvalRunFailed? webhookEvalRunFailed)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="webhookEvalRunSucceeded">The event payload sent by the API.</param>
        /// <response code="200">Return a 200 status code to acknowledge receipt of the event. Non-200  status codes will be retried.  </response>
        [HttpPost]
        [Route("/v1/eval_run_succeeded")]
        [Authorize]
        [ValidateModelState]
        public virtual IActionResult EvalRunSucceededPost([FromBody]WebhookEvalRunSucceeded? webhookEvalRunSucceeded)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="webhookFineTuningJobCancelled">The event payload sent by the API.</param>
        /// <response code="200">Return a 200 status code to acknowledge receipt of the event. Non-200  status codes will be retried.  </response>
        [HttpPost]
        [Route("/v1/fine_tuning_job_cancelled")]
        [Authorize]
        [ValidateModelState]
        public virtual IActionResult FineTuningJobCancelledPost([FromBody]WebhookFineTuningJobCancelled? webhookFineTuningJobCancelled)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="webhookFineTuningJobFailed">The event payload sent by the API.</param>
        /// <response code="200">Return a 200 status code to acknowledge receipt of the event. Non-200  status codes will be retried.  </response>
        [HttpPost]
        [Route("/v1/fine_tuning_job_failed")]
        [Authorize]
        [ValidateModelState]
        public virtual IActionResult FineTuningJobFailedPost([FromBody]WebhookFineTuningJobFailed? webhookFineTuningJobFailed)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="webhookFineTuningJobSucceeded">The event payload sent by the API.</param>
        /// <response code="200">Return a 200 status code to acknowledge receipt of the event. Non-200  status codes will be retried.  </response>
        [HttpPost]
        [Route("/v1/fine_tuning_job_succeeded")]
        [Authorize]
        [ValidateModelState]
        public virtual IActionResult FineTuningJobSucceededPost([FromBody]WebhookFineTuningJobSucceeded? webhookFineTuningJobSucceeded)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="webhookResponseCancelled">The event payload sent by the API.</param>
        /// <response code="200">Return a 200 status code to acknowledge receipt of the event. Non-200  status codes will be retried. </response>
        [HttpPost]
        [Route("/v1/response_cancelled")]
        [Authorize]
        [ValidateModelState]
        public virtual IActionResult ResponseCancelledPost([FromBody]WebhookResponseCancelled? webhookResponseCancelled)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="webhookResponseCompleted">The event payload sent by the API.</param>
        /// <response code="200">Return a 200 status code to acknowledge receipt of the event. Non-200  status codes will be retried.  </response>
        [HttpPost]
        [Route("/v1/response_completed")]
        [Authorize]
        [ValidateModelState]
        public virtual IActionResult ResponseCompletedPost([FromBody]WebhookResponseCompleted? webhookResponseCompleted)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="webhookResponseFailed">The event payload sent by the API.</param>
        /// <response code="200">Return a 200 status code to acknowledge receipt of the event. Non-200  status codes will be retried. </response>
        [HttpPost]
        [Route("/v1/response_failed")]
        [Authorize]
        [ValidateModelState]
        public virtual IActionResult ResponseFailedPost([FromBody]WebhookResponseFailed? webhookResponseFailed)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="webhookResponseIncomplete">The event payload sent by the API.</param>
        /// <response code="200">Return a 200 status code to acknowledge receipt of the event. Non-200  status codes will be retried. </response>
        [HttpPost]
        [Route("/v1/response_incomplete")]
        [Authorize]
        [ValidateModelState]
        public virtual IActionResult ResponseIncompletePost([FromBody]WebhookResponseIncomplete? webhookResponseIncomplete)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }
    }
}
