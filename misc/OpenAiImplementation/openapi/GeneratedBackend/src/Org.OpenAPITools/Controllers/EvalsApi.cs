/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using System.Text.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class EvalsApiController : ControllerBase
    { 
        /// <summary>
        /// Cancel eval run
        /// </summary>
        /// <remarks>Cancel an ongoing evaluation run. </remarks>
        /// <param name="evalId">The ID of the evaluation whose run you want to cancel.</param>
        /// <param name="runId">The ID of the run to cancel.</param>
        /// <response code="200">The canceled eval run object</response>
        [HttpPost]
        [Route("/v1/evals/{eval_id}/runs/{run_id}")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(EvalRun))]
        public virtual IActionResult CancelEvalRun([FromRoute (Name = "eval_id")][Required]string evalId, [FromRoute (Name = "run_id")][Required]string runId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"per_testing_criteria_results\" : [ {\r\n    \"testing_criteria\" : \"testing_criteria\",\r\n    \"passed\" : 4,\r\n    \"failed\" : 7\r\n  }, {\r\n    \"testing_criteria\" : \"testing_criteria\",\r\n    \"passed\" : 4,\r\n    \"failed\" : 7\r\n  } ],\r\n  \"metadata\" : {\r\n    \"key\" : \"metadata\"\r\n  },\r\n  \"eval_id\" : \"eval_id\",\r\n  \"report_url\" : \"report_url\",\r\n  \"created_at\" : 0,\r\n  \"error\" : {\r\n    \"code\" : \"code\",\r\n    \"message\" : \"message\"\r\n  },\r\n  \"data_source\" : {\r\n    \"source\" : {\r\n      \"type\" : \"file_content\",\r\n      \"content\" : [ {\r\n        \"item\" : {\r\n          \"key\" : \"\"\r\n        },\r\n        \"sample\" : {\r\n          \"key\" : \"\"\r\n        }\r\n      }, {\r\n        \"item\" : {\r\n          \"key\" : \"\"\r\n        },\r\n        \"sample\" : {\r\n          \"key\" : \"\"\r\n        }\r\n      } ]\r\n    },\r\n    \"type\" : \"jsonl\"\r\n  },\r\n  \"result_counts\" : {\r\n    \"total\" : 6,\r\n    \"failed\" : 5,\r\n    \"passed\" : 5,\r\n    \"errored\" : 1\r\n  },\r\n  \"name\" : \"name\",\r\n  \"model\" : \"model\",\r\n  \"id\" : \"id\",\r\n  \"per_model_usage\" : [ {\r\n    \"completion_tokens\" : 9,\r\n    \"prompt_tokens\" : 7,\r\n    \"model_name\" : \"model_name\",\r\n    \"total_tokens\" : 3,\r\n    \"invocation_count\" : 2,\r\n    \"cached_tokens\" : 2\r\n  }, {\r\n    \"completion_tokens\" : 9,\r\n    \"prompt_tokens\" : 7,\r\n    \"model_name\" : \"model_name\",\r\n    \"total_tokens\" : 3,\r\n    \"invocation_count\" : 2,\r\n    \"cached_tokens\" : 2\r\n  } ],\r\n  \"object\" : \"eval.run\",\r\n  \"status\" : \"status\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<EvalRun>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create eval
        /// </summary>
        /// <remarks>Create the structure of an evaluation that can be used to test a model&#39;s performance. An evaluation is a set of testing criteria and the config for a data source, which dictates the schema of the data used in the evaluation. After creating an evaluation, you can run it on different models and model parameters. We support several types of graders and datasources. For more information, see the [Evals guide](https://platform.openai.com/docs/guides/evals). </remarks>
        /// <param name="createEvalRequest"></param>
        /// <response code="201">OK</response>
        [HttpPost]
        [Route("/v1/evals")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 201, type: typeof(Eval))]
        public virtual IActionResult CreateEval([FromBody]CreateEvalRequest createEvalRequest)
        {

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"metadata\" : {\r\n    \"key\" : \"metadata\"\r\n  },\r\n  \"name\" : \"Chatbot effectiveness Evaluation\",\r\n  \"testing_criteria\" : [ {\r\n    \"input\" : [ {\r\n      \"role\" : \"user\",\r\n      \"type\" : \"message\",\r\n      \"content\" : \"EvalItem_content\"\r\n    }, {\r\n      \"role\" : \"user\",\r\n      \"type\" : \"message\",\r\n      \"content\" : \"EvalItem_content\"\r\n    } ],\r\n    \"name\" : \"name\",\r\n    \"model\" : \"model\",\r\n    \"passing_labels\" : [ \"passing_labels\", \"passing_labels\" ],\r\n    \"type\" : \"label_model\",\r\n    \"labels\" : [ \"labels\", \"labels\" ]\r\n  }, {\r\n    \"input\" : [ {\r\n      \"role\" : \"user\",\r\n      \"type\" : \"message\",\r\n      \"content\" : \"EvalItem_content\"\r\n    }, {\r\n      \"role\" : \"user\",\r\n      \"type\" : \"message\",\r\n      \"content\" : \"EvalItem_content\"\r\n    } ],\r\n    \"name\" : \"name\",\r\n    \"model\" : \"model\",\r\n    \"passing_labels\" : [ \"passing_labels\", \"passing_labels\" ],\r\n    \"type\" : \"label_model\",\r\n    \"labels\" : [ \"labels\", \"labels\" ]\r\n  } ],\r\n  \"created_at\" : 0,\r\n  \"id\" : \"id\",\r\n  \"data_source_config\" : {\r\n    \"schema\" : {\r\n      \"key\" : \"\"\r\n    },\r\n    \"type\" : \"custom\"\r\n  },\r\n  \"object\" : \"eval\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<Eval>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create eval run
        /// </summary>
        /// <remarks>Kicks off a new run for a given evaluation, specifying the data source, and what model configuration to use to test. The datasource will be validated against the schema specified in the config of the evaluation. </remarks>
        /// <param name="evalId">The ID of the evaluation to create a run for.</param>
        /// <param name="createEvalRunRequest"></param>
        /// <response code="201">Successfully created a run for the evaluation</response>
        /// <response code="400">Bad request (for example, missing eval object)</response>
        [HttpPost]
        [Route("/v1/evals/{eval_id}/runs")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 201, type: typeof(EvalRun))]
        [ProducesResponseType(statusCode: 400, type: typeof(Error))]
        public virtual IActionResult CreateEvalRun([FromRoute (Name = "eval_id")][Required]string evalId, [FromBody]CreateEvalRunRequest createEvalRunRequest)
        {

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"per_testing_criteria_results\" : [ {\r\n    \"testing_criteria\" : \"testing_criteria\",\r\n    \"passed\" : 4,\r\n    \"failed\" : 7\r\n  }, {\r\n    \"testing_criteria\" : \"testing_criteria\",\r\n    \"passed\" : 4,\r\n    \"failed\" : 7\r\n  } ],\r\n  \"metadata\" : {\r\n    \"key\" : \"metadata\"\r\n  },\r\n  \"eval_id\" : \"eval_id\",\r\n  \"report_url\" : \"report_url\",\r\n  \"created_at\" : 0,\r\n  \"error\" : {\r\n    \"code\" : \"code\",\r\n    \"message\" : \"message\"\r\n  },\r\n  \"data_source\" : {\r\n    \"source\" : {\r\n      \"type\" : \"file_content\",\r\n      \"content\" : [ {\r\n        \"item\" : {\r\n          \"key\" : \"\"\r\n        },\r\n        \"sample\" : {\r\n          \"key\" : \"\"\r\n        }\r\n      }, {\r\n        \"item\" : {\r\n          \"key\" : \"\"\r\n        },\r\n        \"sample\" : {\r\n          \"key\" : \"\"\r\n        }\r\n      } ]\r\n    },\r\n    \"type\" : \"jsonl\"\r\n  },\r\n  \"result_counts\" : {\r\n    \"total\" : 6,\r\n    \"failed\" : 5,\r\n    \"passed\" : 5,\r\n    \"errored\" : 1\r\n  },\r\n  \"name\" : \"name\",\r\n  \"model\" : \"model\",\r\n  \"id\" : \"id\",\r\n  \"per_model_usage\" : [ {\r\n    \"completion_tokens\" : 9,\r\n    \"prompt_tokens\" : 7,\r\n    \"model_name\" : \"model_name\",\r\n    \"total_tokens\" : 3,\r\n    \"invocation_count\" : 2,\r\n    \"cached_tokens\" : 2\r\n  }, {\r\n    \"completion_tokens\" : 9,\r\n    \"prompt_tokens\" : 7,\r\n    \"model_name\" : \"model_name\",\r\n    \"total_tokens\" : 3,\r\n    \"invocation_count\" : 2,\r\n    \"cached_tokens\" : 2\r\n  } ],\r\n  \"object\" : \"eval.run\",\r\n  \"status\" : \"status\"\r\n}";
            exampleJson = "{\r\n  \"code\" : \"code\",\r\n  \"param\" : \"param\",\r\n  \"message\" : \"message\",\r\n  \"type\" : \"type\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<EvalRun>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete an eval
        /// </summary>
        /// <remarks>Delete an evaluation. </remarks>
        /// <param name="evalId">The ID of the evaluation to delete.</param>
        /// <response code="200">Successfully deleted the evaluation.</response>
        /// <response code="404">Evaluation not found.</response>
        [HttpDelete]
        [Route("/v1/evals/{eval_id}")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(DeleteEval200Response))]
        [ProducesResponseType(statusCode: 404, type: typeof(Error))]
        public virtual IActionResult DeleteEval([FromRoute (Name = "eval_id")][Required]string evalId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"deleted\" : true,\r\n  \"eval_id\" : \"eval_abc123\",\r\n  \"object\" : \"eval.deleted\"\r\n}";
            exampleJson = "{\r\n  \"code\" : \"code\",\r\n  \"param\" : \"param\",\r\n  \"message\" : \"message\",\r\n  \"type\" : \"type\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<DeleteEval200Response>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete eval run
        /// </summary>
        /// <remarks>Delete an eval run. </remarks>
        /// <param name="evalId">The ID of the evaluation to delete the run from.</param>
        /// <param name="runId">The ID of the run to delete.</param>
        /// <response code="200">Successfully deleted the eval run</response>
        /// <response code="404">Run not found</response>
        [HttpDelete]
        [Route("/v1/evals/{eval_id}/runs/{run_id}")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(DeleteEvalRun200Response))]
        [ProducesResponseType(statusCode: 404, type: typeof(Error))]
        public virtual IActionResult DeleteEvalRun([FromRoute (Name = "eval_id")][Required]string evalId, [FromRoute (Name = "run_id")][Required]string runId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"deleted\" : true,\r\n  \"run_id\" : \"evalrun_677469f564d48190807532a852da3afb\",\r\n  \"object\" : \"eval.run.deleted\"\r\n}";
            exampleJson = "{\r\n  \"code\" : \"code\",\r\n  \"param\" : \"param\",\r\n  \"message\" : \"message\",\r\n  \"type\" : \"type\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<DeleteEvalRun200Response>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get an eval
        /// </summary>
        /// <remarks>Get an evaluation by ID. </remarks>
        /// <param name="evalId">The ID of the evaluation to retrieve.</param>
        /// <response code="200">The evaluation</response>
        [HttpGet]
        [Route("/v1/evals/{eval_id}")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Eval))]
        public virtual IActionResult GetEval([FromRoute (Name = "eval_id")][Required]string evalId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"metadata\" : {\r\n    \"key\" : \"metadata\"\r\n  },\r\n  \"name\" : \"Chatbot effectiveness Evaluation\",\r\n  \"testing_criteria\" : [ {\r\n    \"input\" : [ {\r\n      \"role\" : \"user\",\r\n      \"type\" : \"message\",\r\n      \"content\" : \"EvalItem_content\"\r\n    }, {\r\n      \"role\" : \"user\",\r\n      \"type\" : \"message\",\r\n      \"content\" : \"EvalItem_content\"\r\n    } ],\r\n    \"name\" : \"name\",\r\n    \"model\" : \"model\",\r\n    \"passing_labels\" : [ \"passing_labels\", \"passing_labels\" ],\r\n    \"type\" : \"label_model\",\r\n    \"labels\" : [ \"labels\", \"labels\" ]\r\n  }, {\r\n    \"input\" : [ {\r\n      \"role\" : \"user\",\r\n      \"type\" : \"message\",\r\n      \"content\" : \"EvalItem_content\"\r\n    }, {\r\n      \"role\" : \"user\",\r\n      \"type\" : \"message\",\r\n      \"content\" : \"EvalItem_content\"\r\n    } ],\r\n    \"name\" : \"name\",\r\n    \"model\" : \"model\",\r\n    \"passing_labels\" : [ \"passing_labels\", \"passing_labels\" ],\r\n    \"type\" : \"label_model\",\r\n    \"labels\" : [ \"labels\", \"labels\" ]\r\n  } ],\r\n  \"created_at\" : 0,\r\n  \"id\" : \"id\",\r\n  \"data_source_config\" : {\r\n    \"schema\" : {\r\n      \"key\" : \"\"\r\n    },\r\n    \"type\" : \"custom\"\r\n  },\r\n  \"object\" : \"eval\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<Eval>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get an eval run
        /// </summary>
        /// <remarks>Get an evaluation run by ID. </remarks>
        /// <param name="evalId">The ID of the evaluation to retrieve runs for.</param>
        /// <param name="runId">The ID of the run to retrieve.</param>
        /// <response code="200">The evaluation run</response>
        [HttpGet]
        [Route("/v1/evals/{eval_id}/runs/{run_id}")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(EvalRun))]
        public virtual IActionResult GetEvalRun([FromRoute (Name = "eval_id")][Required]string evalId, [FromRoute (Name = "run_id")][Required]string runId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"per_testing_criteria_results\" : [ {\r\n    \"testing_criteria\" : \"testing_criteria\",\r\n    \"passed\" : 4,\r\n    \"failed\" : 7\r\n  }, {\r\n    \"testing_criteria\" : \"testing_criteria\",\r\n    \"passed\" : 4,\r\n    \"failed\" : 7\r\n  } ],\r\n  \"metadata\" : {\r\n    \"key\" : \"metadata\"\r\n  },\r\n  \"eval_id\" : \"eval_id\",\r\n  \"report_url\" : \"report_url\",\r\n  \"created_at\" : 0,\r\n  \"error\" : {\r\n    \"code\" : \"code\",\r\n    \"message\" : \"message\"\r\n  },\r\n  \"data_source\" : {\r\n    \"source\" : {\r\n      \"type\" : \"file_content\",\r\n      \"content\" : [ {\r\n        \"item\" : {\r\n          \"key\" : \"\"\r\n        },\r\n        \"sample\" : {\r\n          \"key\" : \"\"\r\n        }\r\n      }, {\r\n        \"item\" : {\r\n          \"key\" : \"\"\r\n        },\r\n        \"sample\" : {\r\n          \"key\" : \"\"\r\n        }\r\n      } ]\r\n    },\r\n    \"type\" : \"jsonl\"\r\n  },\r\n  \"result_counts\" : {\r\n    \"total\" : 6,\r\n    \"failed\" : 5,\r\n    \"passed\" : 5,\r\n    \"errored\" : 1\r\n  },\r\n  \"name\" : \"name\",\r\n  \"model\" : \"model\",\r\n  \"id\" : \"id\",\r\n  \"per_model_usage\" : [ {\r\n    \"completion_tokens\" : 9,\r\n    \"prompt_tokens\" : 7,\r\n    \"model_name\" : \"model_name\",\r\n    \"total_tokens\" : 3,\r\n    \"invocation_count\" : 2,\r\n    \"cached_tokens\" : 2\r\n  }, {\r\n    \"completion_tokens\" : 9,\r\n    \"prompt_tokens\" : 7,\r\n    \"model_name\" : \"model_name\",\r\n    \"total_tokens\" : 3,\r\n    \"invocation_count\" : 2,\r\n    \"cached_tokens\" : 2\r\n  } ],\r\n  \"object\" : \"eval.run\",\r\n  \"status\" : \"status\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<EvalRun>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get an output item of an eval run
        /// </summary>
        /// <remarks>Get an evaluation run output item by ID. </remarks>
        /// <param name="evalId">The ID of the evaluation to retrieve runs for.</param>
        /// <param name="runId">The ID of the run to retrieve.</param>
        /// <param name="outputItemId">The ID of the output item to retrieve.</param>
        /// <response code="200">The evaluation run output item</response>
        [HttpGet]
        [Route("/v1/evals/{eval_id}/runs/{run_id}/output_items/{output_item_id}")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(EvalRunOutputItem))]
        public virtual IActionResult GetEvalRunOutputItem([FromRoute (Name = "eval_id")][Required]string evalId, [FromRoute (Name = "run_id")][Required]string runId, [FromRoute (Name = "output_item_id")][Required]string outputItemId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"datasource_item\" : {\r\n    \"key\" : \"\"\r\n  },\r\n  \"run_id\" : \"run_id\",\r\n  \"eval_id\" : \"eval_id\",\r\n  \"created_at\" : 0,\r\n  \"datasource_item_id\" : 6,\r\n  \"id\" : \"id\",\r\n  \"results\" : [ {\r\n    \"key\" : \"\"\r\n  }, {\r\n    \"key\" : \"\"\r\n  } ],\r\n  \"sample\" : {\r\n    \"output\" : [ {\r\n      \"role\" : \"role\",\r\n      \"content\" : \"content\"\r\n    }, {\r\n      \"role\" : \"role\",\r\n      \"content\" : \"content\"\r\n    } ],\r\n    \"top_p\" : 3.616076749251911,\r\n    \"input\" : [ {\r\n      \"role\" : \"role\",\r\n      \"content\" : \"content\"\r\n    }, {\r\n      \"role\" : \"role\",\r\n      \"content\" : \"content\"\r\n    } ],\r\n    \"max_completion_tokens\" : 9,\r\n    \"finish_reason\" : \"finish_reason\",\r\n    \"seed\" : 2,\r\n    \"usage\" : {\r\n      \"completion_tokens\" : 5,\r\n      \"prompt_tokens\" : 5,\r\n      \"total_tokens\" : 1,\r\n      \"cached_tokens\" : 2\r\n    },\r\n    \"temperature\" : 7.061401241503109,\r\n    \"model\" : \"model\",\r\n    \"error\" : {\r\n      \"code\" : \"code\",\r\n      \"message\" : \"message\"\r\n    }\r\n  },\r\n  \"object\" : \"eval.run.output_item\",\r\n  \"status\" : \"status\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<EvalRunOutputItem>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get eval run output items
        /// </summary>
        /// <remarks>Get a list of output items for an evaluation run. </remarks>
        /// <param name="evalId">The ID of the evaluation to retrieve runs for.</param>
        /// <param name="runId">The ID of the run to retrieve output items for.</param>
        /// <param name="after">Identifier for the last output item from the previous pagination request.</param>
        /// <param name="limit">Number of output items to retrieve.</param>
        /// <param name="status">Filter output items by status. Use &#x60;failed&#x60; to filter by failed output items or &#x60;pass&#x60; to filter by passed output items. </param>
        /// <param name="order">Sort order for output items by timestamp. Use &#x60;asc&#x60; for ascending order or &#x60;desc&#x60; for descending order. Defaults to &#x60;asc&#x60;.</param>
        /// <response code="200">A list of output items for the evaluation run</response>
        [HttpGet]
        [Route("/v1/evals/{eval_id}/runs/{run_id}/output_items")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(EvalRunOutputItemList))]
        public virtual IActionResult GetEvalRunOutputItems([FromRoute (Name = "eval_id")][Required]string evalId, [FromRoute (Name = "run_id")][Required]string runId, [FromQuery (Name = "after")]string? after, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "status")]string? status, [FromQuery (Name = "order")]string? order)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"first_id\" : \"first_id\",\r\n  \"data\" : [ {\r\n    \"datasource_item\" : {\r\n      \"key\" : \"\"\r\n    },\r\n    \"run_id\" : \"run_id\",\r\n    \"eval_id\" : \"eval_id\",\r\n    \"created_at\" : 0,\r\n    \"datasource_item_id\" : 6,\r\n    \"id\" : \"id\",\r\n    \"results\" : [ {\r\n      \"key\" : \"\"\r\n    }, {\r\n      \"key\" : \"\"\r\n    } ],\r\n    \"sample\" : {\r\n      \"output\" : [ {\r\n        \"role\" : \"role\",\r\n        \"content\" : \"content\"\r\n      }, {\r\n        \"role\" : \"role\",\r\n        \"content\" : \"content\"\r\n      } ],\r\n      \"top_p\" : 3.616076749251911,\r\n      \"input\" : [ {\r\n        \"role\" : \"role\",\r\n        \"content\" : \"content\"\r\n      }, {\r\n        \"role\" : \"role\",\r\n        \"content\" : \"content\"\r\n      } ],\r\n      \"max_completion_tokens\" : 9,\r\n      \"finish_reason\" : \"finish_reason\",\r\n      \"seed\" : 2,\r\n      \"usage\" : {\r\n        \"completion_tokens\" : 5,\r\n        \"prompt_tokens\" : 5,\r\n        \"total_tokens\" : 1,\r\n        \"cached_tokens\" : 2\r\n      },\r\n      \"temperature\" : 7.061401241503109,\r\n      \"model\" : \"model\",\r\n      \"error\" : {\r\n        \"code\" : \"code\",\r\n        \"message\" : \"message\"\r\n      }\r\n    },\r\n    \"object\" : \"eval.run.output_item\",\r\n    \"status\" : \"status\"\r\n  }, {\r\n    \"datasource_item\" : {\r\n      \"key\" : \"\"\r\n    },\r\n    \"run_id\" : \"run_id\",\r\n    \"eval_id\" : \"eval_id\",\r\n    \"created_at\" : 0,\r\n    \"datasource_item_id\" : 6,\r\n    \"id\" : \"id\",\r\n    \"results\" : [ {\r\n      \"key\" : \"\"\r\n    }, {\r\n      \"key\" : \"\"\r\n    } ],\r\n    \"sample\" : {\r\n      \"output\" : [ {\r\n        \"role\" : \"role\",\r\n        \"content\" : \"content\"\r\n      }, {\r\n        \"role\" : \"role\",\r\n        \"content\" : \"content\"\r\n      } ],\r\n      \"top_p\" : 3.616076749251911,\r\n      \"input\" : [ {\r\n        \"role\" : \"role\",\r\n        \"content\" : \"content\"\r\n      }, {\r\n        \"role\" : \"role\",\r\n        \"content\" : \"content\"\r\n      } ],\r\n      \"max_completion_tokens\" : 9,\r\n      \"finish_reason\" : \"finish_reason\",\r\n      \"seed\" : 2,\r\n      \"usage\" : {\r\n        \"completion_tokens\" : 5,\r\n        \"prompt_tokens\" : 5,\r\n        \"total_tokens\" : 1,\r\n        \"cached_tokens\" : 2\r\n      },\r\n      \"temperature\" : 7.061401241503109,\r\n      \"model\" : \"model\",\r\n      \"error\" : {\r\n        \"code\" : \"code\",\r\n        \"message\" : \"message\"\r\n      }\r\n    },\r\n    \"object\" : \"eval.run.output_item\",\r\n    \"status\" : \"status\"\r\n  } ],\r\n  \"last_id\" : \"last_id\",\r\n  \"has_more\" : true,\r\n  \"object\" : \"list\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<EvalRunOutputItemList>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get eval runs
        /// </summary>
        /// <remarks>Get a list of runs for an evaluation. </remarks>
        /// <param name="evalId">The ID of the evaluation to retrieve runs for.</param>
        /// <param name="after">Identifier for the last run from the previous pagination request.</param>
        /// <param name="limit">Number of runs to retrieve.</param>
        /// <param name="order">Sort order for runs by timestamp. Use &#x60;asc&#x60; for ascending order or &#x60;desc&#x60; for descending order. Defaults to &#x60;asc&#x60;.</param>
        /// <param name="status">Filter runs by status. One of &#x60;queued&#x60; | &#x60;in_progress&#x60; | &#x60;failed&#x60; | &#x60;completed&#x60; | &#x60;canceled&#x60;.</param>
        /// <response code="200">A list of runs for the evaluation</response>
        [HttpGet]
        [Route("/v1/evals/{eval_id}/runs")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(EvalRunList))]
        public virtual IActionResult GetEvalRuns([FromRoute (Name = "eval_id")][Required]string evalId, [FromQuery (Name = "after")]string? after, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "order")]string? order, [FromQuery (Name = "status")]string? status)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"first_id\" : \"first_id\",\r\n  \"data\" : [ {\r\n    \"per_testing_criteria_results\" : [ {\r\n      \"testing_criteria\" : \"testing_criteria\",\r\n      \"passed\" : 4,\r\n      \"failed\" : 7\r\n    }, {\r\n      \"testing_criteria\" : \"testing_criteria\",\r\n      \"passed\" : 4,\r\n      \"failed\" : 7\r\n    } ],\r\n    \"metadata\" : {\r\n      \"key\" : \"metadata\"\r\n    },\r\n    \"eval_id\" : \"eval_id\",\r\n    \"report_url\" : \"report_url\",\r\n    \"created_at\" : 0,\r\n    \"error\" : {\r\n      \"code\" : \"code\",\r\n      \"message\" : \"message\"\r\n    },\r\n    \"data_source\" : {\r\n      \"source\" : {\r\n        \"type\" : \"file_content\",\r\n        \"content\" : [ {\r\n          \"item\" : {\r\n            \"key\" : \"\"\r\n          },\r\n          \"sample\" : {\r\n            \"key\" : \"\"\r\n          }\r\n        }, {\r\n          \"item\" : {\r\n            \"key\" : \"\"\r\n          },\r\n          \"sample\" : {\r\n            \"key\" : \"\"\r\n          }\r\n        } ]\r\n      },\r\n      \"type\" : \"jsonl\"\r\n    },\r\n    \"result_counts\" : {\r\n      \"total\" : 6,\r\n      \"failed\" : 5,\r\n      \"passed\" : 5,\r\n      \"errored\" : 1\r\n    },\r\n    \"name\" : \"name\",\r\n    \"model\" : \"model\",\r\n    \"id\" : \"id\",\r\n    \"per_model_usage\" : [ {\r\n      \"completion_tokens\" : 9,\r\n      \"prompt_tokens\" : 7,\r\n      \"model_name\" : \"model_name\",\r\n      \"total_tokens\" : 3,\r\n      \"invocation_count\" : 2,\r\n      \"cached_tokens\" : 2\r\n    }, {\r\n      \"completion_tokens\" : 9,\r\n      \"prompt_tokens\" : 7,\r\n      \"model_name\" : \"model_name\",\r\n      \"total_tokens\" : 3,\r\n      \"invocation_count\" : 2,\r\n      \"cached_tokens\" : 2\r\n    } ],\r\n    \"object\" : \"eval.run\",\r\n    \"status\" : \"status\"\r\n  }, {\r\n    \"per_testing_criteria_results\" : [ {\r\n      \"testing_criteria\" : \"testing_criteria\",\r\n      \"passed\" : 4,\r\n      \"failed\" : 7\r\n    }, {\r\n      \"testing_criteria\" : \"testing_criteria\",\r\n      \"passed\" : 4,\r\n      \"failed\" : 7\r\n    } ],\r\n    \"metadata\" : {\r\n      \"key\" : \"metadata\"\r\n    },\r\n    \"eval_id\" : \"eval_id\",\r\n    \"report_url\" : \"report_url\",\r\n    \"created_at\" : 0,\r\n    \"error\" : {\r\n      \"code\" : \"code\",\r\n      \"message\" : \"message\"\r\n    },\r\n    \"data_source\" : {\r\n      \"source\" : {\r\n        \"type\" : \"file_content\",\r\n        \"content\" : [ {\r\n          \"item\" : {\r\n            \"key\" : \"\"\r\n          },\r\n          \"sample\" : {\r\n            \"key\" : \"\"\r\n          }\r\n        }, {\r\n          \"item\" : {\r\n            \"key\" : \"\"\r\n          },\r\n          \"sample\" : {\r\n            \"key\" : \"\"\r\n          }\r\n        } ]\r\n      },\r\n      \"type\" : \"jsonl\"\r\n    },\r\n    \"result_counts\" : {\r\n      \"total\" : 6,\r\n      \"failed\" : 5,\r\n      \"passed\" : 5,\r\n      \"errored\" : 1\r\n    },\r\n    \"name\" : \"name\",\r\n    \"model\" : \"model\",\r\n    \"id\" : \"id\",\r\n    \"per_model_usage\" : [ {\r\n      \"completion_tokens\" : 9,\r\n      \"prompt_tokens\" : 7,\r\n      \"model_name\" : \"model_name\",\r\n      \"total_tokens\" : 3,\r\n      \"invocation_count\" : 2,\r\n      \"cached_tokens\" : 2\r\n    }, {\r\n      \"completion_tokens\" : 9,\r\n      \"prompt_tokens\" : 7,\r\n      \"model_name\" : \"model_name\",\r\n      \"total_tokens\" : 3,\r\n      \"invocation_count\" : 2,\r\n      \"cached_tokens\" : 2\r\n    } ],\r\n    \"object\" : \"eval.run\",\r\n    \"status\" : \"status\"\r\n  } ],\r\n  \"last_id\" : \"last_id\",\r\n  \"has_more\" : true,\r\n  \"object\" : \"list\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<EvalRunList>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List evals
        /// </summary>
        /// <remarks>List evaluations for a project. </remarks>
        /// <param name="after">Identifier for the last eval from the previous pagination request.</param>
        /// <param name="limit">Number of evals to retrieve.</param>
        /// <param name="order">Sort order for evals by timestamp. Use &#x60;asc&#x60; for ascending order or &#x60;desc&#x60; for descending order.</param>
        /// <param name="orderBy">Evals can be ordered by creation time or last updated time. Use &#x60;created_at&#x60; for creation time or &#x60;updated_at&#x60; for last updated time. </param>
        /// <response code="200">A list of evals</response>
        [HttpGet]
        [Route("/v1/evals")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(EvalList))]
        public virtual IActionResult ListEvals([FromQuery (Name = "after")]string? after, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "order")]string? order, [FromQuery (Name = "order_by")]string? orderBy)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"first_id\" : \"first_id\",\r\n  \"data\" : [ {\r\n    \"metadata\" : {\r\n      \"key\" : \"metadata\"\r\n    },\r\n    \"name\" : \"Chatbot effectiveness Evaluation\",\r\n    \"testing_criteria\" : [ {\r\n      \"input\" : [ {\r\n        \"role\" : \"user\",\r\n        \"type\" : \"message\",\r\n        \"content\" : \"EvalItem_content\"\r\n      }, {\r\n        \"role\" : \"user\",\r\n        \"type\" : \"message\",\r\n        \"content\" : \"EvalItem_content\"\r\n      } ],\r\n      \"name\" : \"name\",\r\n      \"model\" : \"model\",\r\n      \"passing_labels\" : [ \"passing_labels\", \"passing_labels\" ],\r\n      \"type\" : \"label_model\",\r\n      \"labels\" : [ \"labels\", \"labels\" ]\r\n    }, {\r\n      \"input\" : [ {\r\n        \"role\" : \"user\",\r\n        \"type\" : \"message\",\r\n        \"content\" : \"EvalItem_content\"\r\n      }, {\r\n        \"role\" : \"user\",\r\n        \"type\" : \"message\",\r\n        \"content\" : \"EvalItem_content\"\r\n      } ],\r\n      \"name\" : \"name\",\r\n      \"model\" : \"model\",\r\n      \"passing_labels\" : [ \"passing_labels\", \"passing_labels\" ],\r\n      \"type\" : \"label_model\",\r\n      \"labels\" : [ \"labels\", \"labels\" ]\r\n    } ],\r\n    \"created_at\" : 0,\r\n    \"id\" : \"id\",\r\n    \"data_source_config\" : {\r\n      \"schema\" : {\r\n        \"key\" : \"\"\r\n      },\r\n      \"type\" : \"custom\"\r\n    },\r\n    \"object\" : \"eval\"\r\n  }, {\r\n    \"metadata\" : {\r\n      \"key\" : \"metadata\"\r\n    },\r\n    \"name\" : \"Chatbot effectiveness Evaluation\",\r\n    \"testing_criteria\" : [ {\r\n      \"input\" : [ {\r\n        \"role\" : \"user\",\r\n        \"type\" : \"message\",\r\n        \"content\" : \"EvalItem_content\"\r\n      }, {\r\n        \"role\" : \"user\",\r\n        \"type\" : \"message\",\r\n        \"content\" : \"EvalItem_content\"\r\n      } ],\r\n      \"name\" : \"name\",\r\n      \"model\" : \"model\",\r\n      \"passing_labels\" : [ \"passing_labels\", \"passing_labels\" ],\r\n      \"type\" : \"label_model\",\r\n      \"labels\" : [ \"labels\", \"labels\" ]\r\n    }, {\r\n      \"input\" : [ {\r\n        \"role\" : \"user\",\r\n        \"type\" : \"message\",\r\n        \"content\" : \"EvalItem_content\"\r\n      }, {\r\n        \"role\" : \"user\",\r\n        \"type\" : \"message\",\r\n        \"content\" : \"EvalItem_content\"\r\n      } ],\r\n      \"name\" : \"name\",\r\n      \"model\" : \"model\",\r\n      \"passing_labels\" : [ \"passing_labels\", \"passing_labels\" ],\r\n      \"type\" : \"label_model\",\r\n      \"labels\" : [ \"labels\", \"labels\" ]\r\n    } ],\r\n    \"created_at\" : 0,\r\n    \"id\" : \"id\",\r\n    \"data_source_config\" : {\r\n      \"schema\" : {\r\n        \"key\" : \"\"\r\n      },\r\n      \"type\" : \"custom\"\r\n    },\r\n    \"object\" : \"eval\"\r\n  } ],\r\n  \"last_id\" : \"last_id\",\r\n  \"has_more\" : true,\r\n  \"object\" : \"list\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<EvalList>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update an eval
        /// </summary>
        /// <remarks>Update certain properties of an evaluation. </remarks>
        /// <param name="evalId">The ID of the evaluation to update.</param>
        /// <param name="updateEvalRequest">Request to update an evaluation</param>
        /// <response code="200">The updated evaluation</response>
        [HttpPost]
        [Route("/v1/evals/{eval_id}")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Eval))]
        public virtual IActionResult UpdateEval([FromRoute (Name = "eval_id")][Required]string evalId, [FromBody]UpdateEvalRequest updateEvalRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"metadata\" : {\r\n    \"key\" : \"metadata\"\r\n  },\r\n  \"name\" : \"Chatbot effectiveness Evaluation\",\r\n  \"testing_criteria\" : [ {\r\n    \"input\" : [ {\r\n      \"role\" : \"user\",\r\n      \"type\" : \"message\",\r\n      \"content\" : \"EvalItem_content\"\r\n    }, {\r\n      \"role\" : \"user\",\r\n      \"type\" : \"message\",\r\n      \"content\" : \"EvalItem_content\"\r\n    } ],\r\n    \"name\" : \"name\",\r\n    \"model\" : \"model\",\r\n    \"passing_labels\" : [ \"passing_labels\", \"passing_labels\" ],\r\n    \"type\" : \"label_model\",\r\n    \"labels\" : [ \"labels\", \"labels\" ]\r\n  }, {\r\n    \"input\" : [ {\r\n      \"role\" : \"user\",\r\n      \"type\" : \"message\",\r\n      \"content\" : \"EvalItem_content\"\r\n    }, {\r\n      \"role\" : \"user\",\r\n      \"type\" : \"message\",\r\n      \"content\" : \"EvalItem_content\"\r\n    } ],\r\n    \"name\" : \"name\",\r\n    \"model\" : \"model\",\r\n    \"passing_labels\" : [ \"passing_labels\", \"passing_labels\" ],\r\n    \"type\" : \"label_model\",\r\n    \"labels\" : [ \"labels\", \"labels\" ]\r\n  } ],\r\n  \"created_at\" : 0,\r\n  \"id\" : \"id\",\r\n  \"data_source_config\" : {\r\n    \"schema\" : {\r\n      \"key\" : \"\"\r\n    },\r\n    \"type\" : \"custom\"\r\n  },\r\n  \"object\" : \"eval\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<Eval>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
