/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using System.Text.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class FilesApiController : ControllerBase
    { 
        /// <summary>
        /// Upload file
        /// </summary>
        /// <remarks>Upload a file that can be used across various endpoints. Individual files can be up to 512 MB, and the size of all files uploaded by one organization can be up to 100 GB.  The Assistants API supports files up to 2 million tokens and of specific file types. See the [Assistants Tools guide](https://platform.openai.com/docs/assistants/tools) for details.  The Fine-tuning API only supports &#x60;.jsonl&#x60; files. The input also has certain required formats for fine-tuning [chat](https://platform.openai.com/docs/api-reference/fine-tuning/chat-input) or [completions](https://platform.openai.com/docs/api-reference/fine-tuning/completions-input) models.  The Batch API only supports &#x60;.jsonl&#x60; files up to 200 MB in size. The input also has a specific required [format](https://platform.openai.com/docs/api-reference/batch/request-input).  Please [contact us](https://help.openai.com/) if you need to increase these storage limits. </remarks>
        /// <param name="file">The File object (not file name) to be uploaded. </param>
        /// <param name="purpose"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/files")]
        [Authorize]
        [Consumes("multipart/form-data")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(OpenAIFile))]
        public virtual IActionResult CreateFile([Required()]IFormFile file, [FromForm (Name = "purpose")][Required()]FilePurpose purpose)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"expires_at\" : 1,\r\n  \"filename\" : \"filename\",\r\n  \"purpose\" : \"assistants\",\r\n  \"bytes\" : 0,\r\n  \"created_at\" : 6,\r\n  \"id\" : \"id\",\r\n  \"status_details\" : \"status_details\",\r\n  \"object\" : \"file\",\r\n  \"status\" : \"uploaded\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<OpenAIFile>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete file
        /// </summary>
        /// <remarks>Delete a file.</remarks>
        /// <param name="fileId">The ID of the file to use for this request.</param>
        /// <response code="200">OK</response>
        [HttpDelete]
        [Route("/v1/files/{file_id}")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(DeleteFileResponse))]
        public virtual IActionResult DeleteFile([FromRoute (Name = "file_id")][Required]string fileId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"deleted\" : true,\r\n  \"id\" : \"id\",\r\n  \"object\" : \"file\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<DeleteFileResponse>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieve file content
        /// </summary>
        /// <remarks>Returns the contents of the specified file.</remarks>
        /// <param name="fileId">The ID of the file to use for this request.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/files/{file_id}/content")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(string))]
        public virtual IActionResult DownloadFile([FromRoute (Name = "file_id")][Required]string fileId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<string>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List files
        /// </summary>
        /// <remarks>Returns a list of files.</remarks>
        /// <param name="purpose">Only return files with the given purpose.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 10,000, and the default is 10,000. </param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. </param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. </param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/files")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ListFilesResponse))]
        public virtual IActionResult ListFiles([FromQuery (Name = "purpose")]string? purpose, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "order")]string? order, [FromQuery (Name = "after")]string? after)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"first_id\" : \"file-abc123\",\r\n  \"data\" : [ {\r\n    \"expires_at\" : 1,\r\n    \"filename\" : \"filename\",\r\n    \"purpose\" : \"assistants\",\r\n    \"bytes\" : 0,\r\n    \"created_at\" : 6,\r\n    \"id\" : \"id\",\r\n    \"status_details\" : \"status_details\",\r\n    \"object\" : \"file\",\r\n    \"status\" : \"uploaded\"\r\n  }, {\r\n    \"expires_at\" : 1,\r\n    \"filename\" : \"filename\",\r\n    \"purpose\" : \"assistants\",\r\n    \"bytes\" : 0,\r\n    \"created_at\" : 6,\r\n    \"id\" : \"id\",\r\n    \"status_details\" : \"status_details\",\r\n    \"object\" : \"file\",\r\n    \"status\" : \"uploaded\"\r\n  } ],\r\n  \"last_id\" : \"file-abc456\",\r\n  \"has_more\" : false,\r\n  \"object\" : \"list\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<ListFilesResponse>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieve file
        /// </summary>
        /// <remarks>Returns information about a specific file.</remarks>
        /// <param name="fileId">The ID of the file to use for this request.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/files/{file_id}")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(OpenAIFile))]
        public virtual IActionResult RetrieveFile([FromRoute (Name = "file_id")][Required]string fileId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"expires_at\" : 1,\r\n  \"filename\" : \"filename\",\r\n  \"purpose\" : \"assistants\",\r\n  \"bytes\" : 0,\r\n  \"created_at\" : 6,\r\n  \"id\" : \"id\",\r\n  \"status_details\" : \"status_details\",\r\n  \"object\" : \"file\",\r\n  \"status\" : \"uploaded\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<OpenAIFile>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
