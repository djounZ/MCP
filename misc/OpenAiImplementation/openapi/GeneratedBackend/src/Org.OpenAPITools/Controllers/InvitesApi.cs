/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using System.Text.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class InvitesApiController : ControllerBase
    { 
        /// <summary>
        /// Delete invite
        /// </summary>
        /// <remarks>Delete an invite. If the invite has already been accepted, it cannot be deleted.</remarks>
        /// <param name="inviteId">The ID of the invite to delete.</param>
        /// <response code="200">Invite deleted successfully.</response>
        [HttpDelete]
        [Route("/v1/organization/invites/{invite_id}")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(InviteDeleteResponse))]
        public virtual IActionResult DeleteInvite([FromRoute (Name = "invite_id")][Required]string inviteId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"deleted\" : true,\r\n  \"id\" : \"id\",\r\n  \"object\" : \"organization.invite.deleted\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<InviteDeleteResponse>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create invite
        /// </summary>
        /// <remarks>Create an invite for a user to the organization. The invite must be accepted by the user before they have access to the organization.</remarks>
        /// <param name="inviteRequest">The invite request payload.</param>
        /// <response code="200">User invited successfully.</response>
        [HttpPost]
        [Route("/v1/organization/invites")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Invite))]
        public virtual IActionResult InviteUser([FromBody]InviteRequest inviteRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"role\" : \"owner\",\r\n  \"expires_at\" : 6,\r\n  \"projects\" : [ {\r\n    \"role\" : \"member\",\r\n    \"id\" : \"id\"\r\n  }, {\r\n    \"role\" : \"member\",\r\n    \"id\" : \"id\"\r\n  } ],\r\n  \"invited_at\" : 0,\r\n  \"id\" : \"id\",\r\n  \"accepted_at\" : 1,\r\n  \"email\" : \"email\",\r\n  \"object\" : \"organization.invite\",\r\n  \"status\" : \"accepted\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<Invite>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List invites
        /// </summary>
        /// <remarks>Returns a list of invites in the organization.</remarks>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. </param>
        /// <response code="200">Invites listed successfully.</response>
        [HttpGet]
        [Route("/v1/organization/invites")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(InviteListResponse))]
        public virtual IActionResult ListInvites([FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "after")]string? after)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"first_id\" : \"first_id\",\r\n  \"data\" : [ {\r\n    \"role\" : \"owner\",\r\n    \"expires_at\" : 6,\r\n    \"projects\" : [ {\r\n      \"role\" : \"member\",\r\n      \"id\" : \"id\"\r\n    }, {\r\n      \"role\" : \"member\",\r\n      \"id\" : \"id\"\r\n    } ],\r\n    \"invited_at\" : 0,\r\n    \"id\" : \"id\",\r\n    \"accepted_at\" : 1,\r\n    \"email\" : \"email\",\r\n    \"object\" : \"organization.invite\",\r\n    \"status\" : \"accepted\"\r\n  }, {\r\n    \"role\" : \"owner\",\r\n    \"expires_at\" : 6,\r\n    \"projects\" : [ {\r\n      \"role\" : \"member\",\r\n      \"id\" : \"id\"\r\n    }, {\r\n      \"role\" : \"member\",\r\n      \"id\" : \"id\"\r\n    } ],\r\n    \"invited_at\" : 0,\r\n    \"id\" : \"id\",\r\n    \"accepted_at\" : 1,\r\n    \"email\" : \"email\",\r\n    \"object\" : \"organization.invite\",\r\n    \"status\" : \"accepted\"\r\n  } ],\r\n  \"last_id\" : \"last_id\",\r\n  \"has_more\" : true,\r\n  \"object\" : \"list\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<InviteListResponse>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieve invite
        /// </summary>
        /// <remarks>Retrieves an invite.</remarks>
        /// <param name="inviteId">The ID of the invite to retrieve.</param>
        /// <response code="200">Invite retrieved successfully.</response>
        [HttpGet]
        [Route("/v1/organization/invites/{invite_id}")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Invite))]
        public virtual IActionResult RetrieveInvite([FromRoute (Name = "invite_id")][Required]string inviteId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"role\" : \"owner\",\r\n  \"expires_at\" : 6,\r\n  \"projects\" : [ {\r\n    \"role\" : \"member\",\r\n    \"id\" : \"id\"\r\n  }, {\r\n    \"role\" : \"member\",\r\n    \"id\" : \"id\"\r\n  } ],\r\n  \"invited_at\" : 0,\r\n  \"id\" : \"id\",\r\n  \"accepted_at\" : 1,\r\n  \"email\" : \"email\",\r\n  \"object\" : \"organization.invite\",\r\n  \"status\" : \"accepted\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<Invite>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
