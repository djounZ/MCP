/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using System.Text.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ProjectsApiController : ControllerBase
    { 
        /// <summary>
        /// Archive project
        /// </summary>
        /// <remarks>Archives a project in the organization. Archived projects cannot be used or updated.</remarks>
        /// <param name="projectId">The ID of the project.</param>
        /// <response code="200">Project archived successfully.</response>
        [HttpPost]
        [Route("/v1/organization/projects/{project_id}/archive")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Project))]
        public virtual IActionResult ArchiveProject([FromRoute (Name = "project_id")][Required]string projectId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"archived_at\" : 6,\r\n  \"name\" : \"name\",\r\n  \"created_at\" : 0,\r\n  \"id\" : \"id\",\r\n  \"object\" : \"organization.project\",\r\n  \"status\" : \"active\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<Project>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create project
        /// </summary>
        /// <remarks>Create a new project in the organization. Projects can be created and archived, but cannot be deleted.</remarks>
        /// <param name="projectCreateRequest">The project create request payload.</param>
        /// <response code="200">Project created successfully.</response>
        [HttpPost]
        [Route("/v1/organization/projects")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Project))]
        public virtual IActionResult CreateProject([FromBody]ProjectCreateRequest projectCreateRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"archived_at\" : 6,\r\n  \"name\" : \"name\",\r\n  \"created_at\" : 0,\r\n  \"id\" : \"id\",\r\n  \"object\" : \"organization.project\",\r\n  \"status\" : \"active\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<Project>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create project service account
        /// </summary>
        /// <remarks>Creates a new service account in the project. This also returns an unredacted API key for the service account.</remarks>
        /// <param name="projectId">The ID of the project.</param>
        /// <param name="projectServiceAccountCreateRequest">The project service account create request payload.</param>
        /// <response code="200">Project service account created successfully.</response>
        /// <response code="400">Error response when project is archived.</response>
        [HttpPost]
        [Route("/v1/organization/projects/{project_id}/service_accounts")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ProjectServiceAccountCreateResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(ErrorResponse))]
        public virtual IActionResult CreateProjectServiceAccount([FromRoute (Name = "project_id")][Required]string projectId, [FromBody]ProjectServiceAccountCreateRequest projectServiceAccountCreateRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"role\" : \"member\",\r\n  \"api_key\" : {\r\n    \"name\" : \"name\",\r\n    \"created_at\" : 6,\r\n    \"id\" : \"id\",\r\n    \"value\" : \"value\",\r\n    \"object\" : \"organization.project.service_account.api_key\"\r\n  },\r\n  \"name\" : \"name\",\r\n  \"created_at\" : 0,\r\n  \"id\" : \"id\",\r\n  \"object\" : \"organization.project.service_account\"\r\n}";
            exampleJson = "{\r\n  \"error\" : {\r\n    \"code\" : \"code\",\r\n    \"param\" : \"param\",\r\n    \"message\" : \"message\",\r\n    \"type\" : \"type\"\r\n  }\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<ProjectServiceAccountCreateResponse>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create project user
        /// </summary>
        /// <remarks>Adds a user to the project. Users must already be members of the organization to be added to a project.</remarks>
        /// <param name="projectId">The ID of the project.</param>
        /// <param name="projectUserCreateRequest">The project user create request payload.</param>
        /// <response code="200">User added to project successfully.</response>
        /// <response code="400">Error response for various conditions.</response>
        [HttpPost]
        [Route("/v1/organization/projects/{project_id}/users")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ProjectUser))]
        [ProducesResponseType(statusCode: 400, type: typeof(ErrorResponse))]
        public virtual IActionResult CreateProjectUser([FromRoute (Name = "project_id")][Required]string projectId, [FromBody]ProjectUserCreateRequest projectUserCreateRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"added_at\" : 1,\r\n  \"role\" : \"owner\",\r\n  \"name\" : \"name\",\r\n  \"id\" : \"id\",\r\n  \"email\" : \"email\",\r\n  \"object\" : \"organization.project.user\"\r\n}";
            exampleJson = "{\r\n  \"error\" : {\r\n    \"code\" : \"code\",\r\n    \"param\" : \"param\",\r\n    \"message\" : \"message\",\r\n    \"type\" : \"type\"\r\n  }\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<ProjectUser>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete project API key
        /// </summary>
        /// <remarks>Deletes an API key from the project.</remarks>
        /// <param name="projectId">The ID of the project.</param>
        /// <param name="keyId">The ID of the API key.</param>
        /// <response code="200">Project API key deleted successfully.</response>
        /// <response code="400">Error response for various conditions.</response>
        [HttpDelete]
        [Route("/v1/organization/projects/{project_id}/api_keys/{key_id}")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ProjectApiKeyDeleteResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(ErrorResponse))]
        public virtual IActionResult DeleteProjectApiKey([FromRoute (Name = "project_id")][Required]string projectId, [FromRoute (Name = "key_id")][Required]string keyId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"deleted\" : true,\r\n  \"id\" : \"id\",\r\n  \"object\" : \"organization.project.api_key.deleted\"\r\n}";
            exampleJson = "{\r\n  \"error\" : {\r\n    \"code\" : \"code\",\r\n    \"param\" : \"param\",\r\n    \"message\" : \"message\",\r\n    \"type\" : \"type\"\r\n  }\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<ProjectApiKeyDeleteResponse>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete project service account
        /// </summary>
        /// <remarks>Deletes a service account from the project.</remarks>
        /// <param name="projectId">The ID of the project.</param>
        /// <param name="serviceAccountId">The ID of the service account.</param>
        /// <response code="200">Project service account deleted successfully.</response>
        [HttpDelete]
        [Route("/v1/organization/projects/{project_id}/service_accounts/{service_account_id}")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ProjectServiceAccountDeleteResponse))]
        public virtual IActionResult DeleteProjectServiceAccount([FromRoute (Name = "project_id")][Required]string projectId, [FromRoute (Name = "service_account_id")][Required]string serviceAccountId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"deleted\" : true,\r\n  \"id\" : \"id\",\r\n  \"object\" : \"organization.project.service_account.deleted\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<ProjectServiceAccountDeleteResponse>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete project user
        /// </summary>
        /// <remarks>Deletes a user from the project.</remarks>
        /// <param name="projectId">The ID of the project.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <response code="200">Project user deleted successfully.</response>
        /// <response code="400">Error response for various conditions.</response>
        [HttpDelete]
        [Route("/v1/organization/projects/{project_id}/users/{user_id}")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ProjectUserDeleteResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(ErrorResponse))]
        public virtual IActionResult DeleteProjectUser([FromRoute (Name = "project_id")][Required]string projectId, [FromRoute (Name = "user_id")][Required]string userId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"deleted\" : true,\r\n  \"id\" : \"id\",\r\n  \"object\" : \"organization.project.user.deleted\"\r\n}";
            exampleJson = "{\r\n  \"error\" : {\r\n    \"code\" : \"code\",\r\n    \"param\" : \"param\",\r\n    \"message\" : \"message\",\r\n    \"type\" : \"type\"\r\n  }\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<ProjectUserDeleteResponse>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List project API keys
        /// </summary>
        /// <remarks>Returns a list of API keys in the project.</remarks>
        /// <param name="projectId">The ID of the project.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. </param>
        /// <response code="200">Project API keys listed successfully.</response>
        [HttpGet]
        [Route("/v1/organization/projects/{project_id}/api_keys")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ProjectApiKeyListResponse))]
        public virtual IActionResult ListProjectApiKeys([FromRoute (Name = "project_id")][Required]string projectId, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "after")]string? after)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"first_id\" : \"first_id\",\r\n  \"data\" : [ {\r\n    \"owner\" : {\r\n      \"service_account\" : {\r\n        \"role\" : \"owner\",\r\n        \"name\" : \"name\",\r\n        \"created_at\" : 5,\r\n        \"id\" : \"id\",\r\n        \"object\" : \"organization.project.service_account\"\r\n      },\r\n      \"type\" : \"user\",\r\n      \"user\" : {\r\n        \"added_at\" : 1,\r\n        \"role\" : \"owner\",\r\n        \"name\" : \"name\",\r\n        \"id\" : \"id\",\r\n        \"email\" : \"email\",\r\n        \"object\" : \"organization.project.user\"\r\n      }\r\n    },\r\n    \"last_used_at\" : 6,\r\n    \"name\" : \"name\",\r\n    \"created_at\" : 0,\r\n    \"redacted_value\" : \"redacted_value\",\r\n    \"id\" : \"id\",\r\n    \"object\" : \"organization.project.api_key\"\r\n  }, {\r\n    \"owner\" : {\r\n      \"service_account\" : {\r\n        \"role\" : \"owner\",\r\n        \"name\" : \"name\",\r\n        \"created_at\" : 5,\r\n        \"id\" : \"id\",\r\n        \"object\" : \"organization.project.service_account\"\r\n      },\r\n      \"type\" : \"user\",\r\n      \"user\" : {\r\n        \"added_at\" : 1,\r\n        \"role\" : \"owner\",\r\n        \"name\" : \"name\",\r\n        \"id\" : \"id\",\r\n        \"email\" : \"email\",\r\n        \"object\" : \"organization.project.user\"\r\n      }\r\n    },\r\n    \"last_used_at\" : 6,\r\n    \"name\" : \"name\",\r\n    \"created_at\" : 0,\r\n    \"redacted_value\" : \"redacted_value\",\r\n    \"id\" : \"id\",\r\n    \"object\" : \"organization.project.api_key\"\r\n  } ],\r\n  \"last_id\" : \"last_id\",\r\n  \"has_more\" : true,\r\n  \"object\" : \"list\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<ProjectApiKeyListResponse>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List project rate limits
        /// </summary>
        /// <remarks>Returns the rate limits per model for a project.</remarks>
        /// <param name="projectId">The ID of the project.</param>
        /// <param name="limit">A limit on the number of objects to be returned. The default is 100. </param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. </param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, beginning with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. </param>
        /// <response code="200">Project rate limits listed successfully.</response>
        [HttpGet]
        [Route("/v1/organization/projects/{project_id}/rate_limits")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ProjectRateLimitListResponse))]
        public virtual IActionResult ListProjectRateLimits([FromRoute (Name = "project_id")][Required]string projectId, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "after")]string? after, [FromQuery (Name = "before")]string? before)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"first_id\" : \"first_id\",\r\n  \"data\" : [ {\r\n    \"batch_1_day_max_input_tokens\" : 2,\r\n    \"max_tokens_per_1_minute\" : 6,\r\n    \"model\" : \"model\",\r\n    \"id\" : \"id\",\r\n    \"max_images_per_1_minute\" : 1,\r\n    \"max_audio_megabytes_per_1_minute\" : 5,\r\n    \"max_requests_per_1_minute\" : 0,\r\n    \"object\" : \"project.rate_limit\",\r\n    \"max_requests_per_1_day\" : 5\r\n  }, {\r\n    \"batch_1_day_max_input_tokens\" : 2,\r\n    \"max_tokens_per_1_minute\" : 6,\r\n    \"model\" : \"model\",\r\n    \"id\" : \"id\",\r\n    \"max_images_per_1_minute\" : 1,\r\n    \"max_audio_megabytes_per_1_minute\" : 5,\r\n    \"max_requests_per_1_minute\" : 0,\r\n    \"object\" : \"project.rate_limit\",\r\n    \"max_requests_per_1_day\" : 5\r\n  } ],\r\n  \"last_id\" : \"last_id\",\r\n  \"has_more\" : true,\r\n  \"object\" : \"list\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<ProjectRateLimitListResponse>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List project service accounts
        /// </summary>
        /// <remarks>Returns a list of service accounts in the project.</remarks>
        /// <param name="projectId">The ID of the project.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. </param>
        /// <response code="200">Project service accounts listed successfully.</response>
        /// <response code="400">Error response when project is archived.</response>
        [HttpGet]
        [Route("/v1/organization/projects/{project_id}/service_accounts")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ProjectServiceAccountListResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(ErrorResponse))]
        public virtual IActionResult ListProjectServiceAccounts([FromRoute (Name = "project_id")][Required]string projectId, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "after")]string? after)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"first_id\" : \"first_id\",\r\n  \"data\" : [ {\r\n    \"role\" : \"owner\",\r\n    \"name\" : \"name\",\r\n    \"created_at\" : 5,\r\n    \"id\" : \"id\",\r\n    \"object\" : \"organization.project.service_account\"\r\n  }, {\r\n    \"role\" : \"owner\",\r\n    \"name\" : \"name\",\r\n    \"created_at\" : 5,\r\n    \"id\" : \"id\",\r\n    \"object\" : \"organization.project.service_account\"\r\n  } ],\r\n  \"last_id\" : \"last_id\",\r\n  \"has_more\" : true,\r\n  \"object\" : \"list\"\r\n}";
            exampleJson = "{\r\n  \"error\" : {\r\n    \"code\" : \"code\",\r\n    \"param\" : \"param\",\r\n    \"message\" : \"message\",\r\n    \"type\" : \"type\"\r\n  }\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<ProjectServiceAccountListResponse>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List project users
        /// </summary>
        /// <remarks>Returns a list of users in the project.</remarks>
        /// <param name="projectId">The ID of the project.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. </param>
        /// <response code="200">Project users listed successfully.</response>
        /// <response code="400">Error response when project is archived.</response>
        [HttpGet]
        [Route("/v1/organization/projects/{project_id}/users")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ProjectUserListResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(ErrorResponse))]
        public virtual IActionResult ListProjectUsers([FromRoute (Name = "project_id")][Required]string projectId, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "after")]string? after)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"first_id\" : \"first_id\",\r\n  \"data\" : [ {\r\n    \"added_at\" : 1,\r\n    \"role\" : \"owner\",\r\n    \"name\" : \"name\",\r\n    \"id\" : \"id\",\r\n    \"email\" : \"email\",\r\n    \"object\" : \"organization.project.user\"\r\n  }, {\r\n    \"added_at\" : 1,\r\n    \"role\" : \"owner\",\r\n    \"name\" : \"name\",\r\n    \"id\" : \"id\",\r\n    \"email\" : \"email\",\r\n    \"object\" : \"organization.project.user\"\r\n  } ],\r\n  \"last_id\" : \"last_id\",\r\n  \"has_more\" : true,\r\n  \"object\" : \"object\"\r\n}";
            exampleJson = "{\r\n  \"error\" : {\r\n    \"code\" : \"code\",\r\n    \"param\" : \"param\",\r\n    \"message\" : \"message\",\r\n    \"type\" : \"type\"\r\n  }\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<ProjectUserListResponse>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List projects
        /// </summary>
        /// <remarks>Returns a list of projects.</remarks>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. </param>
        /// <param name="includeArchived">If &#x60;true&#x60; returns all projects including those that have been &#x60;archived&#x60;. Archived projects are not included by default.</param>
        /// <response code="200">Projects listed successfully.</response>
        [HttpGet]
        [Route("/v1/organization/projects")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ProjectListResponse))]
        public virtual IActionResult ListProjects([FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "after")]string? after, [FromQuery (Name = "include_archived")]bool? includeArchived)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"first_id\" : \"first_id\",\r\n  \"data\" : [ {\r\n    \"archived_at\" : 6,\r\n    \"name\" : \"name\",\r\n    \"created_at\" : 0,\r\n    \"id\" : \"id\",\r\n    \"object\" : \"organization.project\",\r\n    \"status\" : \"active\"\r\n  }, {\r\n    \"archived_at\" : 6,\r\n    \"name\" : \"name\",\r\n    \"created_at\" : 0,\r\n    \"id\" : \"id\",\r\n    \"object\" : \"organization.project\",\r\n    \"status\" : \"active\"\r\n  } ],\r\n  \"last_id\" : \"last_id\",\r\n  \"has_more\" : true,\r\n  \"object\" : \"list\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<ProjectListResponse>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Modify project
        /// </summary>
        /// <remarks>Modifies a project in the organization.</remarks>
        /// <param name="projectId">The ID of the project.</param>
        /// <param name="projectUpdateRequest">The project update request payload.</param>
        /// <response code="200">Project updated successfully.</response>
        /// <response code="400">Error response when updating the default project.</response>
        [HttpPost]
        [Route("/v1/organization/projects/{project_id}")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Project))]
        [ProducesResponseType(statusCode: 400, type: typeof(ErrorResponse))]
        public virtual IActionResult ModifyProject([FromRoute (Name = "project_id")][Required]string projectId, [FromBody]ProjectUpdateRequest projectUpdateRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"archived_at\" : 6,\r\n  \"name\" : \"name\",\r\n  \"created_at\" : 0,\r\n  \"id\" : \"id\",\r\n  \"object\" : \"organization.project\",\r\n  \"status\" : \"active\"\r\n}";
            exampleJson = "{\r\n  \"error\" : {\r\n    \"code\" : \"code\",\r\n    \"param\" : \"param\",\r\n    \"message\" : \"message\",\r\n    \"type\" : \"type\"\r\n  }\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<Project>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Modify project user
        /// </summary>
        /// <remarks>Modifies a user&#39;s role in the project.</remarks>
        /// <param name="projectId">The ID of the project.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="projectUserUpdateRequest">The project user update request payload.</param>
        /// <response code="200">Project user&#39;s role updated successfully.</response>
        /// <response code="400">Error response for various conditions.</response>
        [HttpPost]
        [Route("/v1/organization/projects/{project_id}/users/{user_id}")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ProjectUser))]
        [ProducesResponseType(statusCode: 400, type: typeof(ErrorResponse))]
        public virtual IActionResult ModifyProjectUser([FromRoute (Name = "project_id")][Required]string projectId, [FromRoute (Name = "user_id")][Required]string userId, [FromBody]ProjectUserUpdateRequest projectUserUpdateRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"added_at\" : 1,\r\n  \"role\" : \"owner\",\r\n  \"name\" : \"name\",\r\n  \"id\" : \"id\",\r\n  \"email\" : \"email\",\r\n  \"object\" : \"organization.project.user\"\r\n}";
            exampleJson = "{\r\n  \"error\" : {\r\n    \"code\" : \"code\",\r\n    \"param\" : \"param\",\r\n    \"message\" : \"message\",\r\n    \"type\" : \"type\"\r\n  }\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<ProjectUser>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieve project
        /// </summary>
        /// <remarks>Retrieves a project.</remarks>
        /// <param name="projectId">The ID of the project.</param>
        /// <response code="200">Project retrieved successfully.</response>
        [HttpGet]
        [Route("/v1/organization/projects/{project_id}")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Project))]
        public virtual IActionResult RetrieveProject([FromRoute (Name = "project_id")][Required]string projectId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"archived_at\" : 6,\r\n  \"name\" : \"name\",\r\n  \"created_at\" : 0,\r\n  \"id\" : \"id\",\r\n  \"object\" : \"organization.project\",\r\n  \"status\" : \"active\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<Project>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieve project API key
        /// </summary>
        /// <remarks>Retrieves an API key in the project.</remarks>
        /// <param name="projectId">The ID of the project.</param>
        /// <param name="keyId">The ID of the API key.</param>
        /// <response code="200">Project API key retrieved successfully.</response>
        [HttpGet]
        [Route("/v1/organization/projects/{project_id}/api_keys/{key_id}")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ProjectApiKey))]
        public virtual IActionResult RetrieveProjectApiKey([FromRoute (Name = "project_id")][Required]string projectId, [FromRoute (Name = "key_id")][Required]string keyId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"owner\" : {\r\n    \"service_account\" : {\r\n      \"role\" : \"owner\",\r\n      \"name\" : \"name\",\r\n      \"created_at\" : 5,\r\n      \"id\" : \"id\",\r\n      \"object\" : \"organization.project.service_account\"\r\n    },\r\n    \"type\" : \"user\",\r\n    \"user\" : {\r\n      \"added_at\" : 1,\r\n      \"role\" : \"owner\",\r\n      \"name\" : \"name\",\r\n      \"id\" : \"id\",\r\n      \"email\" : \"email\",\r\n      \"object\" : \"organization.project.user\"\r\n    }\r\n  },\r\n  \"last_used_at\" : 6,\r\n  \"name\" : \"name\",\r\n  \"created_at\" : 0,\r\n  \"redacted_value\" : \"redacted_value\",\r\n  \"id\" : \"id\",\r\n  \"object\" : \"organization.project.api_key\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<ProjectApiKey>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieve project service account
        /// </summary>
        /// <remarks>Retrieves a service account in the project.</remarks>
        /// <param name="projectId">The ID of the project.</param>
        /// <param name="serviceAccountId">The ID of the service account.</param>
        /// <response code="200">Project service account retrieved successfully.</response>
        [HttpGet]
        [Route("/v1/organization/projects/{project_id}/service_accounts/{service_account_id}")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ProjectServiceAccount))]
        public virtual IActionResult RetrieveProjectServiceAccount([FromRoute (Name = "project_id")][Required]string projectId, [FromRoute (Name = "service_account_id")][Required]string serviceAccountId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"role\" : \"owner\",\r\n  \"name\" : \"name\",\r\n  \"created_at\" : 5,\r\n  \"id\" : \"id\",\r\n  \"object\" : \"organization.project.service_account\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<ProjectServiceAccount>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieve project user
        /// </summary>
        /// <remarks>Retrieves a user in the project.</remarks>
        /// <param name="projectId">The ID of the project.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <response code="200">Project user retrieved successfully.</response>
        [HttpGet]
        [Route("/v1/organization/projects/{project_id}/users/{user_id}")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ProjectUser))]
        public virtual IActionResult RetrieveProjectUser([FromRoute (Name = "project_id")][Required]string projectId, [FromRoute (Name = "user_id")][Required]string userId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"added_at\" : 1,\r\n  \"role\" : \"owner\",\r\n  \"name\" : \"name\",\r\n  \"id\" : \"id\",\r\n  \"email\" : \"email\",\r\n  \"object\" : \"organization.project.user\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<ProjectUser>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Modify project rate limit
        /// </summary>
        /// <remarks>Updates a project rate limit.</remarks>
        /// <param name="projectId">The ID of the project.</param>
        /// <param name="rateLimitId">The ID of the rate limit.</param>
        /// <param name="projectRateLimitUpdateRequest">The project rate limit update request payload.</param>
        /// <response code="200">Project rate limit updated successfully.</response>
        /// <response code="400">Error response for various conditions.</response>
        [HttpPost]
        [Route("/v1/organization/projects/{project_id}/rate_limits/{rate_limit_id}")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ProjectRateLimit))]
        [ProducesResponseType(statusCode: 400, type: typeof(ErrorResponse))]
        public virtual IActionResult UpdateProjectRateLimits([FromRoute (Name = "project_id")][Required]string projectId, [FromRoute (Name = "rate_limit_id")][Required]string rateLimitId, [FromBody]ProjectRateLimitUpdateRequest projectRateLimitUpdateRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"batch_1_day_max_input_tokens\" : 2,\r\n  \"max_tokens_per_1_minute\" : 6,\r\n  \"model\" : \"model\",\r\n  \"id\" : \"id\",\r\n  \"max_images_per_1_minute\" : 1,\r\n  \"max_audio_megabytes_per_1_minute\" : 5,\r\n  \"max_requests_per_1_minute\" : 0,\r\n  \"object\" : \"project.rate_limit\",\r\n  \"max_requests_per_1_day\" : 5\r\n}";
            exampleJson = "{\r\n  \"error\" : {\r\n    \"code\" : \"code\",\r\n    \"param\" : \"param\",\r\n    \"message\" : \"message\",\r\n    \"type\" : \"type\"\r\n  }\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<ProjectRateLimit>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
