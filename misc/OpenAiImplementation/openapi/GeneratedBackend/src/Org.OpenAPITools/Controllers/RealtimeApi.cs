/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using System.Text.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class RealtimeApiController : ControllerBase
    { 
        /// <summary>
        /// Create session
        /// </summary>
        /// <remarks>Create an ephemeral API token for use in client-side applications with the Realtime API. Can be configured with the same session parameters as the &#x60;session.update&#x60; client event.  It responds with a session object, plus a &#x60;client_secret&#x60; key which contains a usable ephemeral API token that can be used to authenticate browser clients for the Realtime API. </remarks>
        /// <param name="realtimeSessionCreateRequest">Create an ephemeral API key with the given session configuration.</param>
        /// <response code="200">Session created successfully.</response>
        [HttpPost]
        [Route("/v1/realtime/sessions")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(RealtimeSessionCreateResponse))]
        public virtual IActionResult CreateRealtimeSession([FromBody]RealtimeSessionCreateRequest realtimeSessionCreateRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"voice\" : \"ash\",\r\n  \"instructions\" : \"instructions\",\r\n  \"input_audio_format\" : \"input_audio_format\",\r\n  \"tracing\" : \"auto\",\r\n  \"input_audio_transcription\" : {\r\n    \"model\" : \"model\"\r\n  },\r\n  \"turn_detection\" : {\r\n    \"silence_duration_ms\" : 5,\r\n    \"prefix_padding_ms\" : 5,\r\n    \"threshold\" : 1.4658129805029452,\r\n    \"type\" : \"type\"\r\n  },\r\n  \"tools\" : [ {\r\n    \"name\" : \"name\",\r\n    \"description\" : \"description\",\r\n    \"type\" : \"function\",\r\n    \"parameters\" : \"{}\"\r\n  }, {\r\n    \"name\" : \"name\",\r\n    \"description\" : \"description\",\r\n    \"type\" : \"function\",\r\n    \"parameters\" : \"{}\"\r\n  } ],\r\n  \"speed\" : 1.0034320228838003,\r\n  \"modalities\" : \"\",\r\n  \"max_response_output_tokens\" : 7,\r\n  \"output_audio_format\" : \"output_audio_format\",\r\n  \"temperature\" : 2.3021358869347655,\r\n  \"tool_choice\" : \"tool_choice\",\r\n  \"client_secret\" : {\r\n    \"expires_at\" : 0,\r\n    \"value\" : \"value\"\r\n  }\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<RealtimeSessionCreateResponse>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create transcription session
        /// </summary>
        /// <remarks>Create an ephemeral API token for use in client-side applications with the Realtime API specifically for realtime transcriptions.  Can be configured with the same session parameters as the &#x60;transcription_session.update&#x60; client event.  It responds with a session object, plus a &#x60;client_secret&#x60; key which contains a usable ephemeral API token that can be used to authenticate browser clients for the Realtime API. </remarks>
        /// <param name="realtimeTranscriptionSessionCreateRequest">Create an ephemeral API key with the given session configuration.</param>
        /// <response code="200">Session created successfully.</response>
        [HttpPost]
        [Route("/v1/realtime/transcription_sessions")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(RealtimeTranscriptionSessionCreateResponse))]
        public virtual IActionResult CreateRealtimeTranscriptionSession([FromBody]RealtimeTranscriptionSessionCreateRequest realtimeTranscriptionSessionCreateRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"input_audio_format\" : \"input_audio_format\",\r\n  \"modalities\" : \"\",\r\n  \"input_audio_transcription\" : {\r\n    \"model\" : \"gpt-4o-transcribe\",\r\n    \"language\" : \"language\",\r\n    \"prompt\" : \"prompt\"\r\n  },\r\n  \"turn_detection\" : {\r\n    \"silence_duration_ms\" : 5,\r\n    \"prefix_padding_ms\" : 5,\r\n    \"threshold\" : 1.4658129805029452,\r\n    \"type\" : \"type\"\r\n  },\r\n  \"client_secret\" : {\r\n    \"expires_at\" : 0,\r\n    \"value\" : \"value\"\r\n  }\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<RealtimeTranscriptionSessionCreateResponse>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
