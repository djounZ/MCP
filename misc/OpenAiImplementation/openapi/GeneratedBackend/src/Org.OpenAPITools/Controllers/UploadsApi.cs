/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using System.Text.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class UploadsApiController : ControllerBase
    { 
        /// <summary>
        /// Add upload part
        /// </summary>
        /// <remarks>Adds a [Part](https://platform.openai.com/docs/api-reference/uploads/part-object) to an [Upload](https://platform.openai.com/docs/api-reference/uploads/object) object. A Part represents a chunk of bytes from the file you are trying to upload.   Each Part can be at most 64 MB, and you can add Parts until you hit the Upload maximum of 8 GB.  It is possible to add multiple Parts in parallel. You can decide the intended order of the Parts when you [complete the Upload](https://platform.openai.com/docs/api-reference/uploads/complete). </remarks>
        /// <param name="uploadId">The ID of the Upload. </param>
        /// <param name="data">The chunk of bytes for this Part. </param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/uploads/{upload_id}/parts")]
        [Authorize]
        [Consumes("multipart/form-data")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(UploadPart))]
        public virtual IActionResult AddUploadPart([FromRoute (Name = "upload_id")][Required]string uploadId, [Required()]IFormFile data)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"upload_id\" : \"upload_id\",\r\n  \"created_at\" : 0,\r\n  \"id\" : \"id\",\r\n  \"object\" : \"upload.part\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<UploadPart>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Cancel upload
        /// </summary>
        /// <remarks>Cancels the Upload. No Parts may be added after an Upload is cancelled. </remarks>
        /// <param name="uploadId">The ID of the Upload. </param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/uploads/{upload_id}/cancel")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Upload))]
        public virtual IActionResult CancelUpload([FromRoute (Name = "upload_id")][Required]string uploadId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"filename\" : \"filename\",\r\n  \"expires_at\" : 1,\r\n  \"file\" : \"\",\r\n  \"purpose\" : \"purpose\",\r\n  \"bytes\" : 6,\r\n  \"created_at\" : 0,\r\n  \"id\" : \"id\",\r\n  \"status\" : \"pending\",\r\n  \"object\" : \"upload\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<Upload>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Complete upload
        /// </summary>
        /// <remarks>Completes the [Upload](https://platform.openai.com/docs/api-reference/uploads/object).   Within the returned Upload object, there is a nested [File](https://platform.openai.com/docs/api-reference/files/object) object that is ready to use in the rest of the platform.  You can specify the order of the Parts by passing in an ordered list of the Part IDs.  The number of bytes uploaded upon completion must match the number of bytes initially specified when creating the Upload object. No Parts may be added after an Upload is completed. </remarks>
        /// <param name="uploadId">The ID of the Upload. </param>
        /// <param name="completeUploadRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/uploads/{upload_id}/complete")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Upload))]
        public virtual IActionResult CompleteUpload([FromRoute (Name = "upload_id")][Required]string uploadId, [FromBody]CompleteUploadRequest completeUploadRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"filename\" : \"filename\",\r\n  \"expires_at\" : 1,\r\n  \"file\" : \"\",\r\n  \"purpose\" : \"purpose\",\r\n  \"bytes\" : 6,\r\n  \"created_at\" : 0,\r\n  \"id\" : \"id\",\r\n  \"status\" : \"pending\",\r\n  \"object\" : \"upload\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<Upload>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create upload
        /// </summary>
        /// <remarks>Creates an intermediate [Upload](https://platform.openai.com/docs/api-reference/uploads/object) object that you can add [Parts](https://platform.openai.com/docs/api-reference/uploads/part-object) to. Currently, an Upload can accept at most 8 GB in total and expires after an hour after you create it.  Once you complete the Upload, we will create a [File](https://platform.openai.com/docs/api-reference/files/object) object that contains all the parts you uploaded. This File is usable in the rest of our platform as a regular File object.  For certain &#x60;purpose&#x60; values, the correct &#x60;mime_type&#x60; must be specified.  Please refer to documentation for the  [supported MIME types for your use case](https://platform.openai.com/docs/assistants/tools/file-search#supported-files).  For guidance on the proper filename extensions for each purpose, please follow the documentation on [creating a File](https://platform.openai.com/docs/api-reference/files/create). </remarks>
        /// <param name="createUploadRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/uploads")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Upload))]
        public virtual IActionResult CreateUpload([FromBody]CreateUploadRequest createUploadRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"filename\" : \"filename\",\r\n  \"expires_at\" : 1,\r\n  \"file\" : \"\",\r\n  \"purpose\" : \"purpose\",\r\n  \"bytes\" : 6,\r\n  \"created_at\" : 0,\r\n  \"id\" : \"id\",\r\n  \"status\" : \"pending\",\r\n  \"object\" : \"upload\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<Upload>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
