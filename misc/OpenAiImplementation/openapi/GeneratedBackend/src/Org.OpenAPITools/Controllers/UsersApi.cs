/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using System.Text.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class UsersApiController : ControllerBase
    { 
        /// <summary>
        /// Delete user
        /// </summary>
        /// <remarks>Deletes a user from the organization.</remarks>
        /// <param name="userId">The ID of the user.</param>
        /// <response code="200">User deleted successfully.</response>
        [HttpDelete]
        [Route("/v1/organization/users/{user_id}")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(UserDeleteResponse))]
        public virtual IActionResult DeleteUser([FromRoute (Name = "user_id")][Required]string userId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"deleted\" : true,\r\n  \"id\" : \"id\",\r\n  \"object\" : \"organization.user.deleted\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<UserDeleteResponse>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List users
        /// </summary>
        /// <remarks>Lists all of the users in the organization.</remarks>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. </param>
        /// <param name="emails">Filter by the email address of users.</param>
        /// <response code="200">Users listed successfully.</response>
        [HttpGet]
        [Route("/v1/organization/users")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(UserListResponse))]
        public virtual IActionResult ListUsers([FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "after")]string? after, [FromQuery (Name = "emails")]List<string>? emails)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"first_id\" : \"first_id\",\r\n  \"data\" : [ {\r\n    \"added_at\" : 0,\r\n    \"role\" : \"owner\",\r\n    \"name\" : \"name\",\r\n    \"id\" : \"id\",\r\n    \"email\" : \"email\",\r\n    \"object\" : \"organization.user\"\r\n  }, {\r\n    \"added_at\" : 0,\r\n    \"role\" : \"owner\",\r\n    \"name\" : \"name\",\r\n    \"id\" : \"id\",\r\n    \"email\" : \"email\",\r\n    \"object\" : \"organization.user\"\r\n  } ],\r\n  \"last_id\" : \"last_id\",\r\n  \"has_more\" : true,\r\n  \"object\" : \"list\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<UserListResponse>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Modify user
        /// </summary>
        /// <remarks>Modifies a user&#39;s role in the organization.</remarks>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="userRoleUpdateRequest">The new user role to modify. This must be one of &#x60;owner&#x60; or &#x60;member&#x60;.</param>
        /// <response code="200">User role updated successfully.</response>
        [HttpPost]
        [Route("/v1/organization/users/{user_id}")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(User))]
        public virtual IActionResult ModifyUser([FromRoute (Name = "user_id")][Required]string userId, [FromBody]UserRoleUpdateRequest userRoleUpdateRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"added_at\" : 0,\r\n  \"role\" : \"owner\",\r\n  \"name\" : \"name\",\r\n  \"id\" : \"id\",\r\n  \"email\" : \"email\",\r\n  \"object\" : \"organization.user\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<User>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieve user
        /// </summary>
        /// <remarks>Retrieves a user by their identifier.</remarks>
        /// <param name="userId">The ID of the user.</param>
        /// <response code="200">User retrieved successfully.</response>
        [HttpGet]
        [Route("/v1/organization/users/{user_id}")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(User))]
        public virtual IActionResult RetrieveUser([FromRoute (Name = "user_id")][Required]string userId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"added_at\" : 0,\r\n  \"role\" : \"owner\",\r\n  \"name\" : \"name\",\r\n  \"id\" : \"id\",\r\n  \"email\" : \"email\",\r\n  \"object\" : \"organization.user\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<User>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
