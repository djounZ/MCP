/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using System.Text.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class VectorStoresApiController : ControllerBase
    { 
        /// <summary>
        /// Cancel vector store file batch
        /// </summary>
        /// <remarks>Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.</remarks>
        /// <param name="vectorStoreId">The ID of the vector store that the file batch belongs to.</param>
        /// <param name="batchId">The ID of the file batch to cancel.</param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/vector_stores/{vector_store_id}/file_batches/{batch_id}/cancel")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(VectorStoreFileBatchObject))]
        public virtual IActionResult CancelVectorStoreFileBatch([FromRoute (Name = "vector_store_id")][Required]string vectorStoreId, [FromRoute (Name = "batch_id")][Required]string batchId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"file_counts\" : {\r\n    \"in_progress\" : 6,\r\n    \"total\" : 2,\r\n    \"cancelled\" : 5,\r\n    \"completed\" : 1,\r\n    \"failed\" : 5\r\n  },\r\n  \"created_at\" : 0,\r\n  \"id\" : \"id\",\r\n  \"object\" : \"vector_store.files_batch\",\r\n  \"vector_store_id\" : \"vector_store_id\",\r\n  \"status\" : \"in_progress\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<VectorStoreFileBatchObject>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create vector store
        /// </summary>
        /// <remarks>Create a vector store.</remarks>
        /// <param name="createVectorStoreRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/vector_stores")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(VectorStoreObject))]
        public virtual IActionResult CreateVectorStore([FromBody]CreateVectorStoreRequest createVectorStoreRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"file_counts\" : {\r\n    \"in_progress\" : 1,\r\n    \"total\" : 7,\r\n    \"cancelled\" : 2,\r\n    \"completed\" : 5,\r\n    \"failed\" : 5\r\n  },\r\n  \"metadata\" : {\r\n    \"key\" : \"metadata\"\r\n  },\r\n  \"expires_at\" : 3,\r\n  \"expires_after\" : {\r\n    \"anchor\" : \"last_active_at\",\r\n    \"days\" : 339\r\n  },\r\n  \"last_active_at\" : 2,\r\n  \"usage_bytes\" : 6,\r\n  \"name\" : \"name\",\r\n  \"created_at\" : 0,\r\n  \"id\" : \"id\",\r\n  \"object\" : \"vector_store\",\r\n  \"status\" : \"expired\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<VectorStoreObject>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create vector store file
        /// </summary>
        /// <remarks>Create a vector store file by attaching a [File](https://platform.openai.com/docs/api-reference/files) to a [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object).</remarks>
        /// <param name="vectorStoreId">The ID of the vector store for which to create a File. </param>
        /// <param name="createVectorStoreFileRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/vector_stores/{vector_store_id}/files")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(VectorStoreFileObject))]
        public virtual IActionResult CreateVectorStoreFile([FromRoute (Name = "vector_store_id")][Required]string vectorStoreId, [FromBody]CreateVectorStoreFileRequest createVectorStoreFileRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"chunking_strategy\" : {\r\n    \"static\" : {\r\n      \"max_chunk_size_tokens\" : 685,\r\n      \"chunk_overlap_tokens\" : 5\r\n    },\r\n    \"type\" : \"static\"\r\n  },\r\n  \"usage_bytes\" : 0,\r\n  \"created_at\" : 6,\r\n  \"attributes\" : {\r\n    \"key\" : \"VectorStoreFileAttributes_value\"\r\n  },\r\n  \"id\" : \"id\",\r\n  \"last_error\" : {\r\n    \"code\" : \"server_error\",\r\n    \"message\" : \"message\"\r\n  },\r\n  \"object\" : \"vector_store.file\",\r\n  \"vector_store_id\" : \"vector_store_id\",\r\n  \"status\" : \"in_progress\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<VectorStoreFileObject>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create vector store file batch
        /// </summary>
        /// <remarks>Create a vector store file batch.</remarks>
        /// <param name="vectorStoreId">The ID of the vector store for which to create a File Batch. </param>
        /// <param name="createVectorStoreFileBatchRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/vector_stores/{vector_store_id}/file_batches")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(VectorStoreFileBatchObject))]
        public virtual IActionResult CreateVectorStoreFileBatch([FromRoute (Name = "vector_store_id")][Required]string vectorStoreId, [FromBody]CreateVectorStoreFileBatchRequest createVectorStoreFileBatchRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"file_counts\" : {\r\n    \"in_progress\" : 6,\r\n    \"total\" : 2,\r\n    \"cancelled\" : 5,\r\n    \"completed\" : 1,\r\n    \"failed\" : 5\r\n  },\r\n  \"created_at\" : 0,\r\n  \"id\" : \"id\",\r\n  \"object\" : \"vector_store.files_batch\",\r\n  \"vector_store_id\" : \"vector_store_id\",\r\n  \"status\" : \"in_progress\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<VectorStoreFileBatchObject>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete vector store
        /// </summary>
        /// <remarks>Delete a vector store.</remarks>
        /// <param name="vectorStoreId">The ID of the vector store to delete.</param>
        /// <response code="200">OK</response>
        [HttpDelete]
        [Route("/v1/vector_stores/{vector_store_id}")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(DeleteVectorStoreResponse))]
        public virtual IActionResult DeleteVectorStore([FromRoute (Name = "vector_store_id")][Required]string vectorStoreId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"deleted\" : true,\r\n  \"id\" : \"id\",\r\n  \"object\" : \"vector_store.deleted\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<DeleteVectorStoreResponse>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete vector store file
        /// </summary>
        /// <remarks>Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the [delete file](https://platform.openai.com/docs/api-reference/files/delete) endpoint.</remarks>
        /// <param name="vectorStoreId">The ID of the vector store that the file belongs to.</param>
        /// <param name="fileId">The ID of the file to delete.</param>
        /// <response code="200">OK</response>
        [HttpDelete]
        [Route("/v1/vector_stores/{vector_store_id}/files/{file_id}")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(DeleteVectorStoreFileResponse))]
        public virtual IActionResult DeleteVectorStoreFile([FromRoute (Name = "vector_store_id")][Required]string vectorStoreId, [FromRoute (Name = "file_id")][Required]string fileId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"deleted\" : true,\r\n  \"id\" : \"id\",\r\n  \"object\" : \"vector_store.file.deleted\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<DeleteVectorStoreFileResponse>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieve vector store
        /// </summary>
        /// <remarks>Retrieves a vector store.</remarks>
        /// <param name="vectorStoreId">The ID of the vector store to retrieve.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/vector_stores/{vector_store_id}")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(VectorStoreObject))]
        public virtual IActionResult GetVectorStore([FromRoute (Name = "vector_store_id")][Required]string vectorStoreId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"file_counts\" : {\r\n    \"in_progress\" : 1,\r\n    \"total\" : 7,\r\n    \"cancelled\" : 2,\r\n    \"completed\" : 5,\r\n    \"failed\" : 5\r\n  },\r\n  \"metadata\" : {\r\n    \"key\" : \"metadata\"\r\n  },\r\n  \"expires_at\" : 3,\r\n  \"expires_after\" : {\r\n    \"anchor\" : \"last_active_at\",\r\n    \"days\" : 339\r\n  },\r\n  \"last_active_at\" : 2,\r\n  \"usage_bytes\" : 6,\r\n  \"name\" : \"name\",\r\n  \"created_at\" : 0,\r\n  \"id\" : \"id\",\r\n  \"object\" : \"vector_store\",\r\n  \"status\" : \"expired\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<VectorStoreObject>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieve vector store file
        /// </summary>
        /// <remarks>Retrieves a vector store file.</remarks>
        /// <param name="vectorStoreId">The ID of the vector store that the file belongs to.</param>
        /// <param name="fileId">The ID of the file being retrieved.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/vector_stores/{vector_store_id}/files/{file_id}")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(VectorStoreFileObject))]
        public virtual IActionResult GetVectorStoreFile([FromRoute (Name = "vector_store_id")][Required]string vectorStoreId, [FromRoute (Name = "file_id")][Required]string fileId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"chunking_strategy\" : {\r\n    \"static\" : {\r\n      \"max_chunk_size_tokens\" : 685,\r\n      \"chunk_overlap_tokens\" : 5\r\n    },\r\n    \"type\" : \"static\"\r\n  },\r\n  \"usage_bytes\" : 0,\r\n  \"created_at\" : 6,\r\n  \"attributes\" : {\r\n    \"key\" : \"VectorStoreFileAttributes_value\"\r\n  },\r\n  \"id\" : \"id\",\r\n  \"last_error\" : {\r\n    \"code\" : \"server_error\",\r\n    \"message\" : \"message\"\r\n  },\r\n  \"object\" : \"vector_store.file\",\r\n  \"vector_store_id\" : \"vector_store_id\",\r\n  \"status\" : \"in_progress\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<VectorStoreFileObject>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieve vector store file batch
        /// </summary>
        /// <remarks>Retrieves a vector store file batch.</remarks>
        /// <param name="vectorStoreId">The ID of the vector store that the file batch belongs to.</param>
        /// <param name="batchId">The ID of the file batch being retrieved.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/vector_stores/{vector_store_id}/file_batches/{batch_id}")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(VectorStoreFileBatchObject))]
        public virtual IActionResult GetVectorStoreFileBatch([FromRoute (Name = "vector_store_id")][Required]string vectorStoreId, [FromRoute (Name = "batch_id")][Required]string batchId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"file_counts\" : {\r\n    \"in_progress\" : 6,\r\n    \"total\" : 2,\r\n    \"cancelled\" : 5,\r\n    \"completed\" : 1,\r\n    \"failed\" : 5\r\n  },\r\n  \"created_at\" : 0,\r\n  \"id\" : \"id\",\r\n  \"object\" : \"vector_store.files_batch\",\r\n  \"vector_store_id\" : \"vector_store_id\",\r\n  \"status\" : \"in_progress\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<VectorStoreFileBatchObject>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List vector store files in a batch
        /// </summary>
        /// <remarks>Returns a list of vector store files in a batch.</remarks>
        /// <param name="vectorStoreId">The ID of the vector store that the files belong to.</param>
        /// <param name="batchId">The ID of the file batch that the files belong to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. </param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. </param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. </param>
        /// <param name="filter">Filter by file status. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;cancelled&#x60;.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/vector_stores/{vector_store_id}/file_batches/{batch_id}/files")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ListVectorStoreFilesResponse))]
        public virtual IActionResult ListFilesInVectorStoreBatch([FromRoute (Name = "vector_store_id")][Required]string vectorStoreId, [FromRoute (Name = "batch_id")][Required]string batchId, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "order")]string? order, [FromQuery (Name = "after")]string? after, [FromQuery (Name = "before")]string? before, [FromQuery (Name = "filter")]string? filter)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"first_id\" : \"file-abc123\",\r\n  \"data\" : [ {\r\n    \"chunking_strategy\" : {\r\n      \"static\" : {\r\n        \"max_chunk_size_tokens\" : 685,\r\n        \"chunk_overlap_tokens\" : 5\r\n      },\r\n      \"type\" : \"static\"\r\n    },\r\n    \"usage_bytes\" : 0,\r\n    \"created_at\" : 6,\r\n    \"attributes\" : {\r\n      \"key\" : \"VectorStoreFileAttributes_value\"\r\n    },\r\n    \"id\" : \"id\",\r\n    \"last_error\" : {\r\n      \"code\" : \"server_error\",\r\n      \"message\" : \"message\"\r\n    },\r\n    \"object\" : \"vector_store.file\",\r\n    \"vector_store_id\" : \"vector_store_id\",\r\n    \"status\" : \"in_progress\"\r\n  }, {\r\n    \"chunking_strategy\" : {\r\n      \"static\" : {\r\n        \"max_chunk_size_tokens\" : 685,\r\n        \"chunk_overlap_tokens\" : 5\r\n      },\r\n      \"type\" : \"static\"\r\n    },\r\n    \"usage_bytes\" : 0,\r\n    \"created_at\" : 6,\r\n    \"attributes\" : {\r\n      \"key\" : \"VectorStoreFileAttributes_value\"\r\n    },\r\n    \"id\" : \"id\",\r\n    \"last_error\" : {\r\n      \"code\" : \"server_error\",\r\n      \"message\" : \"message\"\r\n    },\r\n    \"object\" : \"vector_store.file\",\r\n    \"vector_store_id\" : \"vector_store_id\",\r\n    \"status\" : \"in_progress\"\r\n  } ],\r\n  \"last_id\" : \"file-abc456\",\r\n  \"has_more\" : false,\r\n  \"object\" : \"list\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<ListVectorStoreFilesResponse>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List vector store files
        /// </summary>
        /// <remarks>Returns a list of vector store files.</remarks>
        /// <param name="vectorStoreId">The ID of the vector store that the files belong to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. </param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. </param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. </param>
        /// <param name="filter">Filter by file status. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;cancelled&#x60;.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/vector_stores/{vector_store_id}/files")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ListVectorStoreFilesResponse))]
        public virtual IActionResult ListVectorStoreFiles([FromRoute (Name = "vector_store_id")][Required]string vectorStoreId, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "order")]string? order, [FromQuery (Name = "after")]string? after, [FromQuery (Name = "before")]string? before, [FromQuery (Name = "filter")]string? filter)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"first_id\" : \"file-abc123\",\r\n  \"data\" : [ {\r\n    \"chunking_strategy\" : {\r\n      \"static\" : {\r\n        \"max_chunk_size_tokens\" : 685,\r\n        \"chunk_overlap_tokens\" : 5\r\n      },\r\n      \"type\" : \"static\"\r\n    },\r\n    \"usage_bytes\" : 0,\r\n    \"created_at\" : 6,\r\n    \"attributes\" : {\r\n      \"key\" : \"VectorStoreFileAttributes_value\"\r\n    },\r\n    \"id\" : \"id\",\r\n    \"last_error\" : {\r\n      \"code\" : \"server_error\",\r\n      \"message\" : \"message\"\r\n    },\r\n    \"object\" : \"vector_store.file\",\r\n    \"vector_store_id\" : \"vector_store_id\",\r\n    \"status\" : \"in_progress\"\r\n  }, {\r\n    \"chunking_strategy\" : {\r\n      \"static\" : {\r\n        \"max_chunk_size_tokens\" : 685,\r\n        \"chunk_overlap_tokens\" : 5\r\n      },\r\n      \"type\" : \"static\"\r\n    },\r\n    \"usage_bytes\" : 0,\r\n    \"created_at\" : 6,\r\n    \"attributes\" : {\r\n      \"key\" : \"VectorStoreFileAttributes_value\"\r\n    },\r\n    \"id\" : \"id\",\r\n    \"last_error\" : {\r\n      \"code\" : \"server_error\",\r\n      \"message\" : \"message\"\r\n    },\r\n    \"object\" : \"vector_store.file\",\r\n    \"vector_store_id\" : \"vector_store_id\",\r\n    \"status\" : \"in_progress\"\r\n  } ],\r\n  \"last_id\" : \"file-abc456\",\r\n  \"has_more\" : false,\r\n  \"object\" : \"list\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<ListVectorStoreFilesResponse>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List vector stores
        /// </summary>
        /// <remarks>Returns a list of vector stores.</remarks>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. </param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. </param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. </param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/vector_stores")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ListVectorStoresResponse))]
        public virtual IActionResult ListVectorStores([FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "order")]string? order, [FromQuery (Name = "after")]string? after, [FromQuery (Name = "before")]string? before)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"first_id\" : \"vs_abc123\",\r\n  \"data\" : [ {\r\n    \"file_counts\" : {\r\n      \"in_progress\" : 1,\r\n      \"total\" : 7,\r\n      \"cancelled\" : 2,\r\n      \"completed\" : 5,\r\n      \"failed\" : 5\r\n    },\r\n    \"metadata\" : {\r\n      \"key\" : \"metadata\"\r\n    },\r\n    \"expires_at\" : 3,\r\n    \"expires_after\" : {\r\n      \"anchor\" : \"last_active_at\",\r\n      \"days\" : 339\r\n    },\r\n    \"last_active_at\" : 2,\r\n    \"usage_bytes\" : 6,\r\n    \"name\" : \"name\",\r\n    \"created_at\" : 0,\r\n    \"id\" : \"id\",\r\n    \"object\" : \"vector_store\",\r\n    \"status\" : \"expired\"\r\n  }, {\r\n    \"file_counts\" : {\r\n      \"in_progress\" : 1,\r\n      \"total\" : 7,\r\n      \"cancelled\" : 2,\r\n      \"completed\" : 5,\r\n      \"failed\" : 5\r\n    },\r\n    \"metadata\" : {\r\n      \"key\" : \"metadata\"\r\n    },\r\n    \"expires_at\" : 3,\r\n    \"expires_after\" : {\r\n      \"anchor\" : \"last_active_at\",\r\n      \"days\" : 339\r\n    },\r\n    \"last_active_at\" : 2,\r\n    \"usage_bytes\" : 6,\r\n    \"name\" : \"name\",\r\n    \"created_at\" : 0,\r\n    \"id\" : \"id\",\r\n    \"object\" : \"vector_store\",\r\n    \"status\" : \"expired\"\r\n  } ],\r\n  \"last_id\" : \"vs_abc456\",\r\n  \"has_more\" : false,\r\n  \"object\" : \"list\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<ListVectorStoresResponse>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Modify vector store
        /// </summary>
        /// <remarks>Modifies a vector store.</remarks>
        /// <param name="vectorStoreId">The ID of the vector store to modify.</param>
        /// <param name="updateVectorStoreRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/vector_stores/{vector_store_id}")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(VectorStoreObject))]
        public virtual IActionResult ModifyVectorStore([FromRoute (Name = "vector_store_id")][Required]string vectorStoreId, [FromBody]UpdateVectorStoreRequest updateVectorStoreRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"file_counts\" : {\r\n    \"in_progress\" : 1,\r\n    \"total\" : 7,\r\n    \"cancelled\" : 2,\r\n    \"completed\" : 5,\r\n    \"failed\" : 5\r\n  },\r\n  \"metadata\" : {\r\n    \"key\" : \"metadata\"\r\n  },\r\n  \"expires_at\" : 3,\r\n  \"expires_after\" : {\r\n    \"anchor\" : \"last_active_at\",\r\n    \"days\" : 339\r\n  },\r\n  \"last_active_at\" : 2,\r\n  \"usage_bytes\" : 6,\r\n  \"name\" : \"name\",\r\n  \"created_at\" : 0,\r\n  \"id\" : \"id\",\r\n  \"object\" : \"vector_store\",\r\n  \"status\" : \"expired\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<VectorStoreObject>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieve vector store file content
        /// </summary>
        /// <remarks>Retrieve the parsed contents of a vector store file.</remarks>
        /// <param name="vectorStoreId">The ID of the vector store.</param>
        /// <param name="fileId">The ID of the file within the vector store.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/vector_stores/{vector_store_id}/files/{file_id}/content")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(VectorStoreFileContentResponse))]
        public virtual IActionResult RetrieveVectorStoreFileContent([FromRoute (Name = "vector_store_id")][Required]string vectorStoreId, [FromRoute (Name = "file_id")][Required]string fileId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"next_page\" : \"next_page\",\r\n  \"data\" : [ {\r\n    \"text\" : \"text\",\r\n    \"type\" : \"type\"\r\n  }, {\r\n    \"text\" : \"text\",\r\n    \"type\" : \"type\"\r\n  } ],\r\n  \"has_more\" : true,\r\n  \"object\" : \"vector_store.file_content.page\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<VectorStoreFileContentResponse>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Search vector store
        /// </summary>
        /// <remarks>Search a vector store for relevant chunks based on a query and file attributes filter.</remarks>
        /// <param name="vectorStoreId">The ID of the vector store to search.</param>
        /// <param name="vectorStoreSearchRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/vector_stores/{vector_store_id}/search")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(VectorStoreSearchResultsPage))]
        public virtual IActionResult SearchVectorStore([FromRoute (Name = "vector_store_id")][Required]string vectorStoreId, [FromBody]VectorStoreSearchRequest vectorStoreSearchRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"next_page\" : \"next_page\",\r\n  \"data\" : [ {\r\n    \"score\" : 0.08008281904610115,\r\n    \"filename\" : \"filename\",\r\n    \"file_id\" : \"file_id\",\r\n    \"attributes\" : {\r\n      \"key\" : \"VectorStoreFileAttributes_value\"\r\n    },\r\n    \"content\" : [ {\r\n      \"text\" : \"text\",\r\n      \"type\" : \"text\"\r\n    }, {\r\n      \"text\" : \"text\",\r\n      \"type\" : \"text\"\r\n    } ]\r\n  }, {\r\n    \"score\" : 0.08008281904610115,\r\n    \"filename\" : \"filename\",\r\n    \"file_id\" : \"file_id\",\r\n    \"attributes\" : {\r\n      \"key\" : \"VectorStoreFileAttributes_value\"\r\n    },\r\n    \"content\" : [ {\r\n      \"text\" : \"text\",\r\n      \"type\" : \"text\"\r\n    }, {\r\n      \"text\" : \"text\",\r\n      \"type\" : \"text\"\r\n    } ]\r\n  } ],\r\n  \"has_more\" : true,\r\n  \"search_query\" : [ \"search_query\", \"search_query\" ],\r\n  \"object\" : \"vector_store.search_results.page\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<VectorStoreSearchResultsPage>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update vector store file attributes
        /// </summary>
        /// <remarks>Update attributes on a vector store file.</remarks>
        /// <param name="vectorStoreId">The ID of the vector store the file belongs to.</param>
        /// <param name="fileId">The ID of the file to update attributes.</param>
        /// <param name="updateVectorStoreFileAttributesRequest"></param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/v1/vector_stores/{vector_store_id}/files/{file_id}")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(VectorStoreFileObject))]
        public virtual IActionResult UpdateVectorStoreFileAttributes([FromRoute (Name = "vector_store_id")][Required]string vectorStoreId, [FromRoute (Name = "file_id")][Required]string fileId, [FromBody]UpdateVectorStoreFileAttributesRequest updateVectorStoreFileAttributesRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"chunking_strategy\" : {\r\n    \"static\" : {\r\n      \"max_chunk_size_tokens\" : 685,\r\n      \"chunk_overlap_tokens\" : 5\r\n    },\r\n    \"type\" : \"static\"\r\n  },\r\n  \"usage_bytes\" : 0,\r\n  \"created_at\" : 6,\r\n  \"attributes\" : {\r\n    \"key\" : \"VectorStoreFileAttributes_value\"\r\n  },\r\n  \"id\" : \"id\",\r\n  \"last_error\" : {\r\n    \"code\" : \"server_error\",\r\n    \"message\" : \"message\"\r\n  },\r\n  \"object\" : \"vector_store.file\",\r\n  \"vector_store_id\" : \"vector_store_id\",\r\n  \"status\" : \"in_progress\"\r\n}";
            
            var example = exampleJson != null
            ? JsonSerializer.Deserialize<VectorStoreFileObject>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
